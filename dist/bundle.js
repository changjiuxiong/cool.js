!function(t){var c={};function n(r){if(c[r])return c[r].exports;var g=c[r]={i:r,l:!1,exports:{}};return t[r].call(g.exports,g,g.exports,n),g.l=!0,g.exports}n.m=t,n.c=c,n.d=function(t,c,r){n.o(t,c)||Object.defineProperty(t,c,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,c){if(1&c&&(t=n(t)),8&c)return t;if(4&c&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&c&&"string"!=typeof t)for(var g in t)n.d(r,g,function(c){return t[c]}.bind(null,g));return r},n.n=function(t){var c=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(c,"a",c),c},n.o=function(t,c){return Object.prototype.hasOwnProperty.call(t,c)},n.p="",n(n.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\nvar Curves_namespaceObject = {};\n__webpack_require__.r(Curves_namespaceObject);\n__webpack_require__.d(Curves_namespaceObject, \"ArcCurve\", function() { return ArcCurve; });\n__webpack_require__.d(Curves_namespaceObject, \"CatmullRomCurve3\", function() { return CatmullRomCurve3; });\n__webpack_require__.d(Curves_namespaceObject, \"CubicBezierCurve\", function() { return CubicBezierCurve; });\n__webpack_require__.d(Curves_namespaceObject, \"CubicBezierCurve3\", function() { return CubicBezierCurve3; });\n__webpack_require__.d(Curves_namespaceObject, \"EllipseCurve\", function() { return EllipseCurve; });\n__webpack_require__.d(Curves_namespaceObject, \"LineCurve\", function() { return LineCurve; });\n__webpack_require__.d(Curves_namespaceObject, \"LineCurve3\", function() { return LineCurve3; });\n__webpack_require__.d(Curves_namespaceObject, \"QuadraticBezierCurve\", function() { return QuadraticBezierCurve; });\n__webpack_require__.d(Curves_namespaceObject, \"QuadraticBezierCurve3\", function() { return QuadraticBezierCurve3; });\n__webpack_require__.d(Curves_namespaceObject, \"SplineCurve\", function() { return SplineCurve; });\n\n// CONCATENATED MODULE: ./src/math/Math.js\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nvar _Math = {\r\n\r\n\tDEG2RAD: Math.PI / 180,\r\n\tRAD2DEG: 180 / Math.PI,\r\n\r\n\tgenerateUUID: ( function () {\r\n\r\n\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\r\n\r\n\t\tvar lut = [];\r\n\r\n\t\tfor ( var i = 0; i < 256; i ++ ) {\r\n\r\n\t\t\tlut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\r\n\r\n\t\t}\r\n\r\n\t\treturn function generateUUID() {\r\n\r\n\t\t\tvar d0 = Math.random() * 0xffffffff | 0;\r\n\t\t\tvar d1 = Math.random() * 0xffffffff | 0;\r\n\t\t\tvar d2 = Math.random() * 0xffffffff | 0;\r\n\t\t\tvar d3 = Math.random() * 0xffffffff | 0;\r\n\t\t\tvar uuid = lut[ d0 & 0xff ] + lut[ d0 >> 8 & 0xff ] + lut[ d0 >> 16 & 0xff ] + lut[ d0 >> 24 & 0xff ] + '-' +\r\n\t\t\t\tlut[ d1 & 0xff ] + lut[ d1 >> 8 & 0xff ] + '-' + lut[ d1 >> 16 & 0x0f | 0x40 ] + lut[ d1 >> 24 & 0xff ] + '-' +\r\n\t\t\t\tlut[ d2 & 0x3f | 0x80 ] + lut[ d2 >> 8 & 0xff ] + '-' + lut[ d2 >> 16 & 0xff ] + lut[ d2 >> 24 & 0xff ] +\r\n\t\t\t\tlut[ d3 & 0xff ] + lut[ d3 >> 8 & 0xff ] + lut[ d3 >> 16 & 0xff ] + lut[ d3 >> 24 & 0xff ];\r\n\r\n\t\t\t// .toUpperCase() here flattens concatenated strings to save heap memory space.\r\n\t\t\treturn uuid.toUpperCase();\r\n\r\n\t\t};\r\n\r\n\t} )(),\r\n\r\n\tclamp: function ( value, min, max ) {\r\n\r\n\t\treturn Math.max( min, Math.min( max, value ) );\r\n\r\n\t},\r\n\r\n\t// compute euclidian modulo of m % n\r\n\t// https://en.wikipedia.org/wiki/Modulo_operation\r\n\r\n\teuclideanModulo: function ( n, m ) {\r\n\r\n\t\treturn ( ( n % m ) + m ) % m;\r\n\r\n\t},\r\n\r\n\t// Linear mapping from range <a1, a2> to range <b1, b2>\r\n\r\n\tmapLinear: function ( x, a1, a2, b1, b2 ) {\r\n\r\n\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\r\n\r\n\t},\r\n\r\n\t// https://en.wikipedia.org/wiki/Linear_interpolation\r\n\r\n\tlerp: function ( x, y, t ) {\r\n\r\n\t\treturn ( 1 - t ) * x + t * y;\r\n\r\n\t},\r\n\r\n\t// http://en.wikipedia.org/wiki/Smoothstep\r\n\r\n\tsmoothstep: function ( x, min, max ) {\r\n\r\n\t\tif ( x <= min ) return 0;\r\n\t\tif ( x >= max ) return 1;\r\n\r\n\t\tx = ( x - min ) / ( max - min );\r\n\r\n\t\treturn x * x * ( 3 - 2 * x );\r\n\r\n\t},\r\n\r\n\tsmootherstep: function ( x, min, max ) {\r\n\r\n\t\tif ( x <= min ) return 0;\r\n\t\tif ( x >= max ) return 1;\r\n\r\n\t\tx = ( x - min ) / ( max - min );\r\n\r\n\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\r\n\r\n\t},\r\n\r\n\t// Random integer from <low, high> interval\r\n\r\n\trandInt: function ( low, high ) {\r\n\r\n\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\r\n\r\n\t},\r\n\r\n\t// Random float from <low, high> interval\r\n\r\n\trandFloat: function ( low, high ) {\r\n\r\n\t\treturn low + Math.random() * ( high - low );\r\n\r\n\t},\r\n\r\n\t// Random float from <-range/2, range/2> interval\r\n\r\n\trandFloatSpread: function ( range ) {\r\n\r\n\t\treturn range * ( 0.5 - Math.random() );\r\n\r\n\t},\r\n\r\n\tdegToRad: function ( degrees ) {\r\n\r\n\t\treturn degrees * _Math.DEG2RAD;\r\n\r\n\t},\r\n\r\n\tradToDeg: function ( radians ) {\r\n\r\n\t\treturn radians * _Math.RAD2DEG;\r\n\r\n\t},\r\n\r\n\tisPowerOfTwo: function ( value ) {\r\n\r\n\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\r\n\r\n\t},\r\n\r\n\tceilPowerOfTwo: function ( value ) {\r\n\r\n\t\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\r\n\r\n\t},\r\n\r\n\tfloorPowerOfTwo: function ( value ) {\r\n\r\n\t\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\r\n\r\n\t}\r\n\r\n};\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/math/Matrix4.js\n\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author jordi_ros / http://plattsoft.com\r\n * @author D1plo1d / http://github.com/D1plo1d\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author timknip / http://www.floorplanner.com/\r\n * @author bhouston / http://clara.io\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nfunction Matrix4() {\r\n\r\n\tthis.elements = [\r\n\r\n\t\t1, 0, 0, 0,\r\n\t\t0, 1, 0, 0,\r\n\t\t0, 0, 1, 0,\r\n\t\t0, 0, 0, 1\r\n\r\n\t];\r\n\r\n\tif ( arguments.length > 0 ) {\r\n\r\n\t\tconsole.error( 'COOL.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\r\n\r\n\t}\r\n\r\n}\r\n\r\nObject.assign( Matrix4.prototype, {\r\n\r\n\tisMatrix4: true,\r\n\r\n\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\r\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\r\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\r\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n    setIdentity :function() {\r\n        var e = this.elements;\r\n        e[0] = 1;   e[4] = 0;   e[8]  = 0;   e[12] = 0;\r\n        e[1] = 0;   e[5] = 1;   e[9]  = 0;   e[13] = 0;\r\n        e[2] = 0;   e[6] = 0;   e[10] = 1;   e[14] = 0;\r\n        e[3] = 0;   e[7] = 0;   e[11] = 0;   e[15] = 1;\r\n        return this;\r\n    },\r\n\r\n    multiplyVector3 :function(pos) {\r\n        var e = this.elements;\r\n        var p = pos.elements;\r\n        var v = new Vector3();\r\n        var result = v.elements;\r\n\r\n        result[0] = p[0] * e[0] + p[1] * e[4] + p[2] * e[ 8] + e[11];\r\n        result[1] = p[0] * e[1] + p[1] * e[5] + p[2] * e[ 9] + e[12];\r\n        result[2] = p[0] * e[2] + p[1] * e[6] + p[2] * e[10] + e[13];\r\n\r\n        return v;\r\n    },\r\n\r\n    multiplyVector4 :function(pos) {\r\n        var e = this.elements;\r\n        var p = pos.elements;\r\n        var v = new Vector4();\r\n        var result = v.elements;\r\n\r\n        result[0] = p[0] * e[0] + p[1] * e[4] + p[2] * e[ 8] + p[3] * e[12];\r\n        result[1] = p[0] * e[1] + p[1] * e[5] + p[2] * e[ 9] + p[3] * e[13];\r\n        result[2] = p[0] * e[2] + p[1] * e[6] + p[2] * e[10] + p[3] * e[14];\r\n        result[3] = p[0] * e[3] + p[1] * e[7] + p[2] * e[11] + p[3] * e[15];\r\n\r\n        return v;\r\n    },\r\n\r\n    setInverseOf :function(other) {\r\n        var i, s, d, inv, det;\r\n\r\n        s = other.elements;\r\n        d = this.elements;\r\n        inv = new Float32Array(16);\r\n\r\n        inv[0]  =   s[5]*s[10]*s[15] - s[5] *s[11]*s[14] - s[9] *s[6]*s[15]\r\n            + s[9]*s[7] *s[14] + s[13]*s[6] *s[11] - s[13]*s[7]*s[10];\r\n        inv[4]  = - s[4]*s[10]*s[15] + s[4] *s[11]*s[14] + s[8] *s[6]*s[15]\r\n            - s[8]*s[7] *s[14] - s[12]*s[6] *s[11] + s[12]*s[7]*s[10];\r\n        inv[8]  =   s[4]*s[9] *s[15] - s[4] *s[11]*s[13] - s[8] *s[5]*s[15]\r\n            + s[8]*s[7] *s[13] + s[12]*s[5] *s[11] - s[12]*s[7]*s[9];\r\n        inv[12] = - s[4]*s[9] *s[14] + s[4] *s[10]*s[13] + s[8] *s[5]*s[14]\r\n            - s[8]*s[6] *s[13] - s[12]*s[5] *s[10] + s[12]*s[6]*s[9];\r\n\r\n        inv[1]  = - s[1]*s[10]*s[15] + s[1] *s[11]*s[14] + s[9] *s[2]*s[15]\r\n            - s[9]*s[3] *s[14] - s[13]*s[2] *s[11] + s[13]*s[3]*s[10];\r\n        inv[5]  =   s[0]*s[10]*s[15] - s[0] *s[11]*s[14] - s[8] *s[2]*s[15]\r\n            + s[8]*s[3] *s[14] + s[12]*s[2] *s[11] - s[12]*s[3]*s[10];\r\n        inv[9]  = - s[0]*s[9] *s[15] + s[0] *s[11]*s[13] + s[8] *s[1]*s[15]\r\n            - s[8]*s[3] *s[13] - s[12]*s[1] *s[11] + s[12]*s[3]*s[9];\r\n        inv[13] =   s[0]*s[9] *s[14] - s[0] *s[10]*s[13] - s[8] *s[1]*s[14]\r\n            + s[8]*s[2] *s[13] + s[12]*s[1] *s[10] - s[12]*s[2]*s[9];\r\n\r\n        inv[2]  =   s[1]*s[6]*s[15] - s[1] *s[7]*s[14] - s[5] *s[2]*s[15]\r\n            + s[5]*s[3]*s[14] + s[13]*s[2]*s[7]  - s[13]*s[3]*s[6];\r\n        inv[6]  = - s[0]*s[6]*s[15] + s[0] *s[7]*s[14] + s[4] *s[2]*s[15]\r\n            - s[4]*s[3]*s[14] - s[12]*s[2]*s[7]  + s[12]*s[3]*s[6];\r\n        inv[10] =   s[0]*s[5]*s[15] - s[0] *s[7]*s[13] - s[4] *s[1]*s[15]\r\n            + s[4]*s[3]*s[13] + s[12]*s[1]*s[7]  - s[12]*s[3]*s[5];\r\n        inv[14] = - s[0]*s[5]*s[14] + s[0] *s[6]*s[13] + s[4] *s[1]*s[14]\r\n            - s[4]*s[2]*s[13] - s[12]*s[1]*s[6]  + s[12]*s[2]*s[5];\r\n\r\n        inv[3]  = - s[1]*s[6]*s[11] + s[1]*s[7]*s[10] + s[5]*s[2]*s[11]\r\n            - s[5]*s[3]*s[10] - s[9]*s[2]*s[7]  + s[9]*s[3]*s[6];\r\n        inv[7]  =   s[0]*s[6]*s[11] - s[0]*s[7]*s[10] - s[4]*s[2]*s[11]\r\n            + s[4]*s[3]*s[10] + s[8]*s[2]*s[7]  - s[8]*s[3]*s[6];\r\n        inv[11] = - s[0]*s[5]*s[11] + s[0]*s[7]*s[9]  + s[4]*s[1]*s[11]\r\n            - s[4]*s[3]*s[9]  - s[8]*s[1]*s[7]  + s[8]*s[3]*s[5];\r\n        inv[15] =   s[0]*s[5]*s[10] - s[0]*s[6]*s[9]  - s[4]*s[1]*s[10]\r\n            + s[4]*s[2]*s[9]  + s[8]*s[1]*s[6]  - s[8]*s[2]*s[5];\r\n\r\n        det = s[0]*inv[0] + s[1]*inv[4] + s[2]*inv[8] + s[3]*inv[12];\r\n        if (det === 0) {\r\n            return this;\r\n        }\r\n\r\n        det = 1 / det;\r\n        for (i = 0; i < 16; i++) {\r\n            d[i] = inv[i] * det;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    invert :function() {\r\n        return this.setInverseOf(this);\r\n    },\r\n\r\n    ortho :function(left, right, bottom, top, near, far) {\r\n        return this.concat(new Matrix4().setOrtho(left, right, bottom, top, near, far));\r\n    },\r\n\r\n    setFrustum :function(left, right, bottom, top, near, far) {\r\n        var e, rw, rh, rd;\r\n\r\n        if (left === right || top === bottom || near === far) {\r\n            throw 'null frustum';\r\n        }\r\n        if (near <= 0) {\r\n            throw 'near <= 0';\r\n        }\r\n        if (far <= 0) {\r\n            throw 'far <= 0';\r\n        }\r\n\r\n        rw = 1 / (right - left);\r\n        rh = 1 / (top - bottom);\r\n        rd = 1 / (far - near);\r\n\r\n        e = this.elements;\r\n\r\n        e[ 0] = 2 * near * rw;\r\n        e[ 1] = 0;\r\n        e[ 2] = 0;\r\n        e[ 3] = 0;\r\n\r\n        e[ 4] = 0;\r\n        e[ 5] = 2 * near * rh;\r\n        e[ 6] = 0;\r\n        e[ 7] = 0;\r\n\r\n        e[ 8] = (right + left) * rw;\r\n        e[ 9] = (top + bottom) * rh;\r\n        e[10] = -(far + near) * rd;\r\n        e[11] = -1;\r\n\r\n        e[12] = 0;\r\n        e[13] = 0;\r\n        e[14] = -2 * near * far * rd;\r\n        e[15] = 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    setOrtho :function(left, right, bottom, top, near, far) {\r\n        var e, rw, rh, rd;\r\n\r\n        if (left === right || bottom === top || near === far) {\r\n            throw 'null frustum';\r\n        }\r\n\r\n        rw = 1 / (right - left);\r\n        rh = 1 / (top - bottom);\r\n        rd = 1 / (far - near);\r\n\r\n        e = this.elements;\r\n\r\n        e[0]  = 2 * rw;\r\n        e[1]  = 0;\r\n        e[2]  = 0;\r\n        e[3]  = 0;\r\n\r\n        e[4]  = 0;\r\n        e[5]  = 2 * rh;\r\n        e[6]  = 0;\r\n        e[7]  = 0;\r\n\r\n        e[8]  = 0;\r\n        e[9]  = 0;\r\n        e[10] = -2 * rd;\r\n        e[11] = 0;\r\n\r\n        e[12] = -(right + left) * rw;\r\n        e[13] = -(top + bottom) * rh;\r\n        e[14] = -(far + near) * rd;\r\n        e[15] = 1;\r\n\r\n        return this;\r\n    },\r\n\r\n    concat :function(other) {\r\n        var i, e, a, b, ai0, ai1, ai2, ai3;\r\n\r\n        // Calculate e = a * b\r\n        e = this.elements;\r\n        a = this.elements;\r\n        b = other.elements;\r\n\r\n        // If e equals b, copy b to temporary matrix.\r\n        if (e === b) {\r\n            b = new Float32Array(16);\r\n            for (i = 0; i < 16; ++i) {\r\n                b[i] = e[i];\r\n            }\r\n        }\r\n\r\n        for (i = 0; i < 4; i++) {\r\n            ai0=a[i];  ai1=a[i+4];  ai2=a[i+8];  ai3=a[i+12];\r\n            e[i]    = ai0 * b[0]  + ai1 * b[1]  + ai2 * b[2]  + ai3 * b[3];\r\n            e[i+4]  = ai0 * b[4]  + ai1 * b[5]  + ai2 * b[6]  + ai3 * b[7];\r\n            e[i+8]  = ai0 * b[8]  + ai1 * b[9]  + ai2 * b[10] + ai3 * b[11];\r\n            e[i+12] = ai0 * b[12] + ai1 * b[13] + ai2 * b[14] + ai3 * b[15];\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    frustum :function(left, right, bottom, top, near, far) {\r\n        return this.concat(new Matrix4().setFrustum(left, right, bottom, top, near, far));\r\n    },\r\n\r\n    setPerspective :function(fovy, aspect, near, far) {\r\n        var e, rd, s, ct;\r\n\r\n        if (near === far || aspect === 0) {\r\n            throw 'null frustum';\r\n        }\r\n        if (near <= 0) {\r\n            throw 'near <= 0';\r\n        }\r\n        if (far <= 0) {\r\n            throw 'far <= 0';\r\n        }\r\n\r\n        fovy = Math.PI * fovy / 180 / 2;\r\n        s = Math.sin(fovy);\r\n        if (s === 0) {\r\n            throw 'null frustum';\r\n        }\r\n\r\n        rd = 1 / (far - near);\r\n        ct = Math.cos(fovy) / s;\r\n\r\n        e = this.elements;\r\n\r\n        e[0]  = ct / aspect;\r\n        e[1]  = 0;\r\n        e[2]  = 0;\r\n        e[3]  = 0;\r\n\r\n        e[4]  = 0;\r\n        e[5]  = ct;\r\n        e[6]  = 0;\r\n        e[7]  = 0;\r\n\r\n        e[8]  = 0;\r\n        e[9]  = 0;\r\n        e[10] = -(far + near) * rd;\r\n        e[11] = -1;\r\n\r\n        e[12] = 0;\r\n        e[13] = 0;\r\n        e[14] = -2 * near * far * rd;\r\n        e[15] = 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    perspective :function(fovy, aspect, near, far) {\r\n        return this.concat(new Matrix4().setPerspective(fovy, aspect, near, far));\r\n    },\r\n\r\n    setScale :function(x, y, z) {\r\n        var e = this.elements;\r\n        e[0] = x;  e[4] = 0;  e[8]  = 0;  e[12] = 0;\r\n        e[1] = 0;  e[5] = y;  e[9]  = 0;  e[13] = 0;\r\n        e[2] = 0;  e[6] = 0;  e[10] = z;  e[14] = 0;\r\n        e[3] = 0;  e[7] = 0;  e[11] = 0;  e[15] = 1;\r\n        return this;\r\n    },\r\n\r\n    scale :function(x, y, z) {\r\n        var e = this.elements;\r\n        e[0] *= x;  e[4] *= y;  e[8]  *= z;\r\n        e[1] *= x;  e[5] *= y;  e[9]  *= z;\r\n        e[2] *= x;  e[6] *= y;  e[10] *= z;\r\n        e[3] *= x;  e[7] *= y;  e[11] *= z;\r\n        return this;\r\n    },\r\n\r\n\tidentity: function () {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, 1, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new Matrix4().fromArray( this.elements );\r\n\r\n\t},\r\n\r\n\tcopy: function ( m ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar me = m.elements;\r\n\r\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\r\n\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\r\n\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\r\n\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyPosition: function ( m ) {\r\n\r\n\t\tvar te = this.elements, me = m.elements;\r\n\r\n\t\tte[ 12 ] = me[ 12 ];\r\n\t\tte[ 13 ] = me[ 13 ];\r\n\t\tte[ 14 ] = me[ 14 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\textractBasis: function ( xAxis, yAxis, zAxis ) {\r\n\r\n\t\txAxis.setFromMatrixColumn( this, 0 );\r\n\t\tyAxis.setFromMatrixColumn( this, 1 );\r\n\t\tzAxis.setFromMatrixColumn( this, 2 );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\r\n\r\n\t\tthis.set(\r\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\r\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\r\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\r\n\t\t\t0, 0, 0, 1\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\textractRotation: function () {\r\n\r\n\t\tvar v1 = new Vector3();\r\n\r\n\t\treturn function extractRotation( m ) {\r\n\r\n\t\t\t// this method does not support reflection matrices\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = m.elements;\r\n\r\n\t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\r\n\t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\r\n\t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\r\n\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\r\n\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\r\n\t\t\tte[ 3 ] = 0;\r\n\r\n\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\r\n\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\r\n\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\r\n\t\t\tte[ 7 ] = 0;\r\n\r\n\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\r\n\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\r\n\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\r\n\t\t\tte[ 11 ] = 0;\r\n\r\n\t\t\tte[ 12 ] = 0;\r\n\t\t\tte[ 13 ] = 0;\r\n\t\t\tte[ 14 ] = 0;\r\n\t\t\tte[ 15 ] = 1;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tmakeRotationFromEuler: function ( euler ) {\r\n\r\n\t\tif ( ! ( euler && euler.isEuler ) ) {\r\n\r\n\t\t\tconsole.error( 'COOL.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t}\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar x = euler.x, y = euler.y, z = euler.z;\r\n\t\tvar a = Math.cos( x ), b = Math.sin( x );\r\n\t\tvar c = Math.cos( y ), d = Math.sin( y );\r\n\t\tvar e = Math.cos( z ), f = Math.sin( z );\r\n\r\n\t\tif ( euler.order === 'XYZ' ) {\r\n\r\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = - c * f;\r\n\t\t\tte[ 8 ] = d;\r\n\r\n\t\t\tte[ 1 ] = af + be * d;\r\n\t\t\tte[ 5 ] = ae - bf * d;\r\n\t\t\tte[ 9 ] = - b * c;\r\n\r\n\t\t\tte[ 2 ] = bf - ae * d;\r\n\t\t\tte[ 6 ] = be + af * d;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'YXZ' ) {\r\n\r\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\tte[ 0 ] = ce + df * b;\r\n\t\t\tte[ 4 ] = de * b - cf;\r\n\t\t\tte[ 8 ] = a * d;\r\n\r\n\t\t\tte[ 1 ] = a * f;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = - b;\r\n\r\n\t\t\tte[ 2 ] = cf * b - de;\r\n\t\t\tte[ 6 ] = df + ce * b;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'ZXY' ) {\r\n\r\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\tte[ 0 ] = ce - df * b;\r\n\t\t\tte[ 4 ] = - a * f;\r\n\t\t\tte[ 8 ] = de + cf * b;\r\n\r\n\t\t\tte[ 1 ] = cf + de * b;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = df - ce * b;\r\n\r\n\t\t\tte[ 2 ] = - a * d;\r\n\t\t\tte[ 6 ] = b;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'ZYX' ) {\r\n\r\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = be * d - af;\r\n\t\t\tte[ 8 ] = ae * d + bf;\r\n\r\n\t\t\tte[ 1 ] = c * f;\r\n\t\t\tte[ 5 ] = bf * d + ae;\r\n\t\t\tte[ 9 ] = af * d - be;\r\n\r\n\t\t\tte[ 2 ] = - d;\r\n\t\t\tte[ 6 ] = b * c;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'YZX' ) {\r\n\r\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = bd - ac * f;\r\n\t\t\tte[ 8 ] = bc * f + ad;\r\n\r\n\t\t\tte[ 1 ] = f;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = - b * e;\r\n\r\n\t\t\tte[ 2 ] = - d * e;\r\n\t\t\tte[ 6 ] = ad * f + bc;\r\n\t\t\tte[ 10 ] = ac - bd * f;\r\n\r\n\t\t} else if ( euler.order === 'XZY' ) {\r\n\r\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = - f;\r\n\t\t\tte[ 8 ] = d * e;\r\n\r\n\t\t\tte[ 1 ] = ac * f + bd;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = ad * f - bc;\r\n\r\n\t\t\tte[ 2 ] = bc * f - ad;\r\n\t\t\tte[ 6 ] = b * e;\r\n\t\t\tte[ 10 ] = bd * f + ac;\r\n\r\n\t\t}\r\n\r\n\t\t// bottom row\r\n\t\tte[ 3 ] = 0;\r\n\t\tte[ 7 ] = 0;\r\n\t\tte[ 11 ] = 0;\r\n\r\n\t\t// last column\r\n\t\tte[ 12 ] = 0;\r\n\t\tte[ 13 ] = 0;\r\n\t\tte[ 14 ] = 0;\r\n\t\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationFromQuaternion: function () {\r\n\r\n\t\tvar zero = new Vector3( 0, 0, 0 );\r\n\t\tvar one = new Vector3( 1, 1, 1 );\r\n\r\n\t\treturn function makeRotationFromQuaternion( q ) {\r\n\r\n\t\t\treturn this.compose( zero, q, one );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tlookAt: function () {\r\n\r\n\t\tvar x = new Vector3();\r\n\t\tvar y = new Vector3();\r\n\t\tvar z = new Vector3();\r\n\r\n\t\treturn function lookAt( eye, target, up ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tz.subVectors( eye, target );\r\n\r\n\t\t\tif ( z.lengthSq() === 0 ) {\r\n\r\n\t\t\t\t// eye and target are in the same position\r\n\r\n\t\t\t\tz.z = 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tz.normalize();\r\n\t\t\tx.crossVectors( up, z );\r\n\r\n\t\t\tif ( x.lengthSq() === 0 ) {\r\n\r\n\t\t\t\t// up and z are parallel\r\n\r\n\t\t\t\tif ( Math.abs( up.z ) === 1 ) {\r\n\r\n\t\t\t\t\tz.x += 0.0001;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tz.z += 0.0001;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tz.normalize();\r\n\t\t\t\tx.crossVectors( up, z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tx.normalize();\r\n\t\t\ty.crossVectors( z, x );\r\n\r\n\t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\r\n\t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\r\n\t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tmultiply: function ( m, n ) {\r\n\r\n\t\tif ( n !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\r\n\t\t\treturn this.multiplyMatrices( m, n );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.multiplyMatrices( this, m );\r\n\r\n\t},\r\n\r\n\tpremultiply: function ( m ) {\r\n\r\n\t\treturn this.multiplyMatrices( m, this );\r\n\r\n\t},\r\n\r\n\tmultiplyMatrices: function ( a, b ) {\r\n\r\n\t\tvar ae = a.elements;\r\n\t\tvar be = b.elements;\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\r\n\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\r\n\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\r\n\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\r\n\r\n\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\r\n\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\r\n\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\r\n\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\r\n\r\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\r\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\r\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\r\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\r\n\r\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\r\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\r\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\r\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\r\n\r\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\r\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\r\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\r\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\r\n\r\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\r\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\r\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\r\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\r\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\r\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\r\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyToBufferAttribute: function () {\r\n\r\n\t\tvar v1 = new Vector3();\r\n\r\n\t\treturn function applyToBufferAttribute( attribute ) {\r\n\r\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\tv1.x = attribute.getX( i );\r\n\t\t\t\tv1.y = attribute.getY( i );\r\n\t\t\t\tv1.z = attribute.getZ( i );\r\n\r\n\t\t\t\tv1.applyMatrix4( this );\r\n\r\n\t\t\t\tattribute.setXYZ( i, v1.x, v1.y, v1.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn attribute;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tdeterminant: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\r\n\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\r\n\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\r\n\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\r\n\r\n\t\t//TODO: make this more efficient\r\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\r\n\r\n\t\treturn (\r\n\t\t\tn41 * (\r\n\t\t\t\t+ n14 * n23 * n32\r\n\t\t\t\t - n13 * n24 * n32\r\n\t\t\t\t - n14 * n22 * n33\r\n\t\t\t\t + n12 * n24 * n33\r\n\t\t\t\t + n13 * n22 * n34\r\n\t\t\t\t - n12 * n23 * n34\r\n\t\t\t) +\r\n\t\t\tn42 * (\r\n\t\t\t\t+ n11 * n23 * n34\r\n\t\t\t\t - n11 * n24 * n33\r\n\t\t\t\t + n14 * n21 * n33\r\n\t\t\t\t - n13 * n21 * n34\r\n\t\t\t\t + n13 * n24 * n31\r\n\t\t\t\t - n14 * n23 * n31\r\n\t\t\t) +\r\n\t\t\tn43 * (\r\n\t\t\t\t+ n11 * n24 * n32\r\n\t\t\t\t - n11 * n22 * n34\r\n\t\t\t\t - n14 * n21 * n32\r\n\t\t\t\t + n12 * n21 * n34\r\n\t\t\t\t + n14 * n22 * n31\r\n\t\t\t\t - n12 * n24 * n31\r\n\t\t\t) +\r\n\t\t\tn44 * (\r\n\t\t\t\t- n13 * n22 * n31\r\n\t\t\t\t - n11 * n23 * n32\r\n\t\t\t\t + n11 * n22 * n33\r\n\t\t\t\t + n13 * n21 * n32\r\n\t\t\t\t - n12 * n21 * n33\r\n\t\t\t\t + n12 * n23 * n31\r\n\t\t\t)\r\n\r\n\t\t);\r\n\r\n\t},\r\n\r\n\ttranspose: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar tmp;\r\n\r\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\r\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\r\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\r\n\r\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\r\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\r\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetPosition: function ( v ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 12 ] = v.x;\r\n\t\tte[ 13 ] = v.y;\r\n\t\tte[ 14 ] = v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetInverse: function ( m, throwOnDegenerate ) {\r\n\r\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\r\n\t\tvar te = this.elements,\r\n\t\t\tme = m.elements,\r\n\r\n\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\r\n\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\r\n\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\r\n\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\r\n\r\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\r\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\r\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\r\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\r\n\r\n\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\r\n\r\n\t\tif ( det === 0 ) {\r\n\r\n\t\t\tvar msg = \"COOL.Matrix4: .getInverse() can't invert matrix, determinant is 0\";\r\n\r\n\t\t\tif ( throwOnDegenerate === true ) {\r\n\r\n\t\t\t\tthrow new Error( msg );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( msg );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.identity();\r\n\r\n\t\t}\r\n\r\n\t\tvar detInv = 1 / det;\r\n\r\n\t\tte[ 0 ] = t11 * detInv;\r\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\r\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\r\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\r\n\r\n\t\tte[ 4 ] = t12 * detInv;\r\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\r\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\r\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\r\n\r\n\t\tte[ 8 ] = t13 * detInv;\r\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\r\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\r\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\r\n\r\n\t\tte[ 12 ] = t14 * detInv;\r\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\r\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\r\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tscale: function ( v ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar x = v.x, y = v.y, z = v.z;\r\n\r\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\r\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\r\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\r\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n    setTranslate :function(x, y, z) {\r\n        var e = this.elements;\r\n        e[0] = 1;  e[4] = 0;  e[8]  = 0;  e[12] = x;\r\n        e[1] = 0;  e[5] = 1;  e[9]  = 0;  e[13] = y;\r\n        e[2] = 0;  e[6] = 0;  e[10] = 1;  e[14] = z;\r\n        e[3] = 0;  e[7] = 0;  e[11] = 0;  e[15] = 1;\r\n        return this;\r\n    },\r\n\r\n    translate :function(x, y, z) {\r\n        var e = this.elements;\r\n        e[12] += e[0] * x + e[4] * y + e[8]  * z;\r\n        e[13] += e[1] * x + e[5] * y + e[9]  * z;\r\n        e[14] += e[2] * x + e[6] * y + e[10] * z;\r\n        e[15] += e[3] * x + e[7] * y + e[11] * z;\r\n        return this;\r\n    },\r\n\r\n    setRotate :function(angle, x, y, z) {\r\n        var e, s, c, len, rlen, nc, xy, yz, zx, xs, ys, zs;\r\n\r\n        angle = Math.PI * angle / 180;\r\n        e = this.elements;\r\n\r\n        s = Math.sin(angle);\r\n        c = Math.cos(angle);\r\n\r\n        if (0 !== x && 0 === y && 0 === z) {\r\n            // Rotation around X axis\r\n            if (x < 0) {\r\n                s = -s;\r\n            }\r\n            e[0] = 1;  e[4] = 0;  e[ 8] = 0;  e[12] = 0;\r\n            e[1] = 0;  e[5] = c;  e[ 9] =-s;  e[13] = 0;\r\n            e[2] = 0;  e[6] = s;  e[10] = c;  e[14] = 0;\r\n            e[3] = 0;  e[7] = 0;  e[11] = 0;  e[15] = 1;\r\n        } else if (0 === x && 0 !== y && 0 === z) {\r\n            // Rotation around Y axis\r\n            if (y < 0) {\r\n                s = -s;\r\n            }\r\n            e[0] = c;  e[4] = 0;  e[ 8] = s;  e[12] = 0;\r\n            e[1] = 0;  e[5] = 1;  e[ 9] = 0;  e[13] = 0;\r\n            e[2] =-s;  e[6] = 0;  e[10] = c;  e[14] = 0;\r\n            e[3] = 0;  e[7] = 0;  e[11] = 0;  e[15] = 1;\r\n        } else if (0 === x && 0 === y && 0 !== z) {\r\n            // Rotation around Z axis\r\n            if (z < 0) {\r\n                s = -s;\r\n            }\r\n            e[0] = c;  e[4] =-s;  e[ 8] = 0;  e[12] = 0;\r\n            e[1] = s;  e[5] = c;  e[ 9] = 0;  e[13] = 0;\r\n            e[2] = 0;  e[6] = 0;  e[10] = 1;  e[14] = 0;\r\n            e[3] = 0;  e[7] = 0;  e[11] = 0;  e[15] = 1;\r\n        } else {\r\n            // Rotation around another axis\r\n            len = Math.sqrt(x*x + y*y + z*z);\r\n            if (len !== 1) {\r\n                rlen = 1 / len;\r\n                x *= rlen;\r\n                y *= rlen;\r\n                z *= rlen;\r\n            }\r\n            nc = 1 - c;\r\n            xy = x * y;\r\n            yz = y * z;\r\n            zx = z * x;\r\n            xs = x * s;\r\n            ys = y * s;\r\n            zs = z * s;\r\n\r\n            e[ 0] = x*x*nc +  c;\r\n            e[ 1] = xy *nc + zs;\r\n            e[ 2] = zx *nc - ys;\r\n            e[ 3] = 0;\r\n\r\n            e[ 4] = xy *nc - zs;\r\n            e[ 5] = y*y*nc +  c;\r\n            e[ 6] = yz *nc + xs;\r\n            e[ 7] = 0;\r\n\r\n            e[ 8] = zx *nc + ys;\r\n            e[ 9] = yz *nc - xs;\r\n            e[10] = z*z*nc +  c;\r\n            e[11] = 0;\r\n\r\n            e[12] = 0;\r\n            e[13] = 0;\r\n            e[14] = 0;\r\n            e[15] = 1;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    rotate :function(angle, x, y, z) {\r\n        return this.concat(new Matrix4().setRotate(angle, x, y, z));\r\n    },\r\n\r\n    setLookAt :function(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ) {\r\n        var e, fx, fy, fz, rlf, sx, sy, sz, rls, ux, uy, uz;\r\n\r\n        fx = centerX - eyeX;\r\n        fy = centerY - eyeY;\r\n        fz = centerZ - eyeZ;\r\n\r\n        // Normalize f.\r\n        rlf = 1 / Math.sqrt(fx*fx + fy*fy + fz*fz);\r\n        fx *= rlf;\r\n        fy *= rlf;\r\n        fz *= rlf;\r\n\r\n        // Calculate cross product of f and up.\r\n        sx = fy * upZ - fz * upY;\r\n        sy = fz * upX - fx * upZ;\r\n        sz = fx * upY - fy * upX;\r\n\r\n        // Normalize s.\r\n        rls = 1 / Math.sqrt(sx*sx + sy*sy + sz*sz);\r\n        sx *= rls;\r\n        sy *= rls;\r\n        sz *= rls;\r\n\r\n        // Calculate cross product of s and f.\r\n        ux = sy * fz - sz * fy;\r\n        uy = sz * fx - sx * fz;\r\n        uz = sx * fy - sy * fx;\r\n\r\n        // Set to this.\r\n        e = this.elements;\r\n        e[0] = sx;\r\n        e[1] = ux;\r\n        e[2] = -fx;\r\n        e[3] = 0;\r\n\r\n        e[4] = sy;\r\n        e[5] = uy;\r\n        e[6] = -fy;\r\n        e[7] = 0;\r\n\r\n        e[8] = sz;\r\n        e[9] = uz;\r\n        e[10] = -fz;\r\n        e[11] = 0;\r\n\r\n        e[12] = 0;\r\n        e[13] = 0;\r\n        e[14] = 0;\r\n        e[15] = 1;\r\n\r\n        // Translate.\r\n        return this.translate(-eyeX, -eyeY, -eyeZ);\r\n    },\r\n\r\n    lookAt2 :function(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ) {\r\n        return this.concat(new Matrix4().setLookAt(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ));\r\n    },\r\n\r\n\tgetMaxScaleOnAxis: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\r\n\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\r\n\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\r\n\r\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\r\n\r\n\t},\r\n\r\n\tmakeTranslation: function ( x, y, z ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, x,\r\n\t\t\t0, 1, 0, y,\r\n\t\t\t0, 0, 1, z,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationX: function ( theta ) {\r\n\r\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, c, - s, 0,\r\n\t\t\t0, s, c, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationY: function ( theta ) {\r\n\r\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t c, 0, s, 0,\r\n\t\t\t 0, 1, 0, 0,\r\n\t\t\t- s, 0, c, 0,\r\n\t\t\t 0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationZ: function ( theta ) {\r\n\r\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tc, - s, 0, 0,\r\n\t\t\ts, c, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationAxis: function ( axis, angle ) {\r\n\r\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\r\n\r\n\t\tvar c = Math.cos( angle );\r\n\t\tvar s = Math.sin( angle );\r\n\t\tvar t = 1 - c;\r\n\t\tvar x = axis.x, y = axis.y, z = axis.z;\r\n\t\tvar tx = t * x, ty = t * y;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\r\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\r\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\t return this;\r\n\r\n\t},\r\n\r\n\tmakeScale: function ( x, y, z ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tx, 0, 0, 0,\r\n\t\t\t0, y, 0, 0,\r\n\t\t\t0, 0, z, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeShear: function ( x, y, z ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, y, z, 0,\r\n\t\t\tx, 1, z, 0,\r\n\t\t\tx, y, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcompose: function ( position, quaternion, scale ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\r\n\t\tvar x2 = x + x,\ty2 = y + y, z2 = z + z;\r\n\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\r\n\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\r\n\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\r\n\r\n\t\tvar sx = scale.x, sy = scale.y, sz = scale.z;\r\n\r\n\t        te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\r\n\t        te[ 1 ] = ( xy + wz ) * sx;\r\n\t        te[ 2 ] = ( xz - wy ) * sx;\r\n\t        te[ 3 ] = 0;\r\n\r\n\t        te[ 4 ] = ( xy - wz ) * sy;\r\n\t        te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\r\n\t        te[ 6 ] = ( yz + wx ) * sy;\r\n\t        te[ 7 ] = 0;\r\n\r\n\t        te[ 8 ] = ( xz + wy ) * sz;\r\n\t        te[ 9 ] = ( yz - wx ) * sz;\r\n\t        te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\r\n\t        te[ 11 ] = 0;\r\n\r\n\t        te[ 12 ] = position.x;\r\n\t        te[ 13 ] = position.y;\r\n\t        te[ 14 ] = position.z;\r\n\t        te[ 15 ] = 1;\r\n\r\n\t        return this;\r\n\r\n\t},\r\n\r\n\tdecompose: function () {\r\n\r\n\t\tvar vector = new Vector3();\r\n\t\tvar matrix = new Matrix4();\r\n\r\n\t\treturn function decompose( position, quaternion, scale ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\r\n\t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\r\n\t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\r\n\r\n\t\t\t// if determine is negative, we need to invert one scale\r\n\t\t\tvar det = this.determinant();\r\n\t\t\tif ( det < 0 ) sx = - sx;\r\n\r\n\t\t\tposition.x = te[ 12 ];\r\n\t\t\tposition.y = te[ 13 ];\r\n\t\t\tposition.z = te[ 14 ];\r\n\r\n\t\t\t// scale the rotation part\r\n\t\t\tmatrix.copy( this );\r\n\r\n\t\t\tvar invSX = 1 / sx;\r\n\t\t\tvar invSY = 1 / sy;\r\n\t\t\tvar invSZ = 1 / sz;\r\n\r\n\t\t\tmatrix.elements[ 0 ] *= invSX;\r\n\t\t\tmatrix.elements[ 1 ] *= invSX;\r\n\t\t\tmatrix.elements[ 2 ] *= invSX;\r\n\r\n\t\t\tmatrix.elements[ 4 ] *= invSY;\r\n\t\t\tmatrix.elements[ 5 ] *= invSY;\r\n\t\t\tmatrix.elements[ 6 ] *= invSY;\r\n\r\n\t\t\tmatrix.elements[ 8 ] *= invSZ;\r\n\t\t\tmatrix.elements[ 9 ] *= invSZ;\r\n\t\t\tmatrix.elements[ 10 ] *= invSZ;\r\n\r\n\t\t\tquaternion.setFromRotationMatrix( matrix );\r\n\r\n\t\t\tscale.x = sx;\r\n\t\t\tscale.y = sy;\r\n\t\t\tscale.z = sz;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tmakePerspective: function ( left, right, top, bottom, near, far ) {\r\n\r\n\t\tif ( far === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\r\n\r\n\t\t}\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar x = 2 * near / ( right - left );\r\n\t\tvar y = 2 * near / ( top - bottom );\r\n\r\n\t\tvar a = ( right + left ) / ( right - left );\r\n\t\tvar b = ( top + bottom ) / ( top - bottom );\r\n\t\tvar c = - ( far + near ) / ( far - near );\r\n\t\tvar d = - 2 * far * near / ( far - near );\r\n\r\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\r\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\r\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\r\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar w = 1.0 / ( right - left );\r\n\t\tvar h = 1.0 / ( top - bottom );\r\n\t\tvar p = 1.0 / ( far - near );\r\n\r\n\t\tvar x = ( right + left ) * w;\r\n\t\tvar y = ( top + bottom ) * h;\r\n\t\tvar z = ( far + near ) * p;\r\n\r\n\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\r\n\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\r\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\r\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( matrix ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar me = matrix.elements;\r\n\r\n\t\tfor ( var i = 0; i < 16; i ++ ) {\r\n\r\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tfor ( var i = 0; i < 16; i ++ ) {\r\n\r\n\t\t\tthis.elements[ i ] = array[ i + offset ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tarray[ offset ] = te[ 0 ];\r\n\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\r\n\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\r\n\t\tarray[ offset + 8 ] = te[ 8 ];\r\n\t\tarray[ offset + 9 ] = te[ 9 ];\r\n\t\tarray[ offset + 10 ] = te[ 10 ];\r\n\t\tarray[ offset + 11 ] = te[ 11 ];\r\n\r\n\t\tarray[ offset + 12 ] = te[ 12 ];\r\n\t\tarray[ offset + 13 ] = te[ 13 ];\r\n\t\tarray[ offset + 14 ] = te[ 14 ];\r\n\t\tarray[ offset + 15 ] = te[ 15 ];\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/math/Quaternion.js\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\n\r\n\r\n\r\nfunction Quaternion( x, y, z, w ) {\r\n\r\n\tthis._x = x || 0;\r\n\tthis._y = y || 0;\r\n\tthis._z = z || 0;\r\n\tthis._w = ( w !== undefined ) ? w : 1;\r\n\r\n}\r\n\r\nObject.assign( Quaternion, {\r\n\r\n\tslerp: function ( qa, qb, qm, t ) {\r\n\r\n\t\treturn qm.copy( qa ).slerp( qb, t );\r\n\r\n\t},\r\n\r\n\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\r\n\r\n\t\t// fuzz-free, array-based Quaternion SLERP operation\r\n\r\n\t\tvar x0 = src0[ srcOffset0 + 0 ],\r\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\r\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\r\n\t\t\tw0 = src0[ srcOffset0 + 3 ],\r\n\r\n\t\t\tx1 = src1[ srcOffset1 + 0 ],\r\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\r\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\r\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\r\n\r\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\r\n\r\n\t\t\tvar s = 1 - t,\r\n\r\n\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\r\n\r\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\r\n\t\t\t\tsqrSin = 1 - cos * cos;\r\n\r\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\r\n\t\t\tif ( sqrSin > Number.EPSILON ) {\r\n\r\n\t\t\t\tvar sin = Math.sqrt( sqrSin ),\r\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\r\n\r\n\t\t\t\ts = Math.sin( s * len ) / sin;\r\n\t\t\t\tt = Math.sin( t * len ) / sin;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar tDir = t * dir;\r\n\r\n\t\t\tx0 = x0 * s + x1 * tDir;\r\n\t\t\ty0 = y0 * s + y1 * tDir;\r\n\t\t\tz0 = z0 * s + z1 * tDir;\r\n\t\t\tw0 = w0 * s + w1 * tDir;\r\n\r\n\t\t\t// Normalize in case we just did a lerp:\r\n\t\t\tif ( s === 1 - t ) {\r\n\r\n\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\r\n\r\n\t\t\t\tx0 *= f;\r\n\t\t\t\ty0 *= f;\r\n\t\t\t\tz0 *= f;\r\n\t\t\t\tw0 *= f;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tdst[ dstOffset ] = x0;\r\n\t\tdst[ dstOffset + 1 ] = y0;\r\n\t\tdst[ dstOffset + 2 ] = z0;\r\n\t\tdst[ dstOffset + 3 ] = w0;\r\n\r\n\t}\r\n\r\n} );\r\n\r\nObject.defineProperties( Quaternion.prototype, {\r\n\r\n\tx: {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\treturn this._x;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tthis._x = value;\r\n\t\t\tthis.onChangeCallback();\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ty: {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\treturn this._y;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tthis._y = value;\r\n\t\t\tthis.onChangeCallback();\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tz: {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\treturn this._z;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tthis._z = value;\r\n\t\t\tthis.onChangeCallback();\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tw: {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\treturn this._w;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tthis._w = value;\r\n\t\t\tthis.onChangeCallback();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n} );\r\n\r\nObject.assign( Quaternion.prototype, {\r\n\r\n\tisQuaternion: true,\r\n\r\n\tset: function ( x, y, z, w ) {\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._w = w;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\r\n\r\n\t},\r\n\r\n\tcopy: function ( quaternion ) {\r\n\r\n\t\tthis._x = quaternion.x;\r\n\t\tthis._y = quaternion.y;\r\n\t\tthis._z = quaternion.z;\r\n\t\tthis._w = quaternion.w;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromEuler: function ( euler, update ) {\r\n\r\n\t\tif ( ! ( euler && euler.isEuler ) ) {\r\n\r\n\t\t\tthrow new Error( 'COOL.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t}\r\n\r\n\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\r\n\r\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\r\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\r\n\t\t//\tcontent/SpinCalc.m\r\n\r\n\t\tvar cos = Math.cos;\r\n\t\tvar sin = Math.sin;\r\n\r\n\t\tvar c1 = cos( x / 2 );\r\n\t\tvar c2 = cos( y / 2 );\r\n\t\tvar c3 = cos( z / 2 );\r\n\r\n\t\tvar s1 = sin( x / 2 );\r\n\t\tvar s2 = sin( y / 2 );\r\n\t\tvar s3 = sin( z / 2 );\r\n\r\n\t\tif ( order === 'XYZ' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t}\r\n\r\n\t\tif ( update !== false ) this.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromAxisAngle: function ( axis, angle ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\r\n\r\n\t\t// assumes axis is normalized\r\n\r\n\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\r\n\r\n\t\tthis._x = axis.x * s;\r\n\t\tthis._y = axis.y * s;\r\n\t\tthis._z = axis.z * s;\r\n\t\tthis._w = Math.cos( halfAngle );\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromRotationMatrix: function ( m ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tvar te = m.elements,\r\n\r\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\r\n\r\n\t\t\ttrace = m11 + m22 + m33,\r\n\t\t\ts;\r\n\r\n\t\tif ( trace > 0 ) {\r\n\r\n\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\r\n\r\n\t\t\tthis._w = 0.25 / s;\r\n\t\t\tthis._x = ( m32 - m23 ) * s;\r\n\t\t\tthis._y = ( m13 - m31 ) * s;\r\n\t\t\tthis._z = ( m21 - m12 ) * s;\r\n\r\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\r\n\r\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\r\n\r\n\t\t\tthis._w = ( m32 - m23 ) / s;\r\n\t\t\tthis._x = 0.25 * s;\r\n\t\t\tthis._y = ( m12 + m21 ) / s;\r\n\t\t\tthis._z = ( m13 + m31 ) / s;\r\n\r\n\t\t} else if ( m22 > m33 ) {\r\n\r\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\r\n\r\n\t\t\tthis._w = ( m13 - m31 ) / s;\r\n\t\t\tthis._x = ( m12 + m21 ) / s;\r\n\t\t\tthis._y = 0.25 * s;\r\n\t\t\tthis._z = ( m23 + m32 ) / s;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\r\n\r\n\t\t\tthis._w = ( m21 - m12 ) / s;\r\n\t\t\tthis._x = ( m13 + m31 ) / s;\r\n\t\t\tthis._y = ( m23 + m32 ) / s;\r\n\t\t\tthis._z = 0.25 * s;\r\n\r\n\t\t}\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromUnitVectors: function () {\r\n\r\n\t\t// assumes direction vectors vFrom and vTo are normalized\r\n\r\n\t\tvar v1 = new Vector3();\r\n\t\tvar r;\r\n\r\n\t\tvar EPS = 0.000001;\r\n\r\n\t\treturn function setFromUnitVectors( vFrom, vTo ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new Vector3();\r\n\r\n\t\t\tr = vFrom.dot( vTo ) + 1;\r\n\r\n\t\t\tif ( r < EPS ) {\r\n\r\n\t\t\t\tr = 0;\r\n\r\n\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\r\n\r\n\t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tv1.crossVectors( vFrom, vTo );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._x = v1.x;\r\n\t\t\tthis._y = v1.y;\r\n\t\t\tthis._z = v1.z;\r\n\t\t\tthis._w = r;\r\n\r\n\t\t\treturn this.normalize();\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tangleTo: function ( q ) {\r\n\r\n\t\treturn 2 * Math.acos( Math.abs( _Math.clamp( this.dot( q ), - 1, 1 ) ) );\r\n\r\n\t},\r\n\r\n\trotateTowards: function ( q, step ) {\r\n\r\n\t\tvar angle = this.angleTo( q );\r\n\r\n\t\tif ( angle === 0 ) return this;\r\n\r\n\t\tvar t = Math.min( 1, step / angle );\r\n\r\n\t\tthis.slerp( q, t );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tinverse: function () {\r\n\r\n\t\t// quaternion is assumed to have unit length\r\n\r\n\t\treturn this.conjugate();\r\n\r\n\t},\r\n\r\n\tconjugate: function () {\r\n\r\n\t\tthis._x *= - 1;\r\n\t\tthis._y *= - 1;\r\n\t\tthis._z *= - 1;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\tvar l = this.length();\r\n\r\n\t\tif ( l === 0 ) {\r\n\r\n\t\t\tthis._x = 0;\r\n\t\t\tthis._y = 0;\r\n\t\t\tthis._z = 0;\r\n\t\t\tthis._w = 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tl = 1 / l;\r\n\r\n\t\t\tthis._x = this._x * l;\r\n\t\t\tthis._y = this._y * l;\r\n\t\t\tthis._z = this._z * l;\r\n\t\t\tthis._w = this._w * l;\r\n\r\n\t\t}\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( q, p ) {\r\n\r\n\t\tif ( p !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\r\n\t\t\treturn this.multiplyQuaternions( q, p );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.multiplyQuaternions( this, q );\r\n\r\n\t},\r\n\r\n\tpremultiply: function ( q ) {\r\n\r\n\t\treturn this.multiplyQuaternions( q, this );\r\n\r\n\t},\r\n\r\n\tmultiplyQuaternions: function ( a, b ) {\r\n\r\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\r\n\r\n\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\r\n\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\r\n\r\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\r\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\r\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\r\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tslerp: function ( qb, t ) {\r\n\r\n\t\tif ( t === 0 ) return this;\r\n\t\tif ( t === 1 ) return this.copy( qb );\r\n\r\n\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\r\n\r\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\r\n\r\n\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\r\n\r\n\t\tif ( cosHalfTheta < 0 ) {\r\n\r\n\t\t\tthis._w = - qb._w;\r\n\t\t\tthis._x = - qb._x;\r\n\t\t\tthis._y = - qb._y;\r\n\t\t\tthis._z = - qb._z;\r\n\r\n\t\t\tcosHalfTheta = - cosHalfTheta;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.copy( qb );\r\n\r\n\t\t}\r\n\r\n\t\tif ( cosHalfTheta >= 1.0 ) {\r\n\r\n\t\t\tthis._w = w;\r\n\t\t\tthis._x = x;\r\n\t\t\tthis._y = y;\r\n\t\t\tthis._z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\r\n\r\n\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\r\n\r\n\t\t\tvar s = 1 - t;\r\n\t\t\tthis._w = s * w + t * this._w;\r\n\t\t\tthis._x = s * x + t * this._x;\r\n\t\t\tthis._y = s * y + t * this._y;\r\n\t\t\tthis._z = s * z + t * this._z;\r\n\r\n\t\t\treturn this.normalize();\r\n\r\n\t\t}\r\n\r\n\t\tvar sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\r\n\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\r\n\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\r\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\r\n\r\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\r\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\r\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\r\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( quaternion ) {\r\n\r\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis._x = array[ offset ];\r\n\t\tthis._y = array[ offset + 1 ];\r\n\t\tthis._z = array[ offset + 2 ];\r\n\t\tthis._w = array[ offset + 3 ];\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this._x;\r\n\t\tarray[ offset + 1 ] = this._y;\r\n\t\tarray[ offset + 2 ] = this._z;\r\n\t\tarray[ offset + 3 ] = this._w;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tonChange: function ( callback ) {\r\n\r\n\t\tthis.onChangeCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tonChangeCallback: function () {}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/math/Vector3.js\n\r\n\r\n\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author kile / http://kile.stravaganza.org/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author egraether / http://egraether.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nfunction Vector3( x, y, z ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\tthis.z = z || 0;\r\n\r\n}\r\n\r\nObject.assign( Vector3.prototype, {\r\n\r\n\tisVector3: true,\r\n\r\n\tset: function ( x, y, z ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetScalar: function ( scalar ) {\r\n\r\n\t\tthis.x = scalar;\r\n\t\tthis.y = scalar;\r\n\t\tthis.z = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetX: function ( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetZ: function ( z ) {\r\n\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponent: function ( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tcase 2: this.z = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetComponent: function ( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tcase 2: return this.z;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.x, this.y, this.z );\r\n\r\n\t},\r\n\r\n\tcopy: function ( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\t\tthis.z = v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\t\tthis.z += v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\t\tthis.z += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\t\tthis.z = a.z + b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScaledVector: function ( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\t\tthis.z += v.z * s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsub: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\t\tthis.z -= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubScalar: function ( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\t\tthis.z -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n    scaleVectors :function(v1,scale){\r\n        return new Vector3(v1.x*scale, v1.y*scale, v1.z*scale );\r\n    },\r\n\r\n\tsubVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\t\tthis.z = a.z - b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\r\n\t\t\treturn this.multiplyVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x *= v.x;\r\n\t\tthis.y *= v.y;\r\n\t\tthis.z *= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\tthis.x *= scalar;\r\n\t\tthis.y *= scalar;\r\n\t\tthis.z *= scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x * b.x;\r\n\t\tthis.y = a.y * b.y;\r\n\t\tthis.z = a.z * b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyEuler: function () {\r\n\r\n\t\tvar quaternion = new Quaternion();\r\n\r\n\t\treturn function applyEuler( euler ) {\r\n\r\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\r\n\r\n\t\t\t\tconsole.error( 'COOL.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tapplyAxisAngle: function () {\r\n\r\n\t\tvar quaternion = new Quaternion();\r\n\r\n\t\treturn function applyAxisAngle( axis, angle ) {\r\n\r\n\t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tapplyMatrix3: function ( m ) {\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\r\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\r\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function ( m ) {\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\tvar e = m.elements;\r\n\r\n\t\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\r\n\r\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\r\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\r\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyQuaternion: function ( q ) {\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\r\n\r\n\t\t// calculate quat * vector\r\n\r\n\t\tvar ix = qw * x + qy * z - qz * y;\r\n\t\tvar iy = qw * y + qz * x - qx * z;\r\n\t\tvar iz = qw * z + qx * y - qy * x;\r\n\t\tvar iw = - qx * x - qy * y - qz * z;\r\n\r\n\t\t// calculate result * inverse quat\r\n\r\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\r\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\r\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tproject: function ( camera ) {\r\n\r\n\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\r\n\r\n\t},\r\n\r\n\tunproject: function () {\r\n\r\n\t\tvar matrix = new Matrix4();\r\n\r\n\t\treturn function unproject( camera ) {\r\n\r\n\t\t\treturn this.applyMatrix4( matrix.getInverse( camera.projectionMatrix ) ).applyMatrix4( camera.matrixWorld );\r\n            // return this.applyMatrix4( matrix.getInverse( camera.VPmatrix ) ); 等价\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttransformDirection: function ( m ) {\r\n\r\n\t\t// input: COOL.Matrix4 affine matrix\r\n\t\t// vector interpreted as a direction\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\r\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\r\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\r\n\r\n\t\treturn this.normalize();\r\n\r\n\t},\r\n\r\n\tdivide: function ( v ) {\r\n\r\n\t\tthis.x /= v.x;\r\n\t\tthis.y /= v.y;\r\n\t\tthis.z /= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivideScalar: function ( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t},\r\n\r\n\tmin: function ( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\t\tthis.z = Math.min( this.z, v.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmax: function ( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\t\tthis.z = Math.max( this.z, v.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclamp: function ( min, max ) {\r\n\r\n\t\t// assumes min < max, componentwise\r\n\r\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclampScalar: function () {\r\n\r\n\t\tvar min = new Vector3();\r\n\t\tvar max = new Vector3();\r\n\r\n\t\treturn function clampScalar( minVal, maxVal ) {\r\n\r\n\t\t\tmin.set( minVal, minVal, minVal );\r\n\t\t\tmax.set( maxVal, maxVal, maxVal );\r\n\r\n\t\t\treturn this.clamp( min, max );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclampLength: function ( min, max ) {\r\n\r\n\t\tvar length = this.length();\r\n\r\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t},\r\n\r\n\tfloor: function () {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\t\tthis.z = Math.floor( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tceil: function () {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\t\tthis.z = Math.ceil( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tround: function () {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\t\tthis.z = Math.round( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\troundToZero: function () {\r\n\r\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function () {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\t\tthis.z = - this.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\r\n\r\n\t},\r\n\r\n\t// TODO lengthSquared?\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\r\n\r\n\t},\r\n\r\n\tmanhattanLength: function () {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t},\r\n\r\n\tsetLength: function ( length ) {\r\n\r\n\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t},\r\n\r\n\tlerp: function ( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t},\r\n\r\n\tcross: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\r\n\t\t\treturn this.crossVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.crossVectors( this, v );\r\n\r\n\t},\r\n\r\n\tcrossVectors: function ( a, b ) {\r\n\r\n\t\tvar ax = a.x, ay = a.y, az = a.z;\r\n\t\tvar bx = b.x, by = b.y, bz = b.z;\r\n\r\n\t\tthis.x = ay * bz - az * by;\r\n\t\tthis.y = az * bx - ax * bz;\r\n\t\tthis.z = ax * by - ay * bx;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tprojectOnVector: function ( vector ) {\r\n\r\n\t\tvar scalar = vector.dot( this ) / vector.lengthSq();\r\n\r\n\t\treturn this.copy( vector ).multiplyScalar( scalar );\r\n\r\n\t},\r\n\r\n\tprojectOnPlane: function () {\r\n\r\n\t\tvar v1 = new Vector3();\r\n\r\n\t\treturn function projectOnPlane( planeNormal ) {\r\n\r\n\t\t\tv1.copy( this ).projectOnVector( planeNormal );\r\n\r\n\t\t\treturn this.sub( v1 );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\treflect: function () {\r\n\r\n\t\t// reflect incident vector off plane orthogonal to normal\r\n\t\t// normal is assumed to have unit length\r\n\r\n\t\tvar v1 = new Vector3();\r\n\r\n\t\treturn function reflect( normal ) {\r\n\r\n\t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tangleTo: function ( v ) {\r\n\r\n\t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\r\n\r\n\t\t// clamp, to handle numerical problems\r\n\r\n\t\treturn Math.acos( _Math.clamp( theta, - 1, 1 ) );\r\n\r\n\t},\r\n\r\n\tdistanceTo: function ( v ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t},\r\n\r\n\tdistanceToSquared: function ( v ) {\r\n\r\n\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\r\n\r\n\t\treturn dx * dx + dy * dy + dz * dz;\r\n\r\n\t},\r\n\r\n\tmanhattanDistanceTo: function ( v ) {\r\n\r\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\r\n\r\n\t},\r\n\r\n\tsetFromSpherical: function ( s ) {\r\n\r\n\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\r\n\r\n\t},\r\n\r\n\tsetFromSphericalCoords: function ( radius, phi, theta ) {\r\n\r\n\t\tvar sinPhiRadius = Math.sin( phi ) * radius;\r\n\r\n\t\tthis.x = sinPhiRadius * Math.sin( theta );\r\n\t\tthis.y = Math.cos( phi ) * radius;\r\n\t\tthis.z = sinPhiRadius * Math.cos( theta );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromCylindrical: function ( c ) {\r\n\r\n\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\r\n\r\n\t},\r\n\r\n\tsetFromCylindricalCoords: function ( radius, theta, y ) {\r\n\r\n\t\tthis.x = radius * Math.sin( theta );\r\n\t\tthis.y = y;\r\n\t\tthis.z = radius * Math.cos( theta );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromMatrixPosition: function ( m ) {\r\n\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[ 12 ];\r\n\t\tthis.y = e[ 13 ];\r\n\t\tthis.z = e[ 14 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromMatrixScale: function ( m ) {\r\n\r\n\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\r\n\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\r\n\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\tthis.x = sx;\r\n\t\tthis.y = sy;\r\n\t\tthis.z = sz;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromMatrixColumn: function ( m, index ) {\r\n\r\n\t\treturn this.fromArray( m.elements, index * 4 );\r\n\r\n\t},\r\n\r\n\tequals: function ( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\r\n\r\n\t},\r\n\r\n    rotateByVector :function(vec1, vec2, angle) {\r\n        var v1 = vec1.toArray();\r\n        var v2 = vec2.toArray();\r\n        angle = - angle;\r\n        var pos = [];\r\n        pos[0] = v1[0] * Math.cos(angle) + (v2[1] * v1[2] - v2[2] * v1[1]) * Math.sin(angle) + v2[0] * (v2[0] * v1[0] + v2[1] * v1[1] + v2[2] * v1[2]) * (1 - Math.cos(angle));\r\n        pos[1] = v1[1] * Math.cos(angle) + (v2[2] * v1[0] - v2[0] * v1[2]) * Math.sin(angle) + v2[1] * (v2[0] * v1[0] + v2[1] * v1[1] + v2[2] * v1[2]) * (1 - Math.cos(angle));\r\n        pos[2] = v1[2] * Math.cos(angle) + (v2[0] * v1[1] - v2[1] * v1[0]) * Math.sin(angle) + v2[2] * (v2[0] * v1[0] + v2[1] * v1[1] + v2[2] * v1[2]) * (1 - Math.cos(angle));\r\n        return new Vector3().fromArray(pos);\r\n    },\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\t\tthis.z = array[ offset + 2 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\t\tarray[ offset + 2 ] = this.z;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tfromBufferAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\tif ( offset !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Vector3: offset has been removed from .fromBufferAttribute().' );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x = attribute.getX( index );\r\n\t\tthis.y = attribute.getY( index );\r\n\t\tthis.z = attribute.getZ( index );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/math/Box3.js\n\r\n\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nfunction Box3( min, max ) {\r\n\r\n\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\r\n\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\r\n\r\n}\r\n\r\nObject.assign( Box3.prototype, {\r\n\r\n\tisBox3: true,\r\n\r\n\tset: function ( min, max ) {\r\n\r\n\t\tthis.min.copy( min );\r\n\t\tthis.max.copy( max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromArray: function ( array ) {\r\n\r\n\t\tvar minX = + Infinity;\r\n\t\tvar minY = + Infinity;\r\n\t\tvar minZ = + Infinity;\r\n\r\n\t\tvar maxX = - Infinity;\r\n\t\tvar maxY = - Infinity;\r\n\t\tvar maxZ = - Infinity;\r\n\r\n\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\r\n\r\n\t\t\tvar x = array[ i ];\r\n\t\t\tvar y = array[ i + 1 ];\r\n\t\t\tvar z = array[ i + 2 ];\r\n\r\n\t\t\tif ( x < minX ) minX = x;\r\n\t\t\tif ( y < minY ) minY = y;\r\n\t\t\tif ( z < minZ ) minZ = z;\r\n\r\n\t\t\tif ( x > maxX ) maxX = x;\r\n\t\t\tif ( y > maxY ) maxY = y;\r\n\t\t\tif ( z > maxZ ) maxZ = z;\r\n\r\n\t\t}\r\n\r\n\t\tthis.min.set( minX, minY, minZ );\r\n\t\tthis.max.set( maxX, maxY, maxZ );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromBufferAttribute: function ( attribute ) {\r\n\r\n\t\tvar minX = + Infinity;\r\n\t\tvar minY = + Infinity;\r\n\t\tvar minZ = + Infinity;\r\n\r\n\t\tvar maxX = - Infinity;\r\n\t\tvar maxY = - Infinity;\r\n\t\tvar maxZ = - Infinity;\r\n\r\n\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\r\n\r\n\t\t\tvar x = attribute.getX( i );\r\n\t\t\tvar y = attribute.getY( i );\r\n\t\t\tvar z = attribute.getZ( i );\r\n\r\n\t\t\tif ( x < minX ) minX = x;\r\n\t\t\tif ( y < minY ) minY = y;\r\n\t\t\tif ( z < minZ ) minZ = z;\r\n\r\n\t\t\tif ( x > maxX ) maxX = x;\r\n\t\t\tif ( y > maxY ) maxY = y;\r\n\t\t\tif ( z > maxZ ) maxZ = z;\r\n\r\n\t\t}\r\n\r\n\t\tthis.min.set( minX, minY, minZ );\r\n\t\tthis.max.set( maxX, maxY, maxZ );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromPoints: function ( points ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.expandByPoint( points[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromCenterAndSize: function () {\r\n\r\n\t\tvar v1 = new Vector3();\r\n\r\n\t\treturn function setFromCenterAndSize( center, size ) {\r\n\r\n\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\r\n\r\n\t\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tsetFromObject: function ( object ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\treturn this.expandByObject( object );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( box ) {\r\n\r\n\t\tthis.min.copy( box.min );\r\n\t\tthis.max.copy( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeEmpty: function () {\r\n\r\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\r\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tisEmpty: function () {\r\n\r\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\r\n\r\n\t},\r\n\r\n\tgetCenter: function ( target ) {\r\n\r\n\t\tif ( target === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Box3: .getCenter() target is now required' );\r\n\t\t\ttarget = new Vector3();\r\n\r\n\t\t}\r\n\r\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t},\r\n\r\n\tgetSize: function ( target ) {\r\n\r\n\t\tif ( target === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Box3: .getSize() target is now required' );\r\n\t\t\ttarget = new Vector3();\r\n\r\n\t\t}\r\n\r\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\r\n\r\n\t},\r\n\r\n\texpandByPoint: function ( point ) {\r\n\r\n\t\tthis.min.min( point );\r\n\t\tthis.max.max( point );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\texpandByVector: function ( vector ) {\r\n\r\n\t\tthis.min.sub( vector );\r\n\t\tthis.max.add( vector );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\texpandByScalar: function ( scalar ) {\r\n\r\n\t\tthis.min.addScalar( - scalar );\r\n\t\tthis.max.addScalar( scalar );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\texpandByObject: function () {\r\n\r\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\r\n\t\t// accounting for both the object's, and children's, world transforms\r\n\r\n\t\tvar scope, i, l;\r\n\r\n\t\tvar v1 = new Vector3();\r\n\r\n\t\tfunction traverse( node ) {\r\n\r\n\t\t\tvar geometry = node.geometry;\r\n\r\n\t\t\tif ( geometry !== undefined ) {\r\n\r\n\t\t\t\tif ( geometry.isGeometry ) {\r\n\r\n\t\t\t\t\tvar vertices = geometry.vertices;\r\n\r\n\t\t\t\t\tfor ( i = 0, l = vertices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\tv1.copy( vertices[ i ] );\r\n\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\r\n\r\n\t\t\t\t\t\tscope.expandByPoint( v1 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\t\tvar attribute = geometry.attributes.position;\r\n\r\n\t\t\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0, l = attribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tv1.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );\r\n\r\n\t\t\t\t\t\t\tscope.expandByPoint( v1 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn function expandByObject( object ) {\r\n\r\n\t\t\tscope = this;\r\n\r\n\t\t\tobject.updateMatrixWorld( true );\r\n\r\n\t\t\tobject.traverse( traverse );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\r\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\r\n\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\r\n\r\n\t},\r\n\r\n\tcontainsBox: function ( box ) {\r\n\r\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\r\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\r\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\r\n\r\n\t},\r\n\r\n\tgetParameter: function ( point, target ) {\r\n\r\n\t\t// This can potentially have a divide by zero if the box\r\n\t\t// has a size dimension of 0.\r\n\r\n\t\tif ( target === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Box3: .getParameter() target is now required' );\r\n\t\t\ttarget = new Vector3();\r\n\r\n\t\t}\r\n\r\n\t\treturn target.set(\r\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\r\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\r\n\t\t);\r\n\r\n\t},\r\n\r\n\tintersectsBox: function ( box ) {\r\n\r\n\t\t// using 6 splitting planes to rule out intersections.\r\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\r\n\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\r\n\r\n\t},\r\n\r\n\tintersectsSphere: ( function () {\r\n\r\n\t\tvar closestPoint = new Vector3();\r\n\r\n\t\treturn function intersectsSphere( sphere ) {\r\n\r\n\t\t\t// Find the point on the AABB closest to the sphere center.\r\n\t\t\tthis.clampPoint( sphere.center, closestPoint );\r\n\r\n\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\r\n\t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\r\n\r\n\t\t};\r\n\r\n\t} )(),\r\n\r\n\tintersectsPlane: function ( plane ) {\r\n\r\n\t\t// We compute the minimum and maximum dot product values. If those values\r\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\r\n\r\n\t\tvar min, max;\r\n\r\n\t\tif ( plane.normal.x > 0 ) {\r\n\r\n\t\t\tmin = plane.normal.x * this.min.x;\r\n\t\t\tmax = plane.normal.x * this.max.x;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmin = plane.normal.x * this.max.x;\r\n\t\t\tmax = plane.normal.x * this.min.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( plane.normal.y > 0 ) {\r\n\r\n\t\t\tmin += plane.normal.y * this.min.y;\r\n\t\t\tmax += plane.normal.y * this.max.y;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmin += plane.normal.y * this.max.y;\r\n\t\t\tmax += plane.normal.y * this.min.y;\r\n\r\n\t\t}\r\n\r\n\t\tif ( plane.normal.z > 0 ) {\r\n\r\n\t\t\tmin += plane.normal.z * this.min.z;\r\n\t\t\tmax += plane.normal.z * this.max.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmin += plane.normal.z * this.max.z;\r\n\t\t\tmax += plane.normal.z * this.min.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn ( min <= - plane.constant && max >= - plane.constant );\r\n\r\n\t},\r\n\r\n\tintersectsTriangle: ( function () {\r\n\r\n\t\t// triangle centered vertices\r\n\t\tvar v0 = new Vector3();\r\n\t\tvar v1 = new Vector3();\r\n\t\tvar v2 = new Vector3();\r\n\r\n\t\t// triangle edge vectors\r\n\t\tvar f0 = new Vector3();\r\n\t\tvar f1 = new Vector3();\r\n\t\tvar f2 = new Vector3();\r\n\r\n\t\tvar testAxis = new Vector3();\r\n\r\n\t\tvar center = new Vector3();\r\n\t\tvar extents = new Vector3();\r\n\r\n\t\tvar triangleNormal = new Vector3();\r\n\r\n\t\tfunction satForAxes( axes ) {\r\n\r\n\t\t\tvar i, j;\r\n\r\n\t\t\tfor ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {\r\n\r\n\t\t\t\ttestAxis.fromArray( axes, i );\r\n\t\t\t\t// project the aabb onto the seperating axis\r\n\t\t\t\tvar r = extents.x * Math.abs( testAxis.x ) + extents.y * Math.abs( testAxis.y ) + extents.z * Math.abs( testAxis.z );\r\n\t\t\t\t// project all 3 vertices of the triangle onto the seperating axis\r\n\t\t\t\tvar p0 = v0.dot( testAxis );\r\n\t\t\t\tvar p1 = v1.dot( testAxis );\r\n\t\t\t\tvar p2 = v2.dot( testAxis );\r\n\t\t\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\r\n\t\t\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\r\n\r\n\t\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\r\n\t\t\t\t\t// the axis is seperating and we can exit\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn function intersectsTriangle( triangle ) {\r\n\r\n\t\t\tif ( this.isEmpty() ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// compute box center and extents\r\n\t\t\tthis.getCenter( center );\r\n\t\t\textents.subVectors( this.max, center );\r\n\r\n\t\t\t// translate triangle to aabb origin\r\n\t\t\tv0.subVectors( triangle.a, center );\r\n\t\t\tv1.subVectors( triangle.b, center );\r\n\t\t\tv2.subVectors( triangle.c, center );\r\n\r\n\t\t\t// compute edge vectors for triangle\r\n\t\t\tf0.subVectors( v1, v0 );\r\n\t\t\tf1.subVectors( v2, v1 );\r\n\t\t\tf2.subVectors( v0, v2 );\r\n\r\n\t\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\r\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\r\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\r\n\t\t\tvar axes = [\r\n\t\t\t\t0, - f0.z, f0.y, 0, - f1.z, f1.y, 0, - f2.z, f2.y,\r\n\t\t\t\tf0.z, 0, - f0.x, f1.z, 0, - f1.x, f2.z, 0, - f2.x,\r\n\t\t\t\t- f0.y, f0.x, 0, - f1.y, f1.x, 0, - f2.y, f2.x, 0\r\n\t\t\t];\r\n\t\t\tif ( ! satForAxes( axes ) ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// test 3 face normals from the aabb\r\n\t\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\r\n\t\t\tif ( ! satForAxes( axes ) ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// finally testing the face normal of the triangle\r\n\t\t\t// use already existing triangle edge vectors here\r\n\t\t\ttriangleNormal.crossVectors( f0, f1 );\r\n\t\t\taxes = [ triangleNormal.x, triangleNormal.y, triangleNormal.z ];\r\n\t\t\treturn satForAxes( axes );\r\n\r\n\t\t};\r\n\r\n\t} )(),\r\n\r\n\tclampPoint: function ( point, target ) {\r\n\r\n\t\tif ( target === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Box3: .clampPoint() target is now required' );\r\n\t\t\ttarget = new Vector3();\r\n\r\n\t\t}\r\n\r\n\t\treturn target.copy( point ).clamp( this.min, this.max );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function () {\r\n\r\n\t\tvar v1 = new Vector3();\r\n\r\n\t\treturn function distanceToPoint( point ) {\r\n\r\n\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\r\n\t\t\treturn clampedPoint.sub( point ).length();\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tgetBoundingSphere: function () {\r\n\r\n\t\tvar v1 = new Vector3();\r\n\r\n\t\treturn function getBoundingSphere( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'COOL.Box3: .getBoundingSphere() target is now required' );\r\n\t\t\t\ttarget = new Sphere();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.getCenter( target.center );\r\n\r\n\t\t\ttarget.radius = this.getSize( v1 ).length() * 0.5;\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tintersect: function ( box ) {\r\n\r\n\t\tthis.min.max( box.min );\r\n\t\tthis.max.min( box.max );\r\n\r\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\r\n\t\tif ( this.isEmpty() ) this.makeEmpty();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tunion: function ( box ) {\r\n\r\n\t\tthis.min.min( box.min );\r\n\t\tthis.max.max( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function () {\r\n\r\n\t\tvar points = [\r\n\t\t\tnew Vector3(),\r\n\t\t\tnew Vector3(),\r\n\t\t\tnew Vector3(),\r\n\t\t\tnew Vector3(),\r\n\t\t\tnew Vector3(),\r\n\t\t\tnew Vector3(),\r\n\t\t\tnew Vector3(),\r\n\t\t\tnew Vector3()\r\n\t\t];\r\n\r\n\t\treturn function applyMatrix4( matrix ) {\r\n\r\n\t\t\t// transform of empty box is an empty box.\r\n\t\t\tif ( this.isEmpty() ) return this;\r\n\r\n\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\r\n\t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\r\n\t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\r\n\t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\r\n\t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\r\n\t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\r\n\t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\r\n\t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\r\n\t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\r\n\r\n\t\t\tthis.setFromPoints( points );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.min.add( offset );\r\n\t\tthis.max.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( box ) {\r\n\r\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/math/Sphere.js\n\r\n\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nfunction Sphere( center, radius ) {\r\n\r\n\tthis.center = ( center !== undefined ) ? center : new Vector3();\r\n\tthis.radius = ( radius !== undefined ) ? radius : 0;\r\n\r\n}\r\n\r\nObject.assign( Sphere.prototype, {\r\n\r\n\tset: function ( center, radius ) {\r\n\r\n\t\tthis.center.copy( center );\r\n\t\tthis.radius = radius;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromPoints: function () {\r\n\r\n\t\tvar box = new Box3();\r\n\r\n\t\treturn function setFromPoints( points, optionalCenter ) {\r\n\r\n\t\t\tvar center = this.center;\r\n\r\n\t\t\tif ( optionalCenter !== undefined ) {\r\n\r\n\t\t\t\tcenter.copy( optionalCenter );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tbox.setFromPoints( points ).getCenter( center );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar maxRadiusSq = 0;\r\n\r\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( sphere ) {\r\n\r\n\t\tthis.center.copy( sphere.center );\r\n\t\tthis.radius = sphere.radius;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tempty: function () {\r\n\r\n\t\treturn ( this.radius <= 0 );\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\r\n\r\n\t},\r\n\r\n\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\tvar radiusSum = this.radius + sphere.radius;\r\n\r\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\r\n\r\n\t},\r\n\r\n\tintersectsBox: function ( box ) {\r\n\r\n\t\treturn box.intersectsSphere( this );\r\n\r\n\t},\r\n\r\n\tintersectsPlane: function ( plane ) {\r\n\r\n\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\r\n\r\n\t},\r\n\r\n\tclampPoint: function ( point, target ) {\r\n\r\n\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\r\n\r\n\t\tif ( target === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Sphere: .clampPoint() target is now required' );\r\n\t\t\ttarget = new Vector3();\r\n\r\n\t\t}\r\n\r\n\t\ttarget.copy( point );\r\n\r\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\r\n\r\n\t\t\ttarget.sub( this.center ).normalize();\r\n\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\r\n\r\n\t\t}\r\n\r\n\t\treturn target;\r\n\r\n\t},\r\n\r\n\tgetBoundingBox: function ( target ) {\r\n\r\n\t\tif ( target === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Sphere: .getBoundingBox() target is now required' );\r\n\t\t\ttarget = new Box3();\r\n\r\n\t\t}\r\n\r\n\t\ttarget.set( this.center, this.center );\r\n\t\ttarget.expandByScalar( this.radius );\r\n\r\n\t\treturn target;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function ( matrix ) {\r\n\r\n\t\tthis.center.applyMatrix4( matrix );\r\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.center.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( sphere ) {\r\n\r\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/core/Geometry.js\n\r\n\r\n\r\n\r\nclass Geometry_Geometry {\r\n    constructor(param) {\r\n        param = param || {};\r\n\r\n        // Create a cube\r\n        //    v6----- v5\r\n        //   /|      /|\r\n        //  v1------v0|\r\n        //  | |     | |\r\n        //  | |v7---|-|v4\r\n        //  |/      |/\r\n        //  v2------v3\r\n\r\n        this.uv = param.uv || new Float32Array([   // Vertex coordinates\r\n\r\n            1,1, 0,1, 0,0, 1,0,  // v0-v1-v2-v3 front\r\n            0,1, 0,0, 1,0, 1,1,  // v0-v3-v4-v5 right\r\n            1,0, 1,1, 0,1, 0,0,  // v0-v5-v6-v1 up\r\n            1,1, 0,1, 0,0, 1,0,  // v1-v6-v7-v2 left\r\n            0,1, 1,1, 1,0, 0,0,  // v7-v4-v3-v2 down\r\n            1,0, 0,0, 0,1, 1,1   // v4-v7-v6-v5 back\r\n\r\n        ]);\r\n\r\n        this.vertices = param.vertices || new Float32Array([   // Vertex coordinates\r\n            0.5, 0.5, 0.5,  -0.5, 0.5, 0.5,  -0.5,-0.5, 0.5,   0.5,-0.5, 0.5,  // v0-v1-v2-v3 front\r\n            0.5, 0.5, 0.5,   0.5,-0.5, 0.5,   0.5,-0.5,-0.5,   0.5, 0.5,-0.5,  // v0-v3-v4-v5 right\r\n            0.5, 0.5, 0.5,   0.5, 0.5,-0.5,  -0.5, 0.5,-0.5,  -0.5, 0.5, 0.5,  // v0-v5-v6-v1 up\r\n            -0.5, 0.5, 0.5,  -0.5, 0.5,-0.5,  -0.5,-0.5,-0.5,  -0.5,-0.5, 0.5,  // v1-v6-v7-v2 left\r\n            -0.5,-0.5,-0.5,   0.5,-0.5,-0.5,   0.5,-0.5, 0.5,  -0.5,-0.5, 0.5,  // v7-v4-v3-v2 down\r\n            0.5,-0.5,-0.5,  -0.5,-0.5,-0.5,  -0.5, 0.5,-0.5,   0.5, 0.5,-0.5   // v4-v7-v6-v5 back\r\n        ]);\r\n\r\n        this.normal = param.normal || this.vertices;\r\n\r\n        if(param.indices){\r\n            this.indices = new Uint16Array(param.indices);\r\n        }else{\r\n            var indicesArray = [];\r\n            for(var i=0; i<param.vertices.length/3; i++){\r\n                indicesArray.push(i);\r\n            }\r\n            this.indices = new Uint16Array(indicesArray);\r\n        }\r\n\r\n\r\n        this.morphAttributes = param.morphAttributes;\r\n\r\n        this.boundingSphere = new Sphere();\r\n        this.boundingBox = new Box3();\r\n        this.computeBoundingBox();\r\n\r\n        // this.updateNormal();\r\n\r\n        this.updataBuffer();\r\n\r\n    }\r\n\r\n    updataBuffer(){\r\n        var buffer = [];\r\n        var uv = this.uv;\r\n        var vertices = this.vertices;\r\n        var normal = this.normal;\r\n        for(var i=0; i<vertices.length; i+=3){\r\n            buffer.push(vertices[i+0]);\r\n            buffer.push(vertices[i+1]);\r\n            buffer.push(vertices[i+2]);\r\n\r\n            buffer.push(normal[i+0]);\r\n            buffer.push(normal[i+1]);\r\n            buffer.push(normal[i+2]);\r\n\r\n            buffer.push(uv[i/3*2+0]);\r\n            buffer.push(uv[i/3*2+1]);\r\n        }\r\n\r\n        this.buffer = new Float32Array(buffer);\r\n    }\r\n\r\n    updateNormal(){\r\n        var normal = [];\r\n        var vertices = this.vertices;\r\n        for(var i=0; i<vertices.length; i+=3*4){\r\n            var line1 = new Vector3().subVectors(\r\n                new Vector3(vertices[i+0], vertices[i+1], vertices[i+2]),\r\n                new Vector3(vertices[i+3], vertices[i+4], vertices[i+5])\r\n            );\r\n            var line2 = new Vector3().subVectors(\r\n                new Vector3(vertices[i+3], vertices[i+4], vertices[i+5]),\r\n                new Vector3(vertices[i+6], vertices[i+7], vertices[i+8]),\r\n            );\r\n            var cur_normal = new Vector3().crossVectors(\r\n                line1,\r\n                line2\r\n            ).toArray();\r\n            for(var j=0 ;j<4; j++){\r\n                normal.push(cur_normal[0], cur_normal[1], cur_normal[2]);\r\n            }\r\n        }\r\n        this.normal = new Float32Array(normal);\r\n\r\n    }\r\n\r\n    computeBoundingBox () {\r\n        var verticesV3 = [];\r\n        for(var i=0; i<this.vertices.length; i+=3){\r\n            verticesV3.push(new Vector3(this.vertices[i], this.vertices[i+1], this.vertices[i+2]))\r\n        }\r\n        this.boundingBox.setFromPoints(verticesV3);\r\n    }\r\n\r\n    clone(){\r\n        var geometry = new Geometry_Geometry({\r\n            vertices: this.vertices.slice(0),\r\n            indices: this.indices.slice(0)\r\n        });\r\n\r\n        return geometry;\r\n    }\r\n}\r\n\r\n/* harmony default export */ var core_Geometry = (Geometry_Geometry);\r\n\n// CONCATENATED MODULE: ./src/core/BoxGeometry.js\n\r\n\r\n\r\n\r\nclass BoxGeometry_BoxGeometry {\r\n    constructor(param) {\r\n        param = param || {};\r\n\r\n        this.uv = param.uv || new Float32Array([   // Vertex coordinates\r\n\r\n            1,1, 0,1, 0,0, 1,0,  // v0-v1-v2-v3 front\r\n            0,1, 0,0, 1,0, 1,1,  // v0-v3-v4-v5 right\r\n            1,0, 1,1, 0,1, 0,0,  // v0-v5-v6-v1 up\r\n            1,1, 0,1, 0,0, 1,0,  // v1-v6-v7-v2 left\r\n            0,1, 1,1, 1,0, 0,0,  // v7-v4-v3-v2 down\r\n            1,0, 0,0, 0,1, 1,1   // v4-v7-v6-v5 back\r\n\r\n        ]);\r\n\r\n        this.vertices = param.indices || new Float32Array([   // Vertex coordinates\r\n            0.5, 0.5, 0.5,  -0.5, 0.5, 0.5,  -0.5,-0.5, 0.5,   0.5,-0.5, 0.5,  // v0-v1-v2-v3 front\r\n            0.5, 0.5, 0.5,   0.5,-0.5, 0.5,   0.5,-0.5,-0.5,   0.5, 0.5,-0.5,  // v0-v3-v4-v5 right\r\n            0.5, 0.5, 0.5,   0.5, 0.5,-0.5,  -0.5, 0.5,-0.5,  -0.5, 0.5, 0.5,  // v0-v5-v6-v1 up\r\n            -0.5, 0.5, 0.5,  -0.5, 0.5,-0.5,  -0.5,-0.5,-0.5,  -0.5,-0.5, 0.5,  // v1-v6-v7-v2 left\r\n            -0.5,-0.5,-0.5,   0.5,-0.5,-0.5,   0.5,-0.5, 0.5,  -0.5,-0.5, 0.5,  // v7-v4-v3-v2 down\r\n            0.5,-0.5,-0.5,  -0.5,-0.5,-0.5,  -0.5, 0.5,-0.5,   0.5, 0.5,-0.5   // v4-v7-v6-v5 back\r\n        ]);\r\n\r\n        this.normal = param.normal || this.vertices;\r\n\r\n        this.indices = param.indices || new Uint16Array([       // Indices of the vertices\r\n            0, 1, 2,   0, 2, 3,    // front\r\n            4, 5, 6,   4, 6, 7,    // right\r\n            8, 9,10,   8,10,11,    // up\r\n            12,13,14,  12,14,15,    // left\r\n            16,17,18,  16,18,19,    // down\r\n            20,21,22,  20,22,23     // back\r\n        ]);\r\n\r\n        this.boundingSphere = new Sphere();\r\n        this.boundingBox = new Box3();\r\n        this.computeBoundingBox();\r\n        // this.computeBoundingSphere();\r\n\r\n        this.updateNormal();\r\n\r\n        this.updataBuffer();\r\n\r\n    }\r\n\r\n    updataBuffer(){\r\n        var buffer = [];\r\n        var uv = this.uv;\r\n        var vertices = this.vertices;\r\n        var normal = this.normal;\r\n        for(var i=0; i<vertices.length; i+=3){\r\n            buffer.push(vertices[i+0]);\r\n            buffer.push(vertices[i+1]);\r\n            buffer.push(vertices[i+2]);\r\n\r\n            buffer.push(normal[i+0]);\r\n            buffer.push(normal[i+1]);\r\n            buffer.push(normal[i+2]);\r\n\r\n            buffer.push(uv[i/3*2+0]);\r\n            buffer.push(uv[i/3*2+1]);\r\n        }\r\n\r\n        this.buffer = new Float32Array(buffer);\r\n    }\r\n\r\n    updateNormal(){\r\n        var normal = [];\r\n        var vertices = this.vertices;\r\n        for(var i=0; i<vertices.length; i+=3*4){\r\n            var line1 = new Vector3().subVectors(\r\n                new Vector3(vertices[i+0], vertices[i+1], vertices[i+2]),\r\n                new Vector3(vertices[i+3], vertices[i+4], vertices[i+5])\r\n            );\r\n            var line2 = new Vector3().subVectors(\r\n                new Vector3(vertices[i+3], vertices[i+4], vertices[i+5]),\r\n                new Vector3(vertices[i+6], vertices[i+7], vertices[i+8]),\r\n            );\r\n            var cur_normal = new Vector3().crossVectors(\r\n                line1,\r\n                line2\r\n            ).toArray();\r\n            for(var j=0 ;j<4; j++){\r\n                normal.push(cur_normal[0], cur_normal[1], cur_normal[2]);\r\n            }\r\n        }\r\n        this.normal = new Float32Array(normal);\r\n\r\n    }\r\n\r\n    computeBoundingSphere(){\r\n\r\n        // if ( this.boundingSphere === null ) {\r\n        //     this.boundingSphere = new Sphere();\r\n        // }\r\n        // this.boundingSphere.setFromPoints( this.vertices );\r\n    }\r\n\r\n    computeBoundingBox () {\r\n        var verticesV3 = [];\r\n        for(var i=0; i<this.vertices.length; i+=3){\r\n            verticesV3.push(new Vector3(this.vertices[i], this.vertices[i+1], this.vertices[i+2]))\r\n        }\r\n        this.boundingBox.setFromPoints(verticesV3);\r\n    }\r\n\r\n    clone(){\r\n        var geometry = new BoxGeometry_BoxGeometry({\r\n            vertices: this.vertices.slice(0),\r\n            indices: this.indices.slice(0)\r\n        });\r\n\r\n        return geometry;\r\n    }\r\n}\r\n\r\n/* harmony default export */ var core_BoxGeometry = (BoxGeometry_BoxGeometry);\r\n\n// CONCATENATED MODULE: ./src/material/Material.js\n\r\nclass Material {\r\n    constructor(param) {\r\n        param = param || {};\r\n        this.type = 'Material';\r\n        this.map = param.map;\r\n        this.envMap = param.envMap;\r\n        this.color = param.color || [1,1,1,1];\r\n        this.opacity = this.color[3];\r\n        if(this.color[3] && this.color[3]<1){\r\n            this.transparent = true;\r\n        }else {\r\n            this.transparent = false;\r\n        }\r\n\r\n        this.wireframe = param.wireframe == undefined ? false : param.wireframe;\r\n\r\n        var VSHADER_SOURCE =\r\n\r\n            'precision highp int;\\n' +\r\n            'precision highp float;\\n' +\r\n            'attribute vec4 a_Position;\\n' +\r\n            'uniform mat4 u_MvMatrix;\\n' +\r\n            'uniform mat4 u_PMatrix;\\n' +\r\n\r\n            '#ifdef USE_Shadow\\n' +\r\n            'uniform mat4 u_PMatrixFromLight;\\n' +\r\n            'varying vec4 v_PositionFromLight;\\n' +\r\n            '#endif\\n' +\r\n\r\n            'attribute vec2 a_TexCoord;\\n' +\r\n            'varying vec2 v_TexCoord;\\n' +\r\n            'attribute vec3 a_Normal;\\n' +\r\n            'varying vec3 v_Normal;\\n' +\r\n\r\n            '#ifdef USE_SColor\\n' +\r\n            'varying vec3 v_PositionV3;\\n' +\r\n            '#else\\n' +\r\n            '   #ifdef USE_envMap\\n' +\r\n            '   varying vec3 v_PositionV3;\\n' +\r\n            '   #endif\\n' +\r\n            '#endif\\n' +\r\n\r\n            'void main() {\\n' +\r\n            '  vec4 positionV4 = u_PMatrix * u_MvMatrix * a_Position;\\n' +\r\n            '  gl_Position = positionV4;\\n' +\r\n            '  v_TexCoord = a_TexCoord;\\n' +\r\n            '  v_Normal = mat3(u_MvMatrix) * a_Normal;\\n' +\r\n            // '  v_Normal = (u_MvMatrix * vec4(a_Normal, 0.0)).xyz;\\n' +\r\n            // '  v_Normal = a_Normal;\\n' +\r\n\r\n            '#ifdef USE_Shadow\\n' +\r\n            '  v_PositionFromLight = u_PMatrixFromLight * u_MvMatrix * a_Position;\\n' +\r\n            '#endif\\n' +\r\n\r\n            '#ifdef USE_SColor\\n' +\r\n            '  vec4 positionV4Rel = u_MvMatrix * a_Position;\\n' +\r\n            '  v_PositionV3 = positionV4Rel.xyz / positionV4Rel.w;\\n' +\r\n            '#else\\n' +\r\n            '   #ifdef USE_envMap\\n' +\r\n            '   vec4 positionV4Rel = u_MvMatrix * a_Position;\\n' +\r\n            '   v_PositionV3 = positionV4Rel.xyz / positionV4Rel.w;\\n' +\r\n            '   #endif\\n' +\r\n            '#endif\\n' +\r\n\r\n            '}\\n';\r\n\r\n        var FSHADER_SOURCE =\r\n            'precision highp int;\\n' +\r\n            'precision highp float;\\n' +\r\n            'uniform vec4 u_Color;\\n' +\r\n            'varying vec2 v_TexCoord;\\n' +\r\n            'varying vec3 v_Normal;\\n' +\r\n\r\n            '#ifdef USE_Map\\n' +\r\n            'uniform sampler2D u_Sampler;\\n' +\r\n            '#endif\\n' +\r\n\r\n            '#ifdef USE_envMap\\n' +\r\n            'uniform samplerCube u_envMap;\\n' +\r\n            '#endif\\n' +\r\n\r\n            '#ifdef USE_AmbientLight\\n' +\r\n            'uniform vec3 u_AmbientLight_Color;\\n' +\r\n            '#endif\\n' +\r\n\r\n            '#ifdef USE_DirectionalLight\\n' +\r\n            'uniform vec3 u_DirectionalLight_Direction;\\n' +\r\n            'uniform vec3 u_DirectionalLight_Color;\\n' +\r\n            '#endif\\n' +\r\n\r\n            '#ifdef USE_SColor\\n' +\r\n            'uniform vec3 u_Camera_Position;\\n' +\r\n            'varying vec3 v_PositionV3;\\n' +\r\n            '#else\\n' +\r\n            '   #ifdef USE_envMap\\n' +\r\n            '   uniform vec3 u_Camera_Position;\\n' +\r\n            '   varying vec3 v_PositionV3;\\n' +\r\n            '   #endif\\n' +\r\n            '#endif\\n' +\r\n\r\n            '#ifdef USE_Shadow\\n' +\r\n            'uniform sampler2D u_ShadowMap;\\n' +\r\n            'varying vec4 v_PositionFromLight;\\n' +\r\n\r\n            'float unpackDepth(const in vec4 rgbaDepth) {\\n' +\r\n            '  const vec4 bitShift = vec4(1.0, 1.0/256.0, 1.0/(256.0*256.0), 1.0/(256.0*256.0*256.0));\\n' +\r\n            '  float depth = dot(rgbaDepth, bitShift);\\n' + // Use dot() since the calculations is same\r\n            '  return depth;\\n' +\r\n            '}\\n' +\r\n\r\n            '#endif\\n' +\r\n\r\n            'void main() {\\n' +\r\n            '  vec4 color = u_Color;\\n' +\r\n            '  vec3 v_Normal0 = normalize(v_Normal);\\n' +\r\n\r\n            '#ifdef USE_Map\\n' +\r\n            '  color = texture2D(u_Sampler, v_TexCoord);\\n' +\r\n            '#endif\\n' +\r\n\r\n            '  vec3 colorV3 = color.rgb;\\n' +\r\n            '  float useLight = 0.0;\\n' +\r\n            '  vec3 finalColorV3 = colorV3.rgb;\\n' +\r\n\r\n            '#ifdef USE_AmbientLight\\n' +\r\n            '  vec3 A_color = colorV3 * u_AmbientLight_Color * 0.1;\\n' +\r\n            '  finalColorV3 = A_color;\\n' +\r\n            '  useLight = 1.0;\\n' +\r\n            '#endif\\n' +\r\n\r\n            '  float D_color_factor = 0.9;\\n' +\r\n            '#ifdef USE_SColor\\n' +\r\n            '  D_color_factor = 0.0;\\n' +\r\n            '#endif\\n' +\r\n\r\n            '#ifdef USE_DirectionalLight\\n' +\r\n            '  float D_weight = max(dot(u_DirectionalLight_Direction, v_Normal0), 0.0);\\n' +\r\n            '  vec3 D_color = colorV3 * u_DirectionalLight_Color * D_weight * D_color_factor;\\n' +\r\n\r\n            '  if(useLight>0.5){\\n' +\r\n            '    finalColorV3 = finalColorV3 + D_color;\\n' +\r\n            '  }else{\\n' +\r\n            '    finalColorV3 = D_color;\\n' +\r\n            '  }\\n' +\r\n            '  useLight = 1.0;\\n' +\r\n            '#endif\\n' +\r\n\r\n            '#ifdef USE_SColor\\n' +\r\n            '  vec3 r = normalize( reflect(-u_DirectionalLight_Direction, v_Normal0) );\\n' +\r\n            '  vec3 v = normalize( u_Camera_Position - v_PositionV3 );\\n' +\r\n            '  float rdotv = max( dot(r ,v), 0.0 );\\n' +\r\n            '  float S_weight = pow( rdotv, 1.0 );\\n' +\r\n            '  vec3 S_color = colorV3 * u_DirectionalLight_Color * S_weight * 0.9;\\n' +\r\n\r\n            '  if(useLight>0.5){\\n' +\r\n            '    finalColorV3 = finalColorV3 + S_color;\\n' +\r\n            '  }else{\\n' +\r\n            '    finalColorV3 = S_color;\\n' +\r\n            '  }\\n' +\r\n            '  useLight = 1.0;\\n' +\r\n            '#endif\\n' +\r\n\r\n            '  color = vec4(finalColorV3, color.a);\\n' +\r\n\r\n            '#ifdef USE_envMap\\n' +\r\n            // '   vec3 v1 = normalize( u_Camera_Position - v_PositionV3 );\\n' +\r\n            // '   vec3 r1 = normalize( reflect(v1, v_Normal0) );\\n' +\r\n            '   vec3 v1 = u_Camera_Position - v_PositionV3;\\n' +\r\n            '   vec3 r1 = reflect(-v1, v_Normal0);\\n' +\r\n\r\n            '   vec4 envMapColor = textureCube(u_envMap, r1);\\n' +\r\n            // '   vec3 ref = v1 - 2.0 * dot(v_Normal0, v1) * v_Normal0;\\n'+\r\n            // '   vec4 envMapColor = textureCube(u_envMap, ref);\\n' +\r\n            '   color = vec4(envMapColor.rgb, color.a);\\n' +\r\n            '#endif\\n' +\r\n\r\n\r\n            '#ifdef USE_Shadow\\n' +\r\n            '  vec3 shadowCoord = (v_PositionFromLight.xyz/v_PositionFromLight.w)/2.0 + 0.5;\\n' +\r\n            '  vec4 rgbaDepth = texture2D(u_ShadowMap, shadowCoord.xy);\\n' +\r\n            '  float depth = unpackDepth(rgbaDepth);\\n' +\r\n            '  float visibility = (shadowCoord.z > depth + 0.0015) ? 0.7 : 1.0;\\n' +\r\n            '  color = vec4(color.rgb * visibility, color.a);\\n' +\r\n            '#endif\\n' +\r\n\r\n            '  gl_FragColor = color;\\n' +\r\n\r\n            '}\\n';\r\n\r\n        this.vshaderSource = VSHADER_SOURCE;\r\n        this.fshaderSource = FSHADER_SOURCE;\r\n    }\r\n\r\n    setOpacity(opacity){\r\n        this.opacity = opacity;\r\n        this.color[3] = opacity;\r\n        this.transparent = opacity<1;\r\n    }\r\n\r\n    clone(){\r\n\r\n        var material = new Material({\r\n            map: this.map,\r\n            color: this.color.slice(0)\r\n        });\r\n\r\n        return material;\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var material_Material = (Material);\r\n\n// CONCATENATED MODULE: ./src/math/Euler.js\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nfunction Euler( x, y, z, order ) {\r\n\r\n\tthis._x = x || 0;\r\n\tthis._y = y || 0;\r\n\tthis._z = z || 0;\r\n\tthis._order = order || Euler.DefaultOrder;\r\n\r\n}\r\n\r\nEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\r\n\r\nEuler.DefaultOrder = 'XYZ';\r\n\r\nObject.defineProperties( Euler.prototype, {\r\n\r\n\tx: {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\treturn this._x;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tthis._x = value;\r\n\t\t\tthis.onChangeCallback();\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ty: {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\treturn this._y;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tthis._y = value;\r\n\t\t\tthis.onChangeCallback();\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tz: {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\treturn this._z;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tthis._z = value;\r\n\t\t\tthis.onChangeCallback();\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\torder: {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\treturn this._order;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tthis._order = value;\r\n\t\t\tthis.onChangeCallback();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n} );\r\n\r\nObject.assign( Euler.prototype, {\r\n\r\n\tisEuler: true,\r\n\r\n\tset: function ( x, y, z, order ) {\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._order = order || this._order;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\r\n\r\n\t},\r\n\r\n\tcopy: function ( euler ) {\r\n\r\n\t\tthis._x = euler._x;\r\n\t\tthis._y = euler._y;\r\n\t\tthis._z = euler._z;\r\n\t\tthis._order = euler._order;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromRotationMatrix: function ( m, order, update ) {\r\n\r\n\t\tvar clamp = _Math.clamp;\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tvar te = m.elements;\r\n\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\r\n\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\r\n\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\torder = order || this._order;\r\n\r\n\t\tif ( order === 'XYZ' ) {\r\n\r\n\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\tthis._z = Math.atan2( - m12, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\t\t\t\tthis._z = Math.atan2( m21, m22 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._y = Math.atan2( - m31, m33 );\r\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._y = 0;\r\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._x = Math.atan2( m32, m33 );\r\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = 0;\r\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._x = Math.atan2( - m23, m22 );\r\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = 0;\r\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\tthis._y = Math.atan2( m13, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\tthis._y = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'COOL.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\r\n\r\n\t\t}\r\n\r\n\t\tthis._order = order;\r\n\r\n\t\tif ( update !== false ) this.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromQuaternion: function () {\r\n\r\n\t\tvar matrix = new Matrix4();\r\n\r\n\t\treturn function setFromQuaternion( q, order, update ) {\r\n\r\n\t\t\tmatrix.makeRotationFromQuaternion( q );\r\n\r\n\t\t\treturn this.setFromRotationMatrix( matrix, order, update );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tsetFromVector3: function ( v, order ) {\r\n\r\n\t\treturn this.set( v.x, v.y, v.z, order || this._order );\r\n\r\n\t},\r\n\r\n\treorder: function () {\r\n\r\n\t\t// WARNING: this discards revolution information -bhouston\r\n\r\n\t\tvar q = new Quaternion();\r\n\r\n\t\treturn function reorder( newOrder ) {\r\n\r\n\t\t\tq.setFromEuler( this );\r\n\r\n\t\t\treturn this.setFromQuaternion( q, newOrder );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tequals: function ( euler ) {\r\n\r\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array ) {\r\n\r\n\t\tthis._x = array[ 0 ];\r\n\t\tthis._y = array[ 1 ];\r\n\t\tthis._z = array[ 2 ];\r\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this._x;\r\n\t\tarray[ offset + 1 ] = this._y;\r\n\t\tarray[ offset + 2 ] = this._z;\r\n\t\tarray[ offset + 3 ] = this._order;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\ttoVector3: function ( optionalResult ) {\r\n\r\n\t\tif ( optionalResult ) {\r\n\r\n\t\t\treturn optionalResult.set( this._x, this._y, this._z );\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn new Vector3( this._x, this._y, this._z );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tonChange: function ( callback ) {\r\n\r\n\t\tthis.onChangeCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tonChangeCallback: function () {}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/math/Vector2.js\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author egraether / http://egraether.com/\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n */\r\n\r\nfunction Vector2( x, y ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\r\n}\r\n\r\nObject.defineProperties( Vector2.prototype, {\r\n\r\n\t\"width\": {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\treturn this.x;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tthis.x = value;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t\"height\": {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\treturn this.y;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tthis.y = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n} );\r\n\r\nObject.assign( Vector2.prototype, {\r\n\r\n\tisVector2: true,\r\n\r\n\tset: function ( x, y ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetScalar: function ( scalar ) {\r\n\r\n\t\tthis.x = scalar;\r\n\t\tthis.y = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetX: function ( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponent: function ( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetComponent: function ( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.x, this.y );\r\n\r\n\t},\r\n\r\n\tcopy: function ( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScaledVector: function ( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsub: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubScalar: function ( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( v ) {\r\n\r\n\t\tthis.x *= v.x;\r\n\t\tthis.y *= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\tthis.x *= scalar;\r\n\t\tthis.y *= scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivide: function ( v ) {\r\n\r\n\t\tthis.x /= v.x;\r\n\t\tthis.y /= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivideScalar: function ( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t},\r\n\r\n\tapplyMatrix3: function ( m ) {\r\n\r\n\t\tvar x = this.x, y = this.y;\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\r\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmin: function ( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmax: function ( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclamp: function ( min, max ) {\r\n\r\n\t\t// assumes min < max, componentwise\r\n\r\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclampScalar: function () {\r\n\r\n\t\tvar min = new Vector2();\r\n\t\tvar max = new Vector2();\r\n\r\n\t\treturn function clampScalar( minVal, maxVal ) {\r\n\r\n\t\t\tmin.set( minVal, minVal );\r\n\t\t\tmax.set( maxVal, maxVal );\r\n\r\n\t\t\treturn this.clamp( min, max );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclampLength: function ( min, max ) {\r\n\r\n\t\tvar length = this.length();\r\n\r\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t},\r\n\r\n\tfloor: function () {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tceil: function () {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tround: function () {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\troundToZero: function () {\r\n\r\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function () {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y;\r\n\r\n\t},\r\n\r\n\tcross: function ( v ) {\r\n\r\n\t\treturn this.x * v.y - this.y * v.x;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\r\n\r\n\t},\r\n\r\n\tmanhattanLength: function () {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t},\r\n\r\n\tangle: function () {\r\n\r\n\t\t// computes the angle in radians with respect to the positive x-axis\r\n\r\n\t\tvar angle = Math.atan2( this.y, this.x );\r\n\r\n\t\tif ( angle < 0 ) angle += 2 * Math.PI;\r\n\r\n\t\treturn angle;\r\n\r\n\t},\r\n\r\n\tdistanceTo: function ( v ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t},\r\n\r\n\tdistanceToSquared: function ( v ) {\r\n\r\n\t\tvar dx = this.x - v.x, dy = this.y - v.y;\r\n\t\treturn dx * dx + dy * dy;\r\n\r\n\t},\r\n\r\n\tmanhattanDistanceTo: function ( v ) {\r\n\r\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\r\n\r\n\t},\r\n\r\n\tsetLength: function ( length ) {\r\n\r\n\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t},\r\n\r\n\tlerp: function ( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t},\r\n\r\n\tequals: function ( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tfromBufferAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\tif ( offset !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Vector2: offset has been removed from .fromBufferAttribute().' );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x = attribute.getX( index );\r\n\t\tthis.y = attribute.getY( index );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trotateAround: function ( center, angle ) {\r\n\r\n\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\r\n\r\n\t\tvar x = this.x - center.x;\r\n\t\tvar y = this.y - center.y;\r\n\r\n\t\tthis.x = x * c - y * s + center.x;\r\n\t\tthis.y = x * s + y * c + center.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/math/Ray.js\n\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nfunction Ray( origin, direction ) {\r\n\r\n\tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\r\n\tthis.direction = ( direction !== undefined ) ? direction : new Vector3();\r\n\r\n}\r\n\r\nObject.assign( Ray.prototype, {\r\n\r\n\tset: function ( origin, direction ) {\r\n\r\n\t\tthis.origin.copy( origin );\r\n\t\tthis.direction.copy( direction );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( ray ) {\r\n\r\n\t\tthis.origin.copy( ray.origin );\r\n\t\tthis.direction.copy( ray.direction );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tat: function ( t, target ) {\r\n\r\n\t\tif ( target === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Ray: .at() target is now required' );\r\n\t\t\ttarget = new Vector3();\r\n\r\n\t\t}\r\n\r\n\t\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\r\n\r\n\t},\r\n\r\n\tlookAt: function ( v ) {\r\n\r\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trecast: function () {\r\n\r\n\t\tvar v1 = new Vector3();\r\n\r\n\t\treturn function recast( t ) {\r\n\r\n\t\t\tthis.origin.copy( this.at( t, v1 ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclosestPointToPoint: function ( point, target ) {\r\n\r\n\t\tif ( target === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Ray: .closestPointToPoint() target is now required' );\r\n\t\t\ttarget = new Vector3();\r\n\r\n\t\t}\r\n\r\n\t\ttarget.subVectors( point, this.origin );\r\n\r\n\t\tvar directionDistance = target.dot( this.direction );\r\n\r\n\t\tif ( directionDistance < 0 ) {\r\n\r\n\t\t\treturn target.copy( this.origin );\r\n\r\n\t\t}\r\n\r\n\t\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\r\n\r\n\t},\r\n\r\n\tdistanceSqToPoint: function () {\r\n\r\n\t\tvar v1 = new Vector3();\r\n\r\n\t\treturn function distanceSqToPoint( point ) {\r\n\r\n\t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\r\n\r\n\t\t\t// point behind the ray\r\n\r\n\t\t\tif ( directionDistance < 0 ) {\r\n\r\n\t\t\t\treturn this.origin.distanceToSquared( point );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\r\n\t\t\treturn v1.distanceToSquared( point );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tdistanceSqToSegment: function () {\r\n\r\n\t\tvar segCenter = new Vector3();\r\n\t\tvar segDir = new Vector3();\r\n\t\tvar diff = new Vector3();\r\n\r\n\t\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\r\n\r\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\r\n\t\t\t// It returns the min distance between the ray and the segment\r\n\t\t\t// defined by v0 and v1\r\n\t\t\t// It can also set two optional targets :\r\n\t\t\t// - The closest point on the ray\r\n\t\t\t// - The closest point on the segment\r\n\r\n\t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\r\n\t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\r\n\t\t\tdiff.copy( this.origin ).sub( segCenter );\r\n\r\n\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\r\n\t\t\tvar a01 = - this.direction.dot( segDir );\r\n\t\t\tvar b0 = diff.dot( this.direction );\r\n\t\t\tvar b1 = - diff.dot( segDir );\r\n\t\t\tvar c = diff.lengthSq();\r\n\t\t\tvar det = Math.abs( 1 - a01 * a01 );\r\n\t\t\tvar s0, s1, sqrDist, extDet;\r\n\r\n\t\t\tif ( det > 0 ) {\r\n\r\n\t\t\t\t// The ray and segment are not parallel.\r\n\r\n\t\t\t\ts0 = a01 * b1 - b0;\r\n\t\t\t\ts1 = a01 * b0 - b1;\r\n\t\t\t\textDet = segExtent * det;\r\n\r\n\t\t\t\tif ( s0 >= 0 ) {\r\n\r\n\t\t\t\t\tif ( s1 >= - extDet ) {\r\n\r\n\t\t\t\t\t\tif ( s1 <= extDet ) {\r\n\r\n\t\t\t\t\t\t\t// region 0\r\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\r\n\r\n\t\t\t\t\t\t\tvar invDet = 1 / det;\r\n\t\t\t\t\t\t\ts0 *= invDet;\r\n\t\t\t\t\t\t\ts1 *= invDet;\r\n\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t// region 1\r\n\r\n\t\t\t\t\t\t\ts1 = segExtent;\r\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// region 5\r\n\r\n\t\t\t\t\t\ts1 = - segExtent;\r\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( s1 <= - extDet ) {\r\n\r\n\t\t\t\t\t\t// region 4\r\n\r\n\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\r\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t} else if ( s1 <= extDet ) {\r\n\r\n\t\t\t\t\t\t// region 3\r\n\r\n\t\t\t\t\t\ts0 = 0;\r\n\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// region 2\r\n\r\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\r\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Ray and segment are parallel.\r\n\r\n\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\r\n\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( optionalPointOnRay ) {\r\n\r\n\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( optionalPointOnSegment ) {\r\n\r\n\t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn sqrDist;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tintersectSphere: function () {\r\n\r\n\t\tvar v1 = new Vector3();\r\n\r\n\t\treturn function intersectSphere( sphere, target ) {\r\n\r\n\t\t\tv1.subVectors( sphere.center, this.origin );\r\n\t\t\tvar tca = v1.dot( this.direction );\r\n\t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\r\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\r\n\r\n\t\t\tif ( d2 > radius2 ) return null;\r\n\r\n\t\t\tvar thc = Math.sqrt( radius2 - d2 );\r\n\r\n\t\t\t// t0 = first intersect point - entrance on front of sphere\r\n\t\t\tvar t0 = tca - thc;\r\n\r\n\t\t\t// t1 = second intersect point - exit point on back of sphere\r\n\t\t\tvar t1 = tca + thc;\r\n\r\n\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\r\n\t\t\tif ( t0 < 0 && t1 < 0 ) return null;\r\n\r\n\t\t\t// test to see if t0 is behind the ray:\r\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\r\n\t\t\t// in order to always return an intersect point that is in front of the ray.\r\n\t\t\tif ( t0 < 0 ) return this.at( t1, target );\r\n\r\n\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\r\n\t\t\treturn this.at( t0, target );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\r\n\r\n\t},\r\n\r\n\tdistanceToPlane: function ( plane ) {\r\n\r\n\t\tvar denominator = plane.normal.dot( this.direction );\r\n\r\n\t\tif ( denominator === 0 ) {\r\n\r\n\t\t\t// line is coplanar, return origin\r\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\r\n\r\n\t\t\t\treturn 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\r\n\r\n\t\t// Return if the ray never intersects the plane\r\n\r\n\t\treturn t >= 0 ? t : null;\r\n\r\n\t},\r\n\r\n\tintersectPlane: function ( plane, target ) {\r\n\r\n\t\tvar t = this.distanceToPlane( plane );\r\n\r\n\t\tif ( t === null ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.at( t, target );\r\n\r\n\t},\r\n\r\n\tintersectsPlane: function ( plane ) {\r\n\r\n\t\t// check if the ray lies on the plane first\r\n\r\n\t\tvar distToPoint = plane.distanceToPoint( this.origin );\r\n\r\n\t\tif ( distToPoint === 0 ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\tvar denominator = plane.normal.dot( this.direction );\r\n\r\n\t\tif ( denominator * distToPoint < 0 ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\t// ray origin is behind the plane (and is pointing behind it)\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tintersectBox: function ( box, target ) {\r\n\r\n\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\r\n\r\n\t\tvar invdirx = 1 / this.direction.x,\r\n\t\t\tinvdiry = 1 / this.direction.y,\r\n\t\t\tinvdirz = 1 / this.direction.z;\r\n\r\n\t\tvar origin = this.origin;\r\n\r\n\t\tif ( invdirx >= 0 ) {\r\n\r\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\r\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\r\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\r\n\r\n\t\t}\r\n\r\n\t\tif ( invdiry >= 0 ) {\r\n\r\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\r\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\r\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\r\n\r\n\t\t// These lines also handle the case where tmin or tmax is NaN\r\n\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\r\n\r\n\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\r\n\r\n\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\r\n\r\n\t\tif ( invdirz >= 0 ) {\r\n\r\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\r\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\r\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\r\n\r\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\r\n\r\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\r\n\r\n\t\t//return point closest to the ray (positive side)\r\n\r\n\t\tif ( tmax < 0 ) return null;\r\n\r\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\r\n\r\n\t},\r\n\r\n\tintersectsBox: ( function () {\r\n\r\n\t\tvar v = new Vector3();\r\n\r\n\t\treturn function intersectsBox( box ) {\r\n\r\n\t\t\treturn this.intersectBox( box, v ) !== null;\r\n\r\n\t\t};\r\n\r\n\t} )(),\r\n\r\n\tintersectTriangle: function () {\r\n\r\n\t\t// Compute the offset origin, edges, and normal.\r\n\t\tvar diff = new Vector3();\r\n\t\tvar edge1 = new Vector3();\r\n\t\tvar edge2 = new Vector3();\r\n\t\tvar normal = new Vector3();\r\n\r\n\t\treturn function intersectTriangle( a, b, c, backfaceCulling, target ) {\r\n\r\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\r\n\r\n\t\t\tedge1.subVectors( b, a );\r\n\t\t\tedge2.subVectors( c, a );\r\n\t\t\tnormal.crossVectors( edge1, edge2 );\r\n\r\n\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\r\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\r\n\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\r\n\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\r\n\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\r\n\t\t\tvar DdN = this.direction.dot( normal );\r\n\t\t\tvar sign;\r\n\r\n\t\t\tif ( DdN > 0 ) {\r\n\r\n\t\t\t\tif ( backfaceCulling ) return null;\r\n\t\t\t\tsign = 1;\r\n\r\n\t\t\t} else if ( DdN < 0 ) {\r\n\r\n\t\t\t\tsign = - 1;\r\n\t\t\t\tDdN = - DdN;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdiff.subVectors( this.origin, a );\r\n\t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\r\n\r\n\t\t\t// b1 < 0, no intersection\r\n\t\t\tif ( DdQxE2 < 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\r\n\r\n\t\t\t// b2 < 0, no intersection\r\n\t\t\tif ( DdE1xQ < 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// b1+b2 > 1, no intersection\r\n\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Line intersects triangle, check if ray does.\r\n\t\t\tvar QdN = - sign * diff.dot( normal );\r\n\r\n\t\t\t// t < 0, no intersection\r\n\t\t\tif ( QdN < 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Ray intersects triangle.\r\n\t\t\treturn this.at( QdN / DdN, target );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tapplyMatrix4: function ( matrix4 ) {\r\n\r\n\t\tthis.origin.applyMatrix4( matrix4 );\r\n\t\tthis.direction.transformDirection( matrix4 );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( ray ) {\r\n\r\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/math/Triangle.js\n\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nfunction Triangle( a, b, c ) {\r\n\r\n\tthis.a = ( a !== undefined ) ? a : new Vector3();\r\n\tthis.b = ( b !== undefined ) ? b : new Vector3();\r\n\tthis.c = ( c !== undefined ) ? c : new Vector3();\r\n\r\n}\r\n\r\nObject.assign( Triangle, {\r\n\r\n\tgetNormal: function () {\r\n\r\n\t\tvar v0 = new Vector3();\r\n\r\n\t\treturn function getNormal( a, b, c, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'COOL.Triangle: .getNormal() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttarget.subVectors( c, b );\r\n\t\t\tv0.subVectors( a, b );\r\n\t\t\ttarget.cross( v0 );\r\n\r\n\t\t\tvar targetLengthSq = target.lengthSq();\r\n\t\t\tif ( targetLengthSq > 0 ) {\r\n\r\n\t\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.set( 0, 0, 0 );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\t// static/instance method to calculate barycentric coordinates\r\n\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\r\n\tgetBarycoord: function () {\r\n\r\n\t\tvar v0 = new Vector3();\r\n\t\tvar v1 = new Vector3();\r\n\t\tvar v2 = new Vector3();\r\n\r\n\t\treturn function getBarycoord( point, a, b, c, target ) {\r\n\r\n\t\t\tv0.subVectors( c, a );\r\n\t\t\tv1.subVectors( b, a );\r\n\t\t\tv2.subVectors( point, a );\r\n\r\n\t\t\tvar dot00 = v0.dot( v0 );\r\n\t\t\tvar dot01 = v0.dot( v1 );\r\n\t\t\tvar dot02 = v0.dot( v2 );\r\n\t\t\tvar dot11 = v1.dot( v1 );\r\n\t\t\tvar dot12 = v1.dot( v2 );\r\n\r\n\t\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'COOL.Triangle: .getBarycoord() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// collinear or singular triangle\r\n\t\t\tif ( denom === 0 ) {\r\n\r\n\t\t\t\t// arbitrary location outside of triangle?\r\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\r\n\t\t\t\treturn target.set( - 2, - 1, - 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar invDenom = 1 / denom;\r\n\t\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\r\n\t\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\r\n\r\n\t\t\t// barycentric coordinates must always sum to 1\r\n\t\t\treturn target.set( 1 - u - v, v, u );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tcontainsPoint: function () {\r\n\r\n\t\tvar v1 = new Vector3();\r\n\r\n\t\treturn function containsPoint( point, a, b, c ) {\r\n\r\n\t\t\tTriangle.getBarycoord( point, a, b, c, v1 );\r\n\r\n\t\t\treturn ( v1.x >= 0 ) && ( v1.y >= 0 ) && ( ( v1.x + v1.y ) <= 1 );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tgetUV: function () {\r\n\r\n\t\tvar barycoord = new Vector3();\r\n\r\n\t\treturn function getUV( point, p1, p2, p3, uv1, uv2, uv3, target ) {\r\n\r\n\t\t\tthis.getBarycoord( point, p1, p2, p3, barycoord );\r\n\r\n\t\t\ttarget.set( 0, 0 );\r\n\t\t\ttarget.addScaledVector( uv1, barycoord.x );\r\n\t\t\ttarget.addScaledVector( uv2, barycoord.y );\r\n\t\t\ttarget.addScaledVector( uv3, barycoord.z );\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t};\r\n\r\n\t}()\r\n\r\n} );\r\n\r\nObject.assign( Triangle.prototype, {\r\n\r\n\tset: function ( a, b, c ) {\r\n\r\n\t\tthis.a.copy( a );\r\n\t\tthis.b.copy( b );\r\n\t\tthis.c.copy( c );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\r\n\r\n\t\tthis.a.copy( points[ i0 ] );\r\n\t\tthis.b.copy( points[ i1 ] );\r\n\t\tthis.c.copy( points[ i2 ] );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( triangle ) {\r\n\r\n\t\tthis.a.copy( triangle.a );\r\n\t\tthis.b.copy( triangle.b );\r\n\t\tthis.c.copy( triangle.c );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetArea: function () {\r\n\r\n\t\tvar v0 = new Vector3();\r\n\t\tvar v1 = new Vector3();\r\n\r\n\t\treturn function getArea() {\r\n\r\n\t\t\tv0.subVectors( this.c, this.b );\r\n\t\t\tv1.subVectors( this.a, this.b );\r\n\r\n\t\t\treturn v0.cross( v1 ).length() * 0.5;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tgetMidpoint: function ( target ) {\r\n\r\n\t\tif ( target === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Triangle: .getMidpoint() target is now required' );\r\n\t\t\ttarget = new Vector3();\r\n\r\n\t\t}\r\n\r\n\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\r\n\r\n\t},\r\n\r\n\tgetNormal: function ( target ) {\r\n\r\n\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\r\n\r\n\t},\r\n\r\n\tgetPlane: function ( target ) {\r\n\r\n\t\tif ( target === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Triangle: .getPlane() target is now required' );\r\n\t\t\ttarget = new Vector3();\r\n\r\n\t\t}\r\n\r\n\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\r\n\r\n\t},\r\n\r\n\tgetBarycoord: function ( point, target ) {\r\n\r\n\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\r\n\r\n\t},\r\n\r\n\tgetUV: function ( point, uv1, uv2, uv3, result ) {\r\n\r\n\t\treturn Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, result );\r\n\r\n\t},\r\n\r\n\tintersectsBox: function ( box ) {\r\n\r\n\t\treturn box.intersectsTriangle( this );\r\n\r\n\t},\r\n\r\n\tclosestPointToPoint: function () {\r\n\r\n\t\tvar vab = new Vector3();\r\n\t\tvar vac = new Vector3();\r\n\t\tvar vbc = new Vector3();\r\n\t\tvar vap = new Vector3();\r\n\t\tvar vbp = new Vector3();\r\n\t\tvar vcp = new Vector3();\r\n\r\n\t\treturn function closestPointToPoint( p, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'COOL.Triangle: .closestPointToPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar a = this.a, b = this.b, c = this.c;\r\n\t\t\tvar v, w;\r\n\r\n\t\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\r\n\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\r\n\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\r\n\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\r\n\t\t\t// the point lies in with the minimum amount of redundant computation.\r\n\r\n\t\t\tvab.subVectors( b, a );\r\n\t\t\tvac.subVectors( c, a );\r\n\t\t\tvap.subVectors( p, a );\r\n\t\t\tvar d1 = vab.dot( vap );\r\n\t\t\tvar d2 = vac.dot( vap );\r\n\t\t\tif ( d1 <= 0 && d2 <= 0 ) {\r\n\r\n\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\r\n\t\t\t\treturn target.copy( a );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvbp.subVectors( p, b );\r\n\t\t\tvar d3 = vab.dot( vbp );\r\n\t\t\tvar d4 = vac.dot( vbp );\r\n\t\t\tif ( d3 >= 0 && d4 <= d3 ) {\r\n\r\n\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\r\n\t\t\t\treturn target.copy( b );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar vc = d1 * d4 - d3 * d2;\r\n\t\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\r\n\r\n\t\t\t\tv = d1 / ( d1 - d3 );\r\n\t\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\r\n\t\t\t\treturn target.copy( a ).addScaledVector( vab, v );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvcp.subVectors( p, c );\r\n\t\t\tvar d5 = vab.dot( vcp );\r\n\t\t\tvar d6 = vac.dot( vcp );\r\n\t\t\tif ( d6 >= 0 && d5 <= d6 ) {\r\n\r\n\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\r\n\t\t\t\treturn target.copy( c );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar vb = d5 * d2 - d1 * d6;\r\n\t\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\r\n\r\n\t\t\t\tw = d2 / ( d2 - d6 );\r\n\t\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\r\n\t\t\t\treturn target.copy( a ).addScaledVector( vac, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar va = d3 * d6 - d5 * d4;\r\n\t\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\r\n\r\n\t\t\t\tvbc.subVectors( c, b );\r\n\t\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\r\n\t\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\r\n\t\t\t\treturn target.copy( b ).addScaledVector( vbc, w ); // edge region of BC\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// face region\r\n\t\t\tvar denom = 1 / ( va + vb + vc );\r\n\t\t\t// u = va * denom\r\n\t\t\tv = vb * denom;\r\n\t\t\tw = vc * denom;\r\n\t\t\treturn target.copy( a ).addScaledVector( vab, v ).addScaledVector( vac, w );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tequals: function ( triangle ) {\r\n\r\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/math/Color.js\n\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nvar ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\r\n\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\r\n\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\r\n\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\r\n\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\r\n\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\r\n\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\r\n\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\r\n\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\r\n\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\r\n\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\r\n\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\r\n\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\r\n\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\r\n\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\r\n\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\r\n\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\r\n\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\r\n\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\r\n\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\r\n\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\r\n\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\r\n\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\r\n\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\r\n\r\nfunction Color( r, g, b ) {\r\n\r\n\tif ( g === undefined && b === undefined ) {\r\n\r\n\t\t// r is COOL.Color, hex or string\r\n\t\treturn this.set( r );\r\n\r\n\t}\r\n\r\n\treturn this.setRGB( r, g, b );\r\n\r\n}\r\n\r\nObject.assign( Color.prototype, {\r\n\r\n\tisColor: true,\r\n\r\n\tr: 1, g: 1, b: 1,\r\n\r\n\tset: function ( value ) {\r\n\r\n\t\tif ( value && value.isColor ) {\r\n\r\n\t\t\tthis.copy( value );\r\n\r\n\t\t} else if ( typeof value === 'number' ) {\r\n\r\n\t\t\tthis.setHex( value );\r\n\r\n\t\t} else if ( typeof value === 'string' ) {\r\n\r\n\t\t\tthis.setStyle( value );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetScalar: function ( scalar ) {\r\n\r\n\t\tthis.r = scalar;\r\n\t\tthis.g = scalar;\r\n\t\tthis.b = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetHex: function ( hex ) {\r\n\r\n\t\thex = Math.floor( hex );\r\n\r\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\r\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\r\n\t\tthis.b = ( hex & 255 ) / 255;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetRGB: function ( r, g, b ) {\r\n\r\n\t\tthis.r = r;\r\n\t\tthis.g = g;\r\n\t\tthis.b = b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetHSL: function () {\r\n\r\n\t\tfunction hue2rgb( p, q, t ) {\r\n\r\n\t\t\tif ( t < 0 ) t += 1;\r\n\t\t\tif ( t > 1 ) t -= 1;\r\n\t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\r\n\t\t\tif ( t < 1 / 2 ) return q;\r\n\t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\r\n\t\t\treturn p;\r\n\r\n\t\t}\r\n\r\n\t\treturn function setHSL( h, s, l ) {\r\n\r\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\t\t\th = _Math.euclideanModulo( h, 1 );\r\n\t\t\ts = _Math.clamp( s, 0, 1 );\r\n\t\t\tl = _Math.clamp( l, 0, 1 );\r\n\r\n\t\t\tif ( s === 0 ) {\r\n\r\n\t\t\t\tthis.r = this.g = this.b = l;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\r\n\t\t\t\tvar q = ( 2 * l ) - p;\r\n\r\n\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\r\n\t\t\t\tthis.g = hue2rgb( q, p, h );\r\n\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tsetStyle: function ( style ) {\r\n\r\n\t\tfunction handleAlpha( string ) {\r\n\r\n\t\t\tif ( string === undefined ) return;\r\n\r\n\t\t\tif ( parseFloat( string ) < 1 ) {\r\n\r\n\t\t\t\tconsole.warn( 'COOL.Color: Alpha component of ' + style + ' will be ignored.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\tvar m;\r\n\r\n\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\r\n\r\n\t\t\t// rgb / hsl\r\n\r\n\t\t\tvar color;\r\n\t\t\tvar name = m[ 1 ];\r\n\t\t\tvar components = m[ 2 ];\r\n\r\n\t\t\tswitch ( name ) {\r\n\r\n\t\t\t\tcase 'rgb':\r\n\t\t\t\tcase 'rgba':\r\n\r\n\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\r\n\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\r\n\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\r\n\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\r\n\r\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\r\n\t\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\r\n\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\r\n\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\r\n\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\r\n\r\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\r\n\t\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'hsl':\r\n\t\t\t\tcase 'hsla':\r\n\r\n\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\r\n\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\r\n\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\r\n\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\r\n\r\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\r\n\t\t\t\t\t\treturn this.setHSL( h, s, l );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\r\n\r\n\t\t\t// hex color\r\n\r\n\t\t\tvar hex = m[ 1 ];\r\n\t\t\tvar size = hex.length;\r\n\r\n\t\t\tif ( size === 3 ) {\r\n\r\n\t\t\t\t// #ff0\r\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\r\n\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\r\n\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t} else if ( size === 6 ) {\r\n\r\n\t\t\t\t// #ff0000\r\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\r\n\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\r\n\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( style && style.length > 0 ) {\r\n\r\n\t\t\t// color keywords\r\n\t\t\tvar hex = ColorKeywords[ style ];\r\n\r\n\t\t\tif ( hex !== undefined ) {\r\n\r\n\t\t\t\t// red\r\n\t\t\t\tthis.setHex( hex );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// unknown color\r\n\t\t\t\tconsole.warn( 'COOL.Color: Unknown color ' + style );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.r, this.g, this.b );\r\n\r\n\t},\r\n\r\n\tcopy: function ( color ) {\r\n\r\n\t\tthis.r = color.r;\r\n\t\tthis.g = color.g;\r\n\t\tthis.b = color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyGammaToLinear: function ( color, gammaFactor ) {\r\n\r\n\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\r\n\r\n\t\tthis.r = Math.pow( color.r, gammaFactor );\r\n\t\tthis.g = Math.pow( color.g, gammaFactor );\r\n\t\tthis.b = Math.pow( color.b, gammaFactor );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyLinearToGamma: function ( color, gammaFactor ) {\r\n\r\n\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\r\n\r\n\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\r\n\r\n\t\tthis.r = Math.pow( color.r, safeInverse );\r\n\t\tthis.g = Math.pow( color.g, safeInverse );\r\n\t\tthis.b = Math.pow( color.b, safeInverse );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tconvertGammaToLinear: function ( gammaFactor ) {\r\n\r\n\t\tthis.copyGammaToLinear( this, gammaFactor );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tconvertLinearToGamma: function ( gammaFactor ) {\r\n\r\n\t\tthis.copyLinearToGamma( this, gammaFactor );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopySRGBToLinear: function () {\r\n\r\n\t\tfunction SRGBToLinear( c ) {\r\n\r\n\t\t\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\r\n\r\n\t\t}\r\n\r\n\t\treturn function copySRGBToLinear( color ) {\r\n\r\n\t\t\tthis.r = SRGBToLinear( color.r );\r\n\t\t\tthis.g = SRGBToLinear( color.g );\r\n\t\t\tthis.b = SRGBToLinear( color.b );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tcopyLinearToSRGB: function () {\r\n\r\n\t\tfunction LinearToSRGB( c ) {\r\n\r\n\t\t\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\r\n\r\n\t\t}\r\n\r\n\t\treturn function copyLinearToSRGB( color ) {\r\n\r\n\t\t\tthis.r = LinearToSRGB( color.r );\r\n\t\t\tthis.g = LinearToSRGB( color.g );\r\n\t\t\tthis.b = LinearToSRGB( color.b );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tconvertSRGBToLinear: function () {\r\n\r\n\t\tthis.copySRGBToLinear( this );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tconvertLinearToSRGB: function () {\r\n\r\n\t\tthis.copyLinearToSRGB( this );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetHex: function () {\r\n\r\n\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\r\n\r\n\t},\r\n\r\n\tgetHexString: function () {\r\n\r\n\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\r\n\r\n\t},\r\n\r\n\tgetHSL: function ( target ) {\r\n\r\n\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\r\n\t\tif ( target === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Color: .getHSL() target is now required' );\r\n\t\t\ttarget = { h: 0, s: 0, l: 0 };\r\n\r\n\t\t}\r\n\r\n\t\tvar r = this.r, g = this.g, b = this.b;\r\n\r\n\t\tvar max = Math.max( r, g, b );\r\n\t\tvar min = Math.min( r, g, b );\r\n\r\n\t\tvar hue, saturation;\r\n\t\tvar lightness = ( min + max ) / 2.0;\r\n\r\n\t\tif ( min === max ) {\r\n\r\n\t\t\thue = 0;\r\n\t\t\tsaturation = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar delta = max - min;\r\n\r\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\r\n\r\n\t\t\tswitch ( max ) {\r\n\r\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\r\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\r\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\r\n\r\n\t\t\t}\r\n\r\n\t\t\thue /= 6;\r\n\r\n\t\t}\r\n\r\n\t\ttarget.h = hue;\r\n\t\ttarget.s = saturation;\r\n\t\ttarget.l = lightness;\r\n\r\n\t\treturn target;\r\n\r\n\t},\r\n\r\n\tgetStyle: function () {\r\n\r\n\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\r\n\r\n\t},\r\n\r\n\toffsetHSL: function () {\r\n\r\n\t\tvar hsl = {};\r\n\r\n\t\treturn function ( h, s, l ) {\r\n\r\n\t\t\tthis.getHSL( hsl );\r\n\r\n\t\t\thsl.h += h; hsl.s += s; hsl.l += l;\r\n\r\n\t\t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tadd: function ( color ) {\r\n\r\n\t\tthis.r += color.r;\r\n\t\tthis.g += color.g;\r\n\t\tthis.b += color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddColors: function ( color1, color2 ) {\r\n\r\n\t\tthis.r = color1.r + color2.r;\r\n\t\tthis.g = color1.g + color2.g;\r\n\t\tthis.b = color1.b + color2.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.r += s;\r\n\t\tthis.g += s;\r\n\t\tthis.b += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsub: function ( color ) {\r\n\r\n\t\tthis.r = Math.max( 0, this.r - color.r );\r\n\t\tthis.g = Math.max( 0, this.g - color.g );\r\n\t\tthis.b = Math.max( 0, this.b - color.b );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( color ) {\r\n\r\n\t\tthis.r *= color.r;\r\n\t\tthis.g *= color.g;\r\n\t\tthis.b *= color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tthis.r *= s;\r\n\t\tthis.g *= s;\r\n\t\tthis.b *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerp: function ( color, alpha ) {\r\n\r\n\t\tthis.r += ( color.r - this.r ) * alpha;\r\n\t\tthis.g += ( color.g - this.g ) * alpha;\r\n\t\tthis.b += ( color.b - this.b ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerpHSL: function () {\r\n\r\n\t\tvar hslA = { h: 0, s: 0, l: 0 };\r\n\t\tvar hslB = { h: 0, s: 0, l: 0 };\r\n\r\n\t\treturn function lerpHSL( color, alpha ) {\r\n\r\n\t\t\tthis.getHSL( hslA );\r\n\t\t\tcolor.getHSL( hslB );\r\n\r\n\t\t\tvar h = _Math.lerp( hslA.h, hslB.h, alpha );\r\n\t\t\tvar s = _Math.lerp( hslA.s, hslB.s, alpha );\r\n\t\t\tvar l = _Math.lerp( hslA.l, hslB.l, alpha );\r\n\r\n\t\t\tthis.setHSL( h, s, l );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tequals: function ( c ) {\r\n\r\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.r = array[ offset ];\r\n\t\tthis.g = array[ offset + 1 ];\r\n\t\tthis.b = array[ offset + 2 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this.r;\r\n\t\tarray[ offset + 1 ] = this.g;\r\n\t\tarray[ offset + 2 ] = this.b;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\ttoJSON: function () {\r\n\r\n\t\treturn this.getHex();\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/core/Face3.js\n\r\n\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nfunction Face3( a, b, c, normal, color, materialIndex ) {\r\n\r\n\tthis.a = a;\r\n\tthis.b = b;\r\n\tthis.c = c;\r\n\r\n\tthis.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();\r\n\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\r\n\r\n\tthis.color = ( color && color.isColor ) ? color : new Color();\r\n\tthis.vertexColors = Array.isArray( color ) ? color : [];\r\n\r\n\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\r\n\r\n}\r\n\r\nObject.assign( Face3.prototype, {\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.a = source.a;\r\n\t\tthis.b = source.b;\r\n\t\tthis.c = source.c;\r\n\r\n\t\tthis.normal.copy( source.normal );\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.materialIndex = source.materialIndex;\r\n\r\n\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/core/Mesh.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Mesh_Mesh {\r\n    constructor(param) {\r\n        this.type = 'Mesh';\r\n        param = param || {};\r\n        this.geometry = param.geometry;\r\n        this.material = param.material || new material_Material();\r\n\r\n        this.position = param.position || [0,0,0];\r\n        this.rotation = param.rotation || new Euler();\r\n        this.scale = param.scale || [1,1,1];\r\n\r\n        this.quaternion = new Quaternion().setFromEuler( this.rotation, false );\r\n\r\n        this.children = [];\r\n        this.parent = null;\r\n\r\n        this.matrix = new Matrix4();\r\n        this.matrixWorld = new Matrix4();\r\n        this.updateMatrix();\r\n\r\n    }\r\n\r\n    setPosition(position){\r\n        this.position = position;\r\n        this.updateMatrix();\r\n    }\r\n\r\n    setRotation(rotationArray){\r\n        this.rotation = new Euler().fromArray(rotationArray);\r\n        var quaternion = new Quaternion().setFromEuler( this.rotation, false );\r\n        this.setQuaternion(quaternion);\r\n    }\r\n\r\n    setQuaternion(quaternion){\r\n\r\n        this.quaternion = quaternion;\r\n        this.rotation.setFromQuaternion( quaternion, undefined, false );\r\n        this.updateMatrix();\r\n    }\r\n\r\n    setScale(scaleArray){\r\n        this.scale = scaleArray;\r\n        this.updateMatrix();\r\n    }\r\n\r\n    updateMatrix(){\r\n        this.matrix.compose( new Vector3().fromArray(this.position), this.quaternion, new Vector3().fromArray(this.scale) );\r\n        this.updateMatrixWorld ();\r\n    }\r\n\r\n    setMatrix(matrix){\r\n        this.matrix = matrix;\r\n        this.updateMatrixWorld ();\r\n    }\r\n\r\n    updateMatrixWorld () {\r\n\r\n        // this.updateMatrix();\r\n\r\n        if ( this.parent === null ) {\r\n\r\n            this.matrixWorld = this.matrix.clone();\r\n\r\n        } else {\r\n\r\n            this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n        }\r\n\r\n        this.updateChildrenMatrixWorld();\r\n\r\n    }\r\n\r\n    getWorldPosition() {\r\n\r\n        var target = new Vector3();\r\n\r\n        // this.updateMatrixWorld();\r\n\r\n        return target.setFromMatrixPosition( this.matrixWorld );\r\n\r\n    }\r\n\r\n    updateChildrenMatrixWorld(){\r\n\r\n        for(var i in this.children){\r\n            this.children[i].updateMatrixWorld();\r\n        }\r\n\r\n    }\r\n\r\n    clone(){\r\n        var mesh = new Mesh_Mesh({\r\n            geometry: this.geometry.clone(),\r\n            material: this.material.clone(),\r\n            position: this.position.slice(0),\r\n            rotation: this.rotation.clone(),\r\n            scale: this.scale.slice(0)\r\n        });\r\n\r\n        return mesh;\r\n    }\r\n\r\n    add(mesh){\r\n        this.children.push(mesh);\r\n        mesh.parent = this;\r\n        mesh.updateMatrix();\r\n    }\r\n\r\n    rotateOnAxis (axis, angle) {\r\n\r\n        var q1 = new Quaternion();\r\n        q1.setFromAxisAngle( axis, angle );\r\n        var quaternion = this.quaternion.multiply( q1 );\r\n        this.setQuaternion(quaternion);\r\n\r\n    }\r\n\r\n    rotateX (angle) {\r\n\r\n        this.rotateOnAxis( new Vector3(1,0,0), angle );\r\n\r\n    }\r\n\r\n    rotateY (angle) {\r\n\r\n        this.rotateOnAxis( new Vector3(0,1,0), angle );\r\n\r\n    }\r\n\r\n    rotateZ (angle) {\r\n\r\n        this.rotateOnAxis( new Vector3(0,0,1), angle );\r\n\r\n    }\r\n\r\n\r\n\r\n    raycast( raycaster, intersects ) {\r\n\r\n        var that = this;\r\n\r\n        var inverseMatrix = new Matrix4();\r\n        var ray = new Ray();\r\n        var sphere = new Sphere();\r\n\r\n        var vA = new Vector3();\r\n        var vB = new Vector3();\r\n        var vC = new Vector3();\r\n\r\n        var tempA = new Vector3();\r\n        var tempB = new Vector3();\r\n        var tempC = new Vector3();\r\n\r\n        var uvA = new Vector2();\r\n        var uvB = new Vector2();\r\n        var uvC = new Vector2();\r\n\r\n        var intersectionPoint = new Vector3();\r\n        var intersectionPointWorld = new Vector3();\r\n\r\n        function checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\r\n\r\n            var intersect;\r\n\r\n            if ( material.side === BackSide ) {\r\n\r\n                intersect = ray.intersectTriangle( pC, pB, pA, true, point );\r\n\r\n            } else {\r\n\r\n                intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\r\n\r\n            }\r\n\r\n            if ( intersect === null ) return null;\r\n\r\n            intersectionPointWorld.copy( point );\r\n            intersectionPointWorld.applyMatrix4( object.matrixWorld );\r\n\r\n            var distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\r\n\r\n            if ( distance < raycaster.near || distance > raycaster.far ) return null;\r\n\r\n            return {\r\n                distance: distance,\r\n                point: intersectionPointWorld.clone(),\r\n                object: object\r\n            };\r\n\r\n        }\r\n\r\n        function checkBufferGeometryIntersection( object, material, raycaster, ray, position, uv, a, b, c ) {\r\n\r\n            vA.fromBufferAttribute( position, a );\r\n            vB.fromBufferAttribute( position, b );\r\n            vC.fromBufferAttribute( position, c );\r\n\r\n            var intersection = checkIntersection( object, material, raycaster, ray, vA, vB, vC, intersectionPoint );\r\n\r\n            if ( intersection ) {\r\n\r\n                if ( uv ) {\r\n\r\n                    uvA.fromBufferAttribute( uv, a );\r\n                    uvB.fromBufferAttribute( uv, b );\r\n                    uvC.fromBufferAttribute( uv, c );\r\n\r\n                    intersection.uv = Triangle.getUV( intersectionPoint, vA, vB, vC, uvA, uvB, uvC, new Vector2() );\r\n\r\n                }\r\n\r\n                var face = new Face3( a, b, c );\r\n                Triangle.getNormal( vA, vB, vC, face.normal );\r\n\r\n                intersection.face = face;\r\n\r\n            }\r\n\r\n            return intersection;\r\n\r\n        }\r\n\r\n        var geometry = this.geometry;\r\n        var material = this.material;\r\n        var matrixWorld = this.matrixWorld;\r\n\r\n        if ( material === undefined ) return;\r\n\r\n        // Checking boundingSphere distance to ray\r\n\r\n        if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n        sphere.copy( geometry.boundingSphere );\r\n        sphere.applyMatrix4( matrixWorld );\r\n\r\n        var box3 = new Box3().copy(geometry.boundingBox);\r\n        box3.applyMatrix4( matrixWorld );\r\n\r\n        // raycaster.ray.intersectsSphere( sphere ) ||\r\n        if ( raycaster.ray.intersectsBox( box3 ) ) {\r\n            var worldPosition = new Vector3().setFromMatrixPosition( this.matrixWorld );\r\n            that.distance = raycaster.ray.origin.distanceTo( worldPosition );\r\n            intersects.push(that);\r\n        }\r\n\r\n        //\r\n        // inverseMatrix.getInverse( matrixWorld );\r\n        // ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\r\n        //\r\n        // // Check boundingBox before continuing\r\n        //\r\n        // if ( geometry.boundingBox !== null ) {\r\n        //\r\n        //     if ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\r\n        //\r\n        // }\r\n        //\r\n        // var intersection;\r\n        //\r\n        // if ( geometry.isBufferGeometry ) {\r\n        //\r\n        //     var a, b, c;\r\n        //     var index = geometry.index;\r\n        //     var position = geometry.attributes.position;\r\n        //     var uv = geometry.attributes.uv;\r\n        //     var groups = geometry.groups;\r\n        //     var drawRange = geometry.drawRange;\r\n        //     var i, j, il, jl;\r\n        //     var group, groupMaterial;\r\n        //     var start, end;\r\n        //\r\n        //     if ( index !== null ) {\r\n        //\r\n        //         // indexed buffer geometry\r\n        //\r\n        //         if ( Array.isArray( material ) ) {\r\n        //\r\n        //             for ( i = 0, il = groups.length; i < il; i ++ ) {\r\n        //\r\n        //                 group = groups[ i ];\r\n        //                 groupMaterial = material[ group.materialIndex ];\r\n        //\r\n        //                 start = Math.max( group.start, drawRange.start );\r\n        //                 end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\r\n        //\r\n        //                 for ( j = start, jl = end; j < jl; j += 3 ) {\r\n        //\r\n        //                     a = index.getX( j );\r\n        //                     b = index.getX( j + 1 );\r\n        //                     c = index.getX( j + 2 );\r\n        //\r\n        //                     intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, ray, position, uv, a, b, c );\r\n        //\r\n        //                     if ( intersection ) {\r\n        //\r\n        //                         intersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\r\n        //                         intersects.push( intersection );\r\n        //\r\n        //                     }\r\n        //\r\n        //                 }\r\n        //\r\n        //             }\r\n        //\r\n        //         } else {\r\n        //\r\n        //             start = Math.max( 0, drawRange.start );\r\n        //             end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\r\n        //\r\n        //             for ( i = start, il = end; i < il; i += 3 ) {\r\n        //\r\n        //                 a = index.getX( i );\r\n        //                 b = index.getX( i + 1 );\r\n        //                 c = index.getX( i + 2 );\r\n        //\r\n        //                 intersection = checkBufferGeometryIntersection( this, material, raycaster, ray, position, uv, a, b, c );\r\n        //\r\n        //                 if ( intersection ) {\r\n        //\r\n        //                     intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\r\n        //                     intersects.push( intersection );\r\n        //\r\n        //                 }\r\n        //\r\n        //             }\r\n        //\r\n        //         }\r\n        //\r\n        //     } else if ( position !== undefined ) {\r\n        //\r\n        //         // non-indexed buffer geometry\r\n        //\r\n        //         if ( Array.isArray( material ) ) {\r\n        //\r\n        //             for ( i = 0, il = groups.length; i < il; i ++ ) {\r\n        //\r\n        //                 group = groups[ i ];\r\n        //                 groupMaterial = material[ group.materialIndex ];\r\n        //\r\n        //                 start = Math.max( group.start, drawRange.start );\r\n        //                 end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\r\n        //\r\n        //                 for ( j = start, jl = end; j < jl; j += 3 ) {\r\n        //\r\n        //                     a = j;\r\n        //                     b = j + 1;\r\n        //                     c = j + 2;\r\n        //\r\n        //                     intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, ray, position, uv, a, b, c );\r\n        //\r\n        //                     if ( intersection ) {\r\n        //\r\n        //                         intersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\r\n        //                         intersects.push( intersection );\r\n        //\r\n        //                     }\r\n        //\r\n        //                 }\r\n        //\r\n        //             }\r\n        //\r\n        //         } else {\r\n        //\r\n        //             start = Math.max( 0, drawRange.start );\r\n        //             end = Math.min( position.count, ( drawRange.start + drawRange.count ) );\r\n        //\r\n        //             for ( i = start, il = end; i < il; i += 3 ) {\r\n        //\r\n        //                 a = i;\r\n        //                 b = i + 1;\r\n        //                 c = i + 2;\r\n        //\r\n        //                 intersection = checkBufferGeometryIntersection( this, material, raycaster, ray, position, uv, a, b, c );\r\n        //\r\n        //                 if ( intersection ) {\r\n        //\r\n        //                     intersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\r\n        //                     intersects.push( intersection );\r\n        //\r\n        //                 }\r\n        //\r\n        //             }\r\n        //\r\n        //         }\r\n        //\r\n        //     }\r\n        //\r\n        // } else if ( geometry.isGeometry ) {\r\n        //\r\n        //     var fvA, fvB, fvC;\r\n        //     var isMultiMaterial = Array.isArray( material );\r\n        //\r\n        //     var vertices = geometry.vertices;\r\n        //     var faces = geometry.faces;\r\n        //     var uvs;\r\n        //\r\n        //     var faceVertexUvs = geometry.faceVertexUvs[ 0 ];\r\n        //     if ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\r\n        //\r\n        //     for ( var f = 0, fl = faces.length; f < fl; f ++ ) {\r\n        //\r\n        //         var face = faces[ f ];\r\n        //         var faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\r\n        //\r\n        //         if ( faceMaterial === undefined ) continue;\r\n        //\r\n        //         fvA = vertices[ face.a ];\r\n        //         fvB = vertices[ face.b ];\r\n        //         fvC = vertices[ face.c ];\r\n        //\r\n        //         if ( faceMaterial.morphTargets === true ) {\r\n        //\r\n        //             var morphTargets = geometry.morphTargets;\r\n        //             var morphInfluences = this.morphTargetInfluences;\r\n        //\r\n        //             vA.set( 0, 0, 0 );\r\n        //             vB.set( 0, 0, 0 );\r\n        //             vC.set( 0, 0, 0 );\r\n        //\r\n        //             for ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\r\n        //\r\n        //                 var influence = morphInfluences[ t ];\r\n        //\r\n        //                 if ( influence === 0 ) continue;\r\n        //\r\n        //                 var targets = morphTargets[ t ].vertices;\r\n        //\r\n        //                 vA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\r\n        //                 vB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\r\n        //                 vC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\r\n        //\r\n        //             }\r\n        //\r\n        //             vA.add( fvA );\r\n        //             vB.add( fvB );\r\n        //             vC.add( fvC );\r\n        //\r\n        //             fvA = vA;\r\n        //             fvB = vB;\r\n        //             fvC = vC;\r\n        //\r\n        //         }\r\n        //\r\n        //         intersection = checkIntersection( this, faceMaterial, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\r\n        //\r\n        //         if ( intersection ) {\r\n        //\r\n        //             if ( uvs && uvs[ f ] ) {\r\n        //\r\n        //                 var uvs_f = uvs[ f ];\r\n        //                 uvA.copy( uvs_f[ 0 ] );\r\n        //                 uvB.copy( uvs_f[ 1 ] );\r\n        //                 uvC.copy( uvs_f[ 2 ] );\r\n        //\r\n        //                 intersection.uv = Triangle.getUV( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC, new Vector2() );\r\n        //\r\n        //             }\r\n        //\r\n        //             intersection.face = face;\r\n        //             intersection.faceIndex = f;\r\n        //             intersects.push( intersection );\r\n        //\r\n        //         }\r\n        //\r\n        //     }\r\n        //\r\n        // }\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n/* harmony default export */ var core_Mesh = (Mesh_Mesh);\r\n\n// CONCATENATED MODULE: ./src/camera/Camera.js\n\r\n\r\n\r\n\r\n\r\nclass Camera_Camera {\r\n    constructor(fov, aspect, near, far) {\r\n        this.fov = fov;\r\n        this.aspect = aspect;\r\n        this.near = near;\r\n        this.far = far;\r\n\r\n        this.position = [0, 0, 10];\r\n        this.target = [0,0,0];\r\n        this.up = [0,1,0];\r\n\r\n        this.VPmatrix = new Matrix4();\r\n\r\n        this.direction = [0,0,-1];\r\n        this.right = [1,0,0];\r\n\r\n        this.scale = [1,1,1];\r\n        this.quaternion = new Quaternion();\r\n        this.matrix = new Matrix4();\r\n        this.matrixWorld = this.matrix;\r\n        this.projectionMatrix = new Matrix4();\r\n\r\n        this.updateAll();\r\n    }\r\n\r\n    updateAll(){\r\n        this.updateOption();\r\n        this.updateMatrix();\r\n        this.updateVPMatrix();\r\n    }\r\n\r\n    updateMatrix(){\r\n        var quaternionD = new Quaternion().setFromUnitVectors(new Vector3(0,0,-1), new Vector3().fromArray(this.direction));\r\n        var right2 = new Vector3(1,0,0).applyQuaternion(quaternionD);\r\n        var quaternionR = new Quaternion().setFromUnitVectors(right2, new Vector3().fromArray(this.right));\r\n        var quaternion = new Quaternion().multiplyQuaternions(quaternionR, quaternionD);\r\n        this.quaternion = quaternion;\r\n\r\n        this.matrix.compose( new Vector3().fromArray(this.position), this.quaternion, new Vector3().fromArray(this.scale) );\r\n        this.projectionMatrix = new Matrix4().setPerspective(this.fov, this.aspect, this.near, this.far);\r\n        // this.updateMatrixWorld ();\r\n    }\r\n\r\n    updateOption(){\r\n        var targetV3 = new Vector3().fromArray(this.target);\r\n        var positionV3 = new Vector3().fromArray(this.position);\r\n        var upV3 = new Vector3().fromArray(this.up);\r\n\r\n        var directionV3 = new Vector3().subVectors(targetV3, positionV3).normalize();\r\n        this.direction = directionV3.toArray();\r\n\r\n        var rightV3 = new Vector3().crossVectors(directionV3, upV3).normalize();\r\n        this.right = rightV3.toArray();\r\n\r\n        // this.up = new Vector3().crossVectors(rightV3, directionV3).normalize().toArray();\r\n    }\r\n\r\n    setPosition(position){\r\n        this.position = position;\r\n        this.updateAll();\r\n    }\r\n\r\n    setTarget(target){\r\n        this.target = target;\r\n        this.updateAll();\r\n    }\r\n\r\n    setUp(up){\r\n        this.up = new Vector3().fromArray(up).normalize().toArray();\r\n        this.updateAll();\r\n    }\r\n\r\n\r\n\r\n    updateVPMatrix(){\r\n        this.VPmatrix = new Matrix4().setPerspective(this.fov, this.aspect, this.near, this.far);\r\n        var Vmatrix = new Matrix4().getInverse(this.matrix);\r\n        this.VPmatrix.concat(Vmatrix);\r\n        //等价\r\n        // this.VPmatrix.lookAt2(this.position[0],this.position[1],this.position[2], this.target[0],this.target[1],this.target[2], this.up[0],this.up[1],this.up[2]);\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var camera_Camera = (Camera_Camera);\r\n\r\n\n// CONCATENATED MODULE: ./src/util/webgl-utils.js\n/*\r\n * Copyright 2010, Google Inc.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are\r\n * met:\r\n *\r\n *     * Redistributions of source code must retain the above copyright\r\n * notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above\r\n * copyright notice, this list of conditions and the following disclaimer\r\n * in the documentation and/or other materials provided with the\r\n * distribution.\r\n *     * Neither the name of Google Inc. nor the names of its\r\n * contributors may be used to endorse or promote products derived from\r\n * this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n\r\n/**\r\n * @fileoverview This file contains functions every webgl program will need\r\n * a version of one way or another.\r\n *\r\n * Instead of setting up a context manually it is recommended to\r\n * use. This will check for success or failure. On failure it\r\n * will attempt to present an approriate message to the user.\r\n *\r\n *       gl = WebGLUtils.setupWebGL(canvas);\r\n *\r\n * For animated WebGL apps use of setTimeout or setInterval are\r\n * discouraged. It is recommended you structure your rendering\r\n * loop like this.\r\n *\r\n *       function render() {\r\n *         window.requestAnimationFrame(render, canvas);\r\n *\r\n *         // do rendering\r\n *         ...\r\n *       }\r\n *       render();\r\n *\r\n * This will call your rendering function up to the refresh rate\r\n * of your display but will stop rendering if your app is not\r\n * visible.\r\n */\r\n\r\nvar WebGLUtils = function() {\r\n\r\n/**\r\n * Creates the HTLM for a failure message\r\n * @param {string} canvasContainerId id of container of th\r\n *        canvas.\r\n * @return {string} The html.\r\n */\r\nvar makeFailHTML = function(msg) {\r\n  return '' +\r\n        '<div style=\"margin: auto; width:500px;z-index:10000;margin-top:20em;text-align:center;\">' + msg + '</div>';\r\n  return '' +\r\n    '<table style=\"background-color: #8CE; width: 100%; height: 100%;\"><tr>' +\r\n    '<td align=\"center\">' +\r\n    '<div style=\"display: table-cell; vertical-align: middle;\">' +\r\n    '<div style=\"\">' + msg + '</div>' +\r\n    '</div>' +\r\n    '</td></tr></table>';\r\n};\r\n\r\n/**\r\n * Mesasge for getting a webgl browser\r\n * @type {string}\r\n */\r\nvar GET_A_WEBGL_BROWSER = '' +\r\n  'This page requires a browser that supports WebGL.<br/>' +\r\n  '<a href=\"http://get.webgl.org\">Click here to upgrade your browser.</a>';\r\n\r\n/**\r\n * Mesasge for need better hardware\r\n * @type {string}\r\n */\r\nvar OTHER_PROBLEM = '' +\r\n  \"It doesn't appear your computer can support WebGL.<br/>\" +\r\n  '<a href=\"http://get.webgl.org\">Click here for more information.</a>';\r\n\r\n/**\r\n * Creates a webgl context. If creation fails it will\r\n * change the contents of the container of the <canvas>\r\n * tag to an error message with the correct links for WebGL.\r\n * @param {Element} canvas. The canvas element to create a\r\n *     context from.\r\n * @param {WebGLContextCreationAttirbutes} opt_attribs Any\r\n *     creation attributes you want to pass in.\r\n * @param {function:(msg)} opt_onError An function to call\r\n *     if there is an error during creation.\r\n * @return {WebGLRenderingContext} The created context.\r\n */\r\nvar setupWebGL = function(canvas, opt_attribs, opt_onError) {\r\n  function handleCreationError(msg) {\r\n      var container = document.getElementsByTagName(\"body\")[0];\r\n    //var container = canvas.parentNode;\r\n    if (container) {\r\n      var str = window.WebGLRenderingContext ?\r\n           OTHER_PROBLEM :\r\n           GET_A_WEBGL_BROWSER;\r\n      if (msg) {\r\n        str += \"<br/><br/>Status: \" + msg;\r\n      }\r\n      container.innerHTML = makeFailHTML(str);\r\n    }\r\n  };\r\n\r\n  opt_onError = opt_onError || handleCreationError;\r\n\r\n  if (canvas.addEventListener) {\r\n    canvas.addEventListener(\"webglcontextcreationerror\", function(event) {\r\n          opt_onError(event.statusMessage);\r\n        }, false);\r\n  }\r\n  var context = create3DContext(canvas, opt_attribs);\r\n  if (!context) {\r\n    if (!window.WebGLRenderingContext) {\r\n      opt_onError(\"\");\r\n    } else {\r\n      opt_onError(\"\");\r\n    }\r\n  }\r\n\r\n  return context;\r\n};\r\n\r\n/**\r\n * Creates a webgl context.\r\n * @param {!Canvas} canvas The canvas tag to get context\r\n *     from. If one is not passed in one will be created.\r\n * @return {!WebGLContext} The created context.\r\n */\r\nvar create3DContext = function(canvas, opt_attribs) {\r\n  var names = [\"webgl\", \"experimental-webgl\", \"webkit-3d\", \"moz-webgl\"];\r\n  var context = null;\r\n  for (var ii = 0; ii < names.length; ++ii) {\r\n    try {\r\n      context = canvas.getContext(names[ii], opt_attribs);\r\n    } catch(e) {}\r\n    if (context) {\r\n      break;\r\n    }\r\n  }\r\n  return context;\r\n}\r\n\r\nreturn {\r\n  create3DContext: create3DContext,\r\n  setupWebGL: setupWebGL\r\n};\r\n}();\r\n\r\n/**\r\n * Provides requestAnimationFrame in a cross browser\r\n * way.\r\n */\r\nif (!window.requestAnimationFrame) {\r\n  window.requestAnimationFrame = (function() {\r\n    return window.requestAnimationFrame ||\r\n           window.webkitRequestAnimationFrame ||\r\n           window.mozRequestAnimationFrame ||\r\n           window.oRequestAnimationFrame ||\r\n           window.msRequestAnimationFrame ||\r\n           function(/* function FrameRequestCallback */ callback, /* DOMElement Element */ element) {\r\n             window.setTimeout(callback, 1000/60);\r\n           };\r\n  })();\r\n}\r\n\r\n/** * ERRATA: 'cancelRequestAnimationFrame' renamed to 'cancelAnimationFrame' to reflect an update to the W3C Animation-Timing Spec. \r\n * \r\n * Cancels an animation frame request. \r\n * Checks for cross-browser support, falls back to clearTimeout. \r\n * @param {number}  Animation frame request. */\r\nif (!window.cancelAnimationFrame) {\r\n  window.cancelAnimationFrame = (window.cancelRequestAnimationFrame ||\r\n                                 window.webkitCancelAnimationFrame || window.webkitCancelRequestAnimationFrame ||\r\n                                 window.mozCancelAnimationFrame || window.mozCancelRequestAnimationFrame ||\r\n                                 window.msCancelAnimationFrame || window.msCancelRequestAnimationFrame ||\r\n                                 window.oCancelAnimationFrame || window.oCancelRequestAnimationFrame ||\r\n                                 window.clearTimeout);\r\n}\r\n\r\n/* harmony default export */ var webgl_utils = (WebGLUtils);\n// CONCATENATED MODULE: ./src/util/webgl-debug.js\n//Copyright (c) 2009 The Chromium Authors. All rights reserved.\r\n//Use of this source code is governed by a BSD-style license that can be\r\n//found in the LICENSE file.\r\n\r\n// Various functions for helping debug WebGL apps.\r\n\r\nvar WebGLDebugUtils = function() {\r\n\r\n/**\r\n * Wrapped logging function.\r\n * @param {string} msg Message to log.\r\n */\r\nvar log = function(msg) {\r\n  if (window.console && window.console.log) {\r\n    window.console.log(msg);\r\n  }\r\n};\r\n\r\n/**\r\n * Which arguements are enums.\r\n * @type {!Object.<number, string>}\r\n */\r\nvar glValidEnumContexts = {\r\n\r\n  // Generic setters and getters\r\n\r\n  'enable': { 0:true },\r\n  'disable': { 0:true },\r\n  'getParameter': { 0:true },\r\n\r\n  // Rendering\r\n\r\n  'drawArrays': { 0:true },\r\n  'drawElements': { 0:true, 2:true },\r\n\r\n  // Shaders\r\n\r\n  'createShader': { 0:true },\r\n  'getShaderParameter': { 1:true },\r\n  'getProgramParameter': { 1:true },\r\n\r\n  // Vertex attributes\r\n\r\n  'getVertexAttrib': { 1:true },\r\n  'vertexAttribPointer': { 2:true },\r\n\r\n  // Textures\r\n\r\n  'bindTexture': { 0:true },\r\n  'activeTexture': { 0:true },\r\n  'getTexParameter': { 0:true, 1:true },\r\n  'texParameterf': { 0:true, 1:true },\r\n  'texParameteri': { 0:true, 1:true, 2:true },\r\n  'texImage2D': { 0:true, 2:true, 6:true, 7:true },\r\n  'texSubImage2D': { 0:true, 6:true, 7:true },\r\n  'copyTexImage2D': { 0:true, 2:true },\r\n  'copyTexSubImage2D': { 0:true },\r\n  'generateMipmap': { 0:true },\r\n\r\n  // Buffer objects\r\n\r\n  'bindBuffer': { 0:true },\r\n  'bufferData': { 0:true, 2:true },\r\n  'bufferSubData': { 0:true },\r\n  'getBufferParameter': { 0:true, 1:true },\r\n\r\n  // Renderbuffers and framebuffers\r\n\r\n  'pixelStorei': { 0:true, 1:true },\r\n  'readPixels': { 4:true, 5:true },\r\n  'bindRenderbuffer': { 0:true },\r\n  'bindFramebuffer': { 0:true },\r\n  'checkFramebufferStatus': { 0:true },\r\n  'framebufferRenderbuffer': { 0:true, 1:true, 2:true },\r\n  'framebufferTexture2D': { 0:true, 1:true, 2:true },\r\n  'getFramebufferAttachmentParameter': { 0:true, 1:true, 2:true },\r\n  'getRenderbufferParameter': { 0:true, 1:true },\r\n  'renderbufferStorage': { 0:true, 1:true },\r\n\r\n  // Frame buffer operations (clear, blend, depth test, stencil)\r\n\r\n  'clear': { 0:true },\r\n  'depthFunc': { 0:true },\r\n  'blendFunc': { 0:true, 1:true },\r\n  'blendFuncSeparate': { 0:true, 1:true, 2:true, 3:true },\r\n  'blendEquation': { 0:true },\r\n  'blendEquationSeparate': { 0:true, 1:true },\r\n  'stencilFunc': { 0:true },\r\n  'stencilFuncSeparate': { 0:true, 1:true },\r\n  'stencilMaskSeparate': { 0:true },\r\n  'stencilOp': { 0:true, 1:true, 2:true },\r\n  'stencilOpSeparate': { 0:true, 1:true, 2:true, 3:true },\r\n\r\n  // Culling\r\n\r\n  'cullFace': { 0:true },\r\n  'frontFace': { 0:true },\r\n};\r\n\r\n/**\r\n * Map of numbers to names.\r\n * @type {Object}\r\n */\r\nvar glEnums = null;\r\n\r\n/**\r\n * Initializes this module. Safe to call more than once.\r\n * @param {!WebGLRenderingContext} ctx A WebGL context. If\r\n *    you have more than one context it doesn't matter which one\r\n *    you pass in, it is only used to pull out constants.\r\n */\r\nfunction init(ctx) {\r\n  if (glEnums == null) {\r\n    glEnums = { };\r\n    for (var propertyName in ctx) {\r\n      if (typeof ctx[propertyName] == 'number') {\r\n        glEnums[ctx[propertyName]] = propertyName;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Checks the utils have been initialized.\r\n */\r\nfunction checkInit() {\r\n  if (glEnums == null) {\r\n    throw 'WebGLDebugUtils.init(ctx) not called';\r\n  }\r\n}\r\n\r\n/**\r\n * Returns true or false if value matches any WebGL enum\r\n * @param {*} value Value to check if it might be an enum.\r\n * @return {boolean} True if value matches one of the WebGL defined enums\r\n */\r\nfunction mightBeEnum(value) {\r\n  checkInit();\r\n  return (glEnums[value] !== undefined);\r\n}\r\n\r\n/**\r\n * Gets an string version of an WebGL enum.\r\n *\r\n * Example:\r\n *   var str = WebGLDebugUtil.glEnumToString(ctx.getError());\r\n *\r\n * @param {number} value Value to return an enum for\r\n * @return {string} The string version of the enum.\r\n */\r\nfunction glEnumToString(value) {\r\n  checkInit();\r\n  var name = glEnums[value];\r\n  return (name !== undefined) ? name :\r\n      (\"*UNKNOWN WebGL ENUM (0x\" + value.toString(16) + \")\");\r\n}\r\n\r\n/**\r\n * Returns the string version of a WebGL argument.\r\n * Attempts to convert enum arguments to strings.\r\n * @param {string} functionName the name of the WebGL function.\r\n * @param {number} argumentIndx the index of the argument.\r\n * @param {*} value The value of the argument.\r\n * @return {string} The value as a string.\r\n */\r\nfunction glFunctionArgToString(functionName, argumentIndex, value) {\r\n  var funcInfo = glValidEnumContexts[functionName];\r\n  if (funcInfo !== undefined) {\r\n    if (funcInfo[argumentIndex]) {\r\n      return glEnumToString(value);\r\n    }\r\n  }\r\n  return value.toString();\r\n}\r\n\r\n/**\r\n * Given a WebGL context returns a wrapped context that calls\r\n * gl.getError after every command and calls a function if the\r\n * result is not gl.NO_ERROR.\r\n *\r\n * @param {!WebGLRenderingContext} ctx The webgl context to\r\n *        wrap.\r\n * @param {!function(err, funcName, args): void} opt_onErrorFunc\r\n *        The function to call when gl.getError returns an\r\n *        error. If not specified the default function calls\r\n *        console.log with a message.\r\n */\r\nfunction makeDebugContext(ctx, opt_onErrorFunc) {\r\n  init(ctx);\r\n  opt_onErrorFunc = opt_onErrorFunc || function(err, functionName, args) {\r\n        // apparently we can't do args.join(\",\");\r\n        var argStr = \"\";\r\n        for (var ii = 0; ii < args.length; ++ii) {\r\n          argStr += ((ii == 0) ? '' : ', ') +\r\n              glFunctionArgToString(functionName, ii, args[ii]);\r\n        }\r\n        log(\"WebGL error \"+ glEnumToString(err) + \" in \"+ functionName +\r\n            \"(\" + argStr + \")\");\r\n      };\r\n\r\n  // Holds booleans for each GL error so after we get the error ourselves\r\n  // we can still return it to the client app.\r\n  var glErrorShadow = { };\r\n\r\n  // Makes a function that calls a WebGL function and then calls getError.\r\n  function makeErrorWrapper(ctx, functionName) {\r\n    return function() {\r\n      var result = ctx[functionName].apply(ctx, arguments);\r\n      var err = ctx.getError();\r\n      if (err != 0) {\r\n        glErrorShadow[err] = true;\r\n        opt_onErrorFunc(err, functionName, arguments);\r\n      }\r\n      return result;\r\n    };\r\n  }\r\n\r\n  // Make a an object that has a copy of every property of the WebGL context\r\n  // but wraps all functions.\r\n  var wrapper = {};\r\n  for (var propertyName in ctx) {\r\n    if (typeof ctx[propertyName] == 'function') {\r\n       wrapper[propertyName] = makeErrorWrapper(ctx, propertyName);\r\n     } else {\r\n       wrapper[propertyName] = ctx[propertyName];\r\n     }\r\n  }\r\n\r\n  // Override the getError function with one that returns our saved results.\r\n  wrapper.getError = function() {\r\n    for (var err in glErrorShadow) {\r\n      if (glErrorShadow[err]) {\r\n        glErrorShadow[err] = false;\r\n        return err;\r\n      }\r\n    }\r\n    return ctx.NO_ERROR;\r\n  };\r\n\r\n  return wrapper;\r\n}\r\n\r\nfunction resetToInitialState(ctx) {\r\n  var numAttribs = ctx.getParameter(ctx.MAX_VERTEX_ATTRIBS);\r\n  var tmp = ctx.createBuffer();\r\n  ctx.bindBuffer(ctx.ARRAY_BUFFER, tmp);\r\n  for (var ii = 0; ii < numAttribs; ++ii) {\r\n    ctx.disableVertexAttribArray(ii);\r\n    ctx.vertexAttribPointer(ii, 4, ctx.FLOAT, false, 0, 0);\r\n    ctx.vertexAttrib1f(ii, 0);\r\n  }\r\n  ctx.deleteBuffer(tmp);\r\n\r\n  var numTextureUnits = ctx.getParameter(ctx.MAX_TEXTURE_IMAGE_UNITS);\r\n  for (var ii = 0; ii < numTextureUnits; ++ii) {\r\n    ctx.activeTexture(ctx.TEXTURE0 + ii);\r\n    ctx.bindTexture(ctx.TEXTURE_CUBE_MAP, null);\r\n    ctx.bindTexture(ctx.TEXTURE_2D, null);\r\n  }\r\n\r\n  ctx.activeTexture(ctx.TEXTURE0);\r\n  ctx.useProgram(null);\r\n  ctx.bindBuffer(ctx.ARRAY_BUFFER, null);\r\n  ctx.bindBuffer(ctx.ELEMENT_ARRAY_BUFFER, null);\r\n  ctx.bindFramebuffer(ctx.FRAMEBUFFER, null);\r\n  ctx.bindRenderbuffer(ctx.RENDERBUFFER, null);\r\n  ctx.disable(ctx.BLEND);\r\n  ctx.disable(ctx.CULL_FACE);\r\n  ctx.disable(ctx.DEPTH_TEST);\r\n  ctx.disable(ctx.DITHER);\r\n  ctx.disable(ctx.SCISSOR_TEST);\r\n  ctx.blendColor(0, 0, 0, 0);\r\n  ctx.blendEquation(ctx.FUNC_ADD);\r\n  ctx.blendFunc(ctx.ONE, ctx.ZERO);\r\n  ctx.clearColor(0, 0, 0, 0);\r\n  ctx.clearDepth(1);\r\n  ctx.clearStencil(-1);\r\n  ctx.colorMask(true, true, true, true);\r\n  ctx.cullFace(ctx.BACK);\r\n  ctx.depthFunc(ctx.LESS);\r\n  ctx.depthMask(true);\r\n  ctx.depthRange(0, 1);\r\n  ctx.frontFace(ctx.CCW);\r\n  ctx.hint(ctx.GENERATE_MIPMAP_HINT, ctx.DONT_CARE);\r\n  ctx.lineWidth(1);\r\n  ctx.pixelStorei(ctx.PACK_ALIGNMENT, 4);\r\n  ctx.pixelStorei(ctx.UNPACK_ALIGNMENT, 4);\r\n  ctx.pixelStorei(ctx.UNPACK_FLIP_Y_WEBGL, false);\r\n  ctx.pixelStorei(ctx.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n  // TODO: Delete this IF.\r\n  if (ctx.UNPACK_COLORSPACE_CONVERSION_WEBGL) {\r\n    ctx.pixelStorei(ctx.UNPACK_COLORSPACE_CONVERSION_WEBGL, ctx.BROWSER_DEFAULT_WEBGL);\r\n  }\r\n  ctx.polygonOffset(0, 0);\r\n  ctx.sampleCoverage(1, false);\r\n  ctx.scissor(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n  ctx.stencilFunc(ctx.ALWAYS, 0, 0xFFFFFFFF);\r\n  ctx.stencilMask(0xFFFFFFFF);\r\n  ctx.stencilOp(ctx.KEEP, ctx.KEEP, ctx.KEEP);\r\n  ctx.viewport(0, 0, ctx.canvas.clientWidth, ctx.canvas.clientHeight);\r\n  ctx.clear(ctx.COLOR_BUFFER_BIT | ctx.DEPTH_BUFFER_BIT | ctx.STENCIL_BUFFER_BIT);\r\n\r\n  // TODO: This should NOT be needed but Firefox fails with 'hint'\r\n  while(ctx.getError());\r\n}\r\n\r\nfunction makeLostContextSimulatingContext(ctx) {\r\n  var wrapper_ = {};\r\n  var contextId_ = 1;\r\n  var contextLost_ = false;\r\n  var resourceId_ = 0;\r\n  var resourceDb_ = [];\r\n  var onLost_ = undefined;\r\n  var onRestored_ = undefined;\r\n  var nextOnRestored_ = undefined;\r\n\r\n  // Holds booleans for each GL error so can simulate errors.\r\n  var glErrorShadow_ = { };\r\n\r\n  function isWebGLObject(obj) {\r\n    //return false;\r\n    return (obj instanceof WebGLBuffer ||\r\n            obj instanceof WebGLFramebuffer ||\r\n            obj instanceof WebGLProgram ||\r\n            obj instanceof WebGLRenderbuffer ||\r\n            obj instanceof WebGLShader ||\r\n            obj instanceof WebGLTexture);\r\n  }\r\n\r\n  function checkResources(args) {\r\n    for (var ii = 0; ii < args.length; ++ii) {\r\n      var arg = args[ii];\r\n      if (isWebGLObject(arg)) {\r\n        return arg.__webglDebugContextLostId__ == contextId_;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function clearErrors() {\r\n    var k = Object.keys(glErrorShadow_);\r\n    for (var ii = 0; ii < k.length; ++ii) {\r\n      delete glErrorShdow_[k];\r\n    }\r\n  }\r\n\r\n  // Makes a function that simulates WebGL when out of context.\r\n  function makeLostContextWrapper(ctx, functionName) {\r\n    var f = ctx[functionName];\r\n    return function() {\r\n      // Only call the functions if the context is not lost.\r\n      if (!contextLost_) {\r\n        if (!checkResources(arguments)) {\r\n          glErrorShadow_[ctx.INVALID_OPERATION] = true;\r\n          return;\r\n        }\r\n        var result = f.apply(ctx, arguments);\r\n        return result;\r\n      }\r\n    };\r\n  }\r\n\r\n  for (var propertyName in ctx) {\r\n    if (typeof ctx[propertyName] == 'function') {\r\n       wrapper_[propertyName] = makeLostContextWrapper(ctx, propertyName);\r\n     } else {\r\n       wrapper_[propertyName] = ctx[propertyName];\r\n     }\r\n  }\r\n\r\n  function makeWebGLContextEvent(statusMessage) {\r\n    return {statusMessage: statusMessage};\r\n  }\r\n\r\n  function freeResources() {\r\n    for (var ii = 0; ii < resourceDb_.length; ++ii) {\r\n      var resource = resourceDb_[ii];\r\n      if (resource instanceof WebGLBuffer) {\r\n        ctx.deleteBuffer(resource);\r\n      } else if (resource instanceof WebctxFramebuffer) {\r\n        ctx.deleteFramebuffer(resource);\r\n      } else if (resource instanceof WebctxProgram) {\r\n        ctx.deleteProgram(resource);\r\n      } else if (resource instanceof WebctxRenderbuffer) {\r\n        ctx.deleteRenderbuffer(resource);\r\n      } else if (resource instanceof WebctxShader) {\r\n        ctx.deleteShader(resource);\r\n      } else if (resource instanceof WebctxTexture) {\r\n        ctx.deleteTexture(resource);\r\n      }\r\n    }\r\n  }\r\n\r\n  wrapper_.loseContext = function() {\r\n    if (!contextLost_) {\r\n      contextLost_ = true;\r\n      ++contextId_;\r\n      while (ctx.getError());\r\n      clearErrors();\r\n      glErrorShadow_[ctx.CONTEXT_LOST_WEBGL] = true;\r\n      setTimeout(function() {\r\n          if (onLost_) {\r\n            onLost_(makeWebGLContextEvent(\"context lost\"));\r\n          }\r\n        }, 0);\r\n    }\r\n  };\r\n\r\n  wrapper_.restoreContext = function() {\r\n    if (contextLost_) {\r\n      if (onRestored_) {\r\n        setTimeout(function() {\r\n            freeResources();\r\n            resetToInitialState(ctx);\r\n            contextLost_ = false;\r\n            if (onRestored_) {\r\n              var callback = onRestored_;\r\n              onRestored_ = nextOnRestored_;\r\n              nextOnRestored_ = undefined;\r\n              callback(makeWebGLContextEvent(\"context restored\"));\r\n            }\r\n          }, 0);\r\n      } else {\r\n        throw \"You can not restore the context without a listener\"\r\n      }\r\n    }\r\n  };\r\n\r\n  // Wrap a few functions specially.\r\n  wrapper_.getError = function() {\r\n    if (!contextLost_) {\r\n      var err;\r\n      while (err = ctx.getError()) {\r\n        glErrorShadow_[err] = true;\r\n      }\r\n    }\r\n    for (var err in glErrorShadow_) {\r\n      if (glErrorShadow_[err]) {\r\n        delete glErrorShadow_[err];\r\n        return err;\r\n      }\r\n    }\r\n    return ctx.NO_ERROR;\r\n  };\r\n\r\n  var creationFunctions = [\r\n    \"createBuffer\",\r\n    \"createFramebuffer\",\r\n    \"createProgram\",\r\n    \"createRenderbuffer\",\r\n    \"createShader\",\r\n    \"createTexture\"\r\n  ];\r\n  for (var ii = 0; ii < creationFunctions.length; ++ii) {\r\n    var functionName = creationFunctions[ii];\r\n    wrapper_[functionName] = function(f) {\r\n      return function() {\r\n        if (contextLost_) {\r\n          return null;\r\n        }\r\n        var obj = f.apply(ctx, arguments);\r\n        obj.__webglDebugContextLostId__ = contextId_;\r\n        resourceDb_.push(obj);\r\n        return obj;\r\n      };\r\n    }(ctx[functionName]);\r\n  }\r\n\r\n  var functionsThatShouldReturnNull = [\r\n    \"getActiveAttrib\",\r\n    \"getActiveUniform\",\r\n    \"getBufferParameter\",\r\n    \"getContextAttributes\",\r\n    \"getAttachedShaders\",\r\n    \"getFramebufferAttachmentParameter\",\r\n    \"getParameter\",\r\n    \"getProgramParameter\",\r\n    \"getProgramInfoLog\",\r\n    \"getRenderbufferParameter\",\r\n    \"getShaderParameter\",\r\n    \"getShaderInfoLog\",\r\n    \"getShaderSource\",\r\n    \"getTexParameter\",\r\n    \"getUniform\",\r\n    \"getUniformLocation\",\r\n    \"getVertexAttrib\"\r\n  ];\r\n  for (var ii = 0; ii < functionsThatShouldReturnNull.length; ++ii) {\r\n    var functionName = functionsThatShouldReturnNull[ii];\r\n    wrapper_[functionName] = function(f) {\r\n      return function() {\r\n        if (contextLost_) {\r\n          return null;\r\n        }\r\n        return f.apply(ctx, arguments);\r\n      }\r\n    }(wrapper_[functionName]);\r\n  }\r\n\r\n  var isFunctions = [\r\n    \"isBuffer\",\r\n    \"isEnabled\",\r\n    \"isFramebuffer\",\r\n    \"isProgram\",\r\n    \"isRenderbuffer\",\r\n    \"isShader\",\r\n    \"isTexture\"\r\n  ];\r\n  for (var ii = 0; ii < isFunctions.length; ++ii) {\r\n    var functionName = isFunctions[ii];\r\n    wrapper_[functionName] = function(f) {\r\n      return function() {\r\n        if (contextLost_) {\r\n          return false;\r\n        }\r\n        return f.apply(ctx, arguments);\r\n      }\r\n    }(wrapper_[functionName]);\r\n  }\r\n\r\n  wrapper_.checkFramebufferStatus = function(f) {\r\n    return function() {\r\n      if (contextLost_) {\r\n        return ctx.FRAMEBUFFER_UNSUPPORTED;\r\n      }\r\n      return f.apply(ctx, arguments);\r\n    };\r\n  }(wrapper_.checkFramebufferStatus);\r\n\r\n  wrapper_.getAttribLocation = function(f) {\r\n    return function() {\r\n      if (contextLost_) {\r\n        return -1;\r\n      }\r\n      return f.apply(ctx, arguments);\r\n    };\r\n  }(wrapper_.getAttribLocation);\r\n\r\n  wrapper_.getVertexAttribOffset = function(f) {\r\n    return function() {\r\n      if (contextLost_) {\r\n        return 0;\r\n      }\r\n      return f.apply(ctx, arguments);\r\n    };\r\n  }(wrapper_.getVertexAttribOffset);\r\n\r\n  wrapper_.isContextLost = function() {\r\n    return contextLost_;\r\n  };\r\n\r\n  function wrapEvent(listener) {\r\n    if (typeof(listener) == \"function\") {\r\n      return listener;\r\n    } else {\r\n      return function(info) {\r\n        listener.handleEvent(info);\r\n      }\r\n    }\r\n  }\r\n\r\n  wrapper_.registerOnContextLostListener = function(listener) {\r\n    onLost_ = wrapEvent(listener);\r\n  };\r\n\r\n  wrapper_.registerOnContextRestoredListener = function(listener) {\r\n    if (contextLost_) {\r\n      nextOnRestored_ = wrapEvent(listener);\r\n    } else {\r\n      onRestored_ = wrapEvent(listener);\r\n    }\r\n  }\r\n\r\n  return wrapper_;\r\n}\r\n\r\nreturn {\r\n  /**\r\n   * Initializes this module. Safe to call more than once.\r\n   * @param {!WebGLRenderingContext} ctx A WebGL context. If\r\n   *    you have more than one context it doesn't matter which one\r\n   *    you pass in, it is only used to pull out constants.\r\n   */\r\n  'init': init,\r\n\r\n  /**\r\n   * Returns true or false if value matches any WebGL enum\r\n   * @param {*} value Value to check if it might be an enum.\r\n   * @return {boolean} True if value matches one of the WebGL defined enums\r\n   */\r\n  'mightBeEnum': mightBeEnum,\r\n\r\n  /**\r\n   * Gets an string version of an WebGL enum.\r\n   *\r\n   * Example:\r\n   *   WebGLDebugUtil.init(ctx);\r\n   *   var str = WebGLDebugUtil.glEnumToString(ctx.getError());\r\n   *\r\n   * @param {number} value Value to return an enum for\r\n   * @return {string} The string version of the enum.\r\n   */\r\n  'glEnumToString': glEnumToString,\r\n\r\n  /**\r\n   * Converts the argument of a WebGL function to a string.\r\n   * Attempts to convert enum arguments to strings.\r\n   *\r\n   * Example:\r\n   *   WebGLDebugUtil.init(ctx);\r\n   *   var str = WebGLDebugUtil.glFunctionArgToString('bindTexture', 0, gl.TEXTURE_2D);\r\n   *\r\n   * would return 'TEXTURE_2D'\r\n   *\r\n   * @param {string} functionName the name of the WebGL function.\r\n   * @param {number} argumentIndx the index of the argument.\r\n   * @param {*} value The value of the argument.\r\n   * @return {string} The value as a string.\r\n   */\r\n  'glFunctionArgToString': glFunctionArgToString,\r\n\r\n  /**\r\n   * Given a WebGL context returns a wrapped context that calls\r\n   * gl.getError after every command and calls a function if the\r\n   * result is not NO_ERROR.\r\n   *\r\n   * You can supply your own function if you want. For example, if you'd like\r\n   * an exception thrown on any GL error you could do this\r\n   *\r\n   *    function throwOnGLError(err, funcName, args) {\r\n   *      throw WebGLDebugUtils.glEnumToString(err) + \" was caused by call to\" +\r\n   *            funcName;\r\n   *    };\r\n   *\r\n   *    ctx = WebGLDebugUtils.makeDebugContext(\r\n   *        canvas.getContext(\"webgl\"), throwOnGLError);\r\n   *\r\n   * @param {!WebGLRenderingContext} ctx The webgl context to wrap.\r\n   * @param {!function(err, funcName, args): void} opt_onErrorFunc The function\r\n   *     to call when gl.getError returns an error. If not specified the default\r\n   *     function calls console.log with a message.\r\n   */\r\n  'makeDebugContext': makeDebugContext,\r\n\r\n  /**\r\n   * Given a WebGL context returns a wrapped context that adds 4\r\n   * functions.\r\n   *\r\n   * ctx.loseContext:\r\n   *   simulates a lost context event.\r\n   *\r\n   * ctx.restoreContext:\r\n   *   simulates the context being restored.\r\n   *\r\n   * ctx.registerOnContextLostListener(listener):\r\n   *   lets you register a listener for context lost. Use instead\r\n   *   of addEventListener('webglcontextlostevent', listener);\r\n   *\r\n   * ctx.registerOnContextRestoredListener(listener):\r\n   *   lets you register a listener for context restored. Use\r\n   *   instead of addEventListener('webglcontextrestored',\r\n   *   listener);\r\n   *\r\n   * @param {!WebGLRenderingContext} ctx The webgl context to wrap.\r\n   */\r\n  'makeLostContextSimulatingContext': makeLostContextSimulatingContext,\r\n\r\n  /**\r\n   * Resets a context to the initial state.\r\n   * @param {!WebGLRenderingContext} ctx The webgl context to\r\n   *     reset.\r\n   */\r\n  'resetToInitialState': resetToInitialState\r\n};\r\n\r\n}();\r\n\r\n/* harmony default export */ var webgl_debug = (WebGLDebugUtils);\n// CONCATENATED MODULE: ./src/util/Util.js\n\r\n\r\n\r\nconst Util = {\r\n    initShaders: function(gl, vshader, fshader) {\r\n        var program = Util.createProgram(gl, vshader, fshader);\r\n        if (!program) {\r\n            console.log('Failed to create program');\r\n            return false;\r\n        }\r\n\r\n        gl.useProgram(program);\r\n        gl.program = program;\r\n\r\n        return true;\r\n    },\r\n\r\n    createProgram: function(gl, vshader, fshader) {\r\n        // Create shader object\r\n        var vertexShader = Util.loadShader(gl, gl.VERTEX_SHADER, vshader);\r\n        var fragmentShader = Util.loadShader(gl, gl.FRAGMENT_SHADER, fshader);\r\n        if (!vertexShader || !fragmentShader) {\r\n            return null;\r\n        }\r\n\r\n        // Create a program object\r\n        var program = gl.createProgram();\r\n        if (!program) {\r\n            return null;\r\n        }\r\n\r\n        // Attach the shader objects\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n\r\n        // Link the program object\r\n        gl.linkProgram(program);\r\n\r\n        // Check the result of linking\r\n        var linked = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n        if (!linked) {\r\n            var error = gl.getProgramInfoLog(program);\r\n            console.log('Failed to link program: ' + error);\r\n            gl.deleteProgram(program);\r\n            gl.deleteShader(fragmentShader);\r\n            gl.deleteShader(vertexShader);\r\n            return null;\r\n        }\r\n        return program;\r\n    },\r\n\r\n    loadShader: function(gl, type, source) {\r\n        // Create shader object\r\n        var shader = gl.createShader(type);\r\n        if (shader == null) {\r\n            console.log('unable to create shader');\r\n            return null;\r\n        }\r\n\r\n        // Set the shader program\r\n        gl.shaderSource(shader, source);\r\n\r\n        // Compile the shader\r\n        gl.compileShader(shader);\r\n\r\n        // Check the result of compilation\r\n        var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (!compiled) {\r\n            var error = gl.getShaderInfoLog(shader);\r\n            console.log('Failed to compile shader: ' + error);\r\n            gl.deleteShader(shader);\r\n            return null;\r\n        }\r\n\r\n        return shader;\r\n    },\r\n\r\n    getWebGLContext: function(canvas, opt_debug) {\r\n        // Get the rendering context for WebGL\r\n        var gl = webgl_utils.setupWebGL(canvas);\r\n        if (!gl) return null;\r\n\r\n        // if opt_debug is explicitly false, create the context for debugging\r\n        if (arguments.length < 2 || opt_debug) {\r\n            gl = webgl_debug.makeDebugContext(gl);\r\n        }\r\n\r\n        return gl;\r\n    },\r\n\r\n    create3DContext : function(canvas, opt_attribs) {\r\n        var names = [\"webgl\", \"experimental-webgl\", \"webkit-3d\", \"moz-webgl\"];\r\n        var context = null;\r\n        for (var ii = 0; ii < names.length; ++ii) {\r\n            try {\r\n                context = canvas.getContext(names[ii], opt_attribs);\r\n            } catch(e) {}\r\n            if (context) {\r\n                break;\r\n            }\r\n        }\r\n        return context;\r\n    }\r\n}\r\n\r\n/* harmony default export */ var util_Util = (Util);\n// CONCATENATED MODULE: ./src/light/Light.js\n\r\nclass Light {\r\n    constructor(param) {\r\n        this.type = 'Light';\r\n\r\n        param = param || {};\r\n        this.color = param.color || [1,1,1];\r\n        this.intensity = param.intensity !== undefined ? param.intensity : 1;\r\n        this.castShadow = param.castShadow;\r\n    }\r\n}\r\n\r\n/* harmony default export */ var light_Light = (Light);\r\n\n// CONCATENATED MODULE: ./src/light/AmbientLight.js\n\r\n\r\nclass AmbientLight_AmbientLight extends light_Light{\r\n    constructor(param) {\r\n        super(param);\r\n        this.type = 'AmbientLight';\r\n    }\r\n}\r\n\r\n/* harmony default export */ var light_AmbientLight = (AmbientLight_AmbientLight);\r\n\n// CONCATENATED MODULE: ./src/light/DirectionalLight.js\n\r\n\r\n\r\nclass DirectionalLight_DirectionalLight extends light_Light{\r\n    constructor(param) {\r\n        super(param);\r\n        this.type = 'DirectionalLight';\r\n        this.direction = [1,1,1];\r\n        this.setDirection(param.direction || [1,1,1]);\r\n    }\r\n\r\n    setDirection(direction){\r\n        this.direction =  new Vector3().fromArray(direction).normalize().toArray();\r\n    }\r\n}\r\n\r\n/* harmony default export */ var light_DirectionalLight = (DirectionalLight_DirectionalLight);\r\n\n// CONCATENATED MODULE: ./src/composer/Composer.js\nclass Composer{\r\n    constructor(){\r\n        this.vertexShader = [\r\n            'precision highp int;',\r\n            'precision highp float;',\r\n            'attribute vec4 a_Position;',\r\n            'attribute vec2 a_TexCoord;',\r\n            \"varying vec2 vUv;\",\r\n\r\n            \"void main() {\",\r\n\r\n            \"vUv = a_TexCoord;\",\r\n            \"gl_Position = a_Position;\",\r\n            \"gl_Position.z = 0.0;\",\r\n\r\n            \"}\"\r\n\r\n        ].join( \"\\n\" );\r\n\r\n        this.fragmentShader = [\r\n\r\n            '#define lineWidth 2',\r\n            'precision highp int;',\r\n            'precision highp float;',\r\n            \"uniform sampler2D tDiffuse;\",\r\n\r\n            \"varying vec2 vUv;\",\r\n\r\n            \"float getGray(vec4 color){\",\r\n            \"\treturn (color.r + color.g + color.b)/3.0;\",\r\n            // \"\treturn color.r*0.299 + color.g*0.587 + color.b*0.114;\",\r\n            \"}\",\r\n\r\n            \"float getEdgeGray(vec2 uv){\",\r\n            \"\tfloat step = 1.0/600.0;\",\r\n            \"\tfloat gray = 0.0;\",\r\n\r\n            \"\tgray += -1.0 * getGray(texture2D( tDiffuse, vec2(uv.x-step, uv.y-step) ));\",\r\n            \"\tgray += -1.0 * getGray(texture2D( tDiffuse, vec2(uv.x, uv.y-step) ));\",\r\n            \"\tgray += -1.0 * getGray(texture2D( tDiffuse, vec2(uv.x+step, uv.y-step) ));\",\r\n\r\n            \"\tgray += -1.0 * getGray(texture2D( tDiffuse, vec2(uv.x-step, uv.y) ));\",\r\n            \"\tgray += 8.0 * getGray(texture2D( tDiffuse, vec2(uv.x, uv.y) ));\",\r\n            \"\tgray += -1.0 * getGray(texture2D( tDiffuse, vec2(uv.x+step, uv.y) ));\",\r\n\r\n            \"\tgray += -1.0 * getGray(texture2D( tDiffuse, vec2(uv.x-step, uv.y+step) ));\",\r\n            \"\tgray += -1.0 * getGray(texture2D( tDiffuse, vec2(uv.x, uv.y+step) ));\",\r\n            \"\tgray += -1.0 * getGray(texture2D( tDiffuse, vec2(uv.x+step, uv.y+step) ));\",\r\n\r\n            \"\treturn floor(gray+0.5);\",\r\n            \"}\",\r\n\r\n            \"float getFinalGray(vec2 uv){\",\r\n            \"\tfloat step = 1.0/600.0;\",\r\n            \"\tfor(int i=-lineWidth; i<lineWidth; i++){\",\r\n            \"\t    for(int j=-lineWidth; j<lineWidth; j++){\",\r\n            \"\t        if(getEdgeGray(vec2(uv.x+step*float(i), uv.y+step*float(j)))>0.5){\",\r\n            \"\t            return 1.0;\",\r\n            \"\t        }\",\r\n            \"\t    }\",\r\n            \"\t}\",\r\n            \"\treturn 0.0;\",\r\n            \"}\",\r\n\r\n            \"void main() {\",\r\n\r\n            \"vec4 texel = texture2D( tDiffuse, vUv );\",\r\n            \"float gray = getFinalGray(vUv);\",\r\n\r\n            \"vec4 finalColor = vec4(0,0,1,1) * gray;\",\r\n\r\n            \"gl_FragColor = finalColor;\",\r\n\r\n            \"}\"\r\n\r\n        ].join( \"\\n\" );\r\n\r\n    }\r\n}\r\n\r\n/* harmony default export */ var composer_Composer = (Composer);\r\n\n// CONCATENATED MODULE: ./src/composer/ComposerOthers.js\n\r\n\r\nclass ComposerOthers_ComposerOthers extends composer_Composer{\r\n    constructor(){\r\n        super();\r\n\r\n        this.vertexShader =\r\n            'precision highp int;\\n' +\r\n            'precision highp float;\\n' +\r\n            'attribute vec4 a_Position;\\n' +\r\n            'uniform mat4 u_MvMatrix;\\n' +\r\n            'uniform mat4 u_PMatrix;\\n' +\r\n            'void main() {\\n' +\r\n            '  gl_Position = u_PMatrix * u_MvMatrix * a_Position;\\n' +\r\n            '}\\n';\r\n\r\n        this.fragmentShader = 'precision highp int;\\n' +\r\n            'precision highp float;\\n' +\r\n            'void main() {\\n' +\r\n            '  gl_FragColor = vec4(0,0,0,0);\\n' +\r\n            '}\\n';\r\n\r\n    }\r\n}\r\n\r\n/* harmony default export */ var composer_ComposerOthers = (ComposerOthers_ComposerOthers);\r\n\n// CONCATENATED MODULE: ./src/composer/ComposerScheme.js\n\r\n\r\nclass ComposerScheme_ComposerScheme extends composer_Composer{\r\n    constructor(){\r\n        super();\r\n\r\n        this.vertexShader =\r\n            'precision highp int;\\n' +\r\n            'precision highp float;\\n' +\r\n            'attribute vec4 a_Position;\\n' +\r\n            'uniform mat4 u_MvMatrix;\\n' +\r\n            'uniform mat4 u_PMatrix;\\n' +\r\n            'void main() {\\n' +\r\n            '  gl_Position = u_PMatrix * u_MvMatrix * a_Position;\\n' +\r\n            '}\\n';\r\n\r\n        this.fragmentShader = 'precision highp int;\\n' +\r\n            'precision highp float;\\n' +\r\n            'void main() {\\n' +\r\n            '  gl_FragColor = vec4(1,1,1,1);\\n' +\r\n            '}\\n';\r\n\r\n    }\r\n}\r\n\r\n/* harmony default export */ var composer_ComposerScheme = (ComposerScheme_ComposerScheme);\r\n\n// CONCATENATED MODULE: ./src/core/Renderer.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import md5 from 'js-md5';\r\n\r\nclass Renderer_Renderer {\r\n    constructor(param) {\r\n        var that = this;\r\n        param = param || {};\r\n        this.useShadow = param.useShadow == undefined ? true : param.useShadow;\r\n        this.useSkyBox = param.useSkyBox == undefined ? false : param.useSkyBox;\r\n        this.skyBox = param.skyBox || [];\r\n        this.useScheme = param.useScheme;\r\n        this.bufferList = [];\r\n\r\n        // this.programList = [];\r\n        this.programList = {};\r\n\r\n        this.curCameraPosition = null;\r\n        this.renderList = {\r\n            opacityList:[],\r\n            transparentList:[]\r\n        };\r\n\r\n        var canvas = document.getElementById('webgl');\r\n        var gl = this.gl = canvas.getContext('webgl');\r\n        // var gl = this.gl = Util.getWebGLContext(canvas);\r\n        if (!gl) {\r\n            console.log('Failed to get the rendering context for WebGL');\r\n            return;\r\n        }\r\n\r\n\r\n        this.shadowBufferSize = Math.pow(2, 12);\r\n        // Vertex shader program for generating a shadow map\r\n        var SHADOW_VSHADER_SOURCE =\r\n            'precision highp int;\\n' +\r\n            'precision highp float;\\n' +\r\n            'attribute vec4 a_Position;\\n' +\r\n            'uniform mat4 u_MvMatrix;\\n' +\r\n            'uniform mat4 u_PMatrix;\\n' +\r\n            'void main() {\\n' +\r\n            '  gl_Position = u_PMatrix * u_MvMatrix * a_Position;\\n' +\r\n            '}\\n';\r\n\r\n        // Fragment shader program for generating a shadow map\r\n        var SHADOW_FSHADER_SOURCE =\r\n            'precision highp int;\\n' +\r\n            'precision highp float;\\n' +\r\n            'void main() {\\n' +\r\n            '  const vec4 bitShift = vec4(1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0);\\n' +\r\n            '  const vec4 bitMask = vec4(1.0/256.0, 1.0/256.0, 1.0/256.0, 0.0);\\n' +\r\n            '  vec4 rgbaDepth = fract(gl_FragCoord.z * bitShift);\\n' + // Calculate the value stored into each byte\r\n            '  rgbaDepth -= rgbaDepth.gbaa * bitMask;\\n' + // Cut off the value which do not fit in 8 bits\r\n            '  gl_FragColor = rgbaDepth;\\n' +\r\n            // '  gl_FragColor = vec4(gl_FragCoord.z, 0.0, 0.0, 1.0);\\n' + // Write the z-value in R\r\n\r\n            '}\\n';\r\n\r\n        var shadowProgram = this.shadowProgram = util_Util.createProgram(gl, SHADOW_VSHADER_SOURCE, SHADOW_FSHADER_SOURCE);\r\n\r\n        var shadow_fbo = this.shadow_fbo = this.initFramebufferObject(gl, this.shadowBufferSize);\r\n        if (!shadow_fbo) {\r\n            console.log('Failed to initialize shadow_fbo');\r\n            return;\r\n        }\r\n\r\n        var composer = new composer_Composer();\r\n        var composerProgram = this.composerProgram = util_Util.createProgram(gl, composer.vertexShader, composer.fragmentShader);\r\n\r\n        var composerOther = new composer_ComposerOthers();\r\n        var composerOtherProgram = this.composerOtherProgram = util_Util.createProgram(gl, composerOther.vertexShader, composerOther.fragmentShader);\r\n\r\n        var composerScheme = new composer_ComposerScheme();\r\n        var composerSchemeProgram = this.composerSchemeProgram = util_Util.createProgram(gl, composerScheme.vertexShader, composerScheme.fragmentShader);\r\n\r\n        var scheme_fbo = this.scheme_fbo = this.initFramebufferObject(gl, 600);\r\n        if (!scheme_fbo) {\r\n            console.log('Failed to initialize scheme_fbo');\r\n            return;\r\n        }\r\n\r\n        //-----------------------------skyBox\r\n\r\n        var SKY_VSHADER =\r\n            'attribute vec4 a_position;\\n' +\r\n            'varying vec4 v_position;\\n' +\r\n            'void main() {\\n' +\r\n            '  v_position = a_position;\\n' +\r\n            '  gl_Position = a_position;\\n' +\r\n            '  gl_Position.z = 0.99;\\n' +\r\n\r\n            '}\\n';\r\n\r\n        var SKY_FSHADER =\r\n            'precision mediump float;\\n' +\r\n            'uniform samplerCube u_skybox;\\n' +\r\n            'uniform mat4 u_viewDirectionProjectionInverse;\\n' +\r\n            'varying vec4 v_position;\\n' +\r\n            'void main() {\\n' +\r\n            '  vec4 t = u_viewDirectionProjectionInverse * v_position;\\n' +\r\n            '  gl_FragColor = textureCube(u_skybox, normalize(t.xyz / t.w));\\n' +\r\n            '}\\n';\r\n\r\n        this.sky_loadCount = 0;\r\n\r\n        that.sky_texture = gl.createTexture();\r\n\r\n        gl.activeTexture(gl.TEXTURE8);\r\n        gl.bindTexture(gl.TEXTURE_CUBE_MAP, that.sky_texture);\r\n\r\n        var faceInfos = [\r\n            {\r\n                target: gl.TEXTURE_CUBE_MAP_POSITIVE_X,\r\n                url:that.skyBox[0],\r\n                // url: './skyBox/sky1/pos-x.jpg'\r\n            },\r\n            {\r\n                target: gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\r\n                url:that.skyBox[1],\r\n                // url: './skyBox/sky1/neg-x.jpg'\r\n            },\r\n            {\r\n                target: gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\r\n                url:that.skyBox[2],\r\n                // url: './skyBox/sky1/pos-y.jpg'\r\n            },\r\n            {\r\n                target: gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\r\n                url:that.skyBox[3],\r\n                // url: './skyBox/sky1/neg-y.jpg'\r\n            },\r\n            {\r\n                target: gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\r\n                url:that.skyBox[4],\r\n                // url: './skyBox/sky1/pos-z.jpg'\r\n            },\r\n            {\r\n                target: gl.TEXTURE_CUBE_MAP_NEGATIVE_Z,\r\n                url:that.skyBox[5],\r\n                // url: './skyBox/sky1/neg-z.jpg'\r\n            },\r\n        ];\r\n\r\n        if(that.useSkyBox){\r\n            faceInfos.forEach((faceInfo) => {\r\n                const {target, url} = faceInfo;\r\n\r\n                const level = 0;\r\n                const internalFormat = gl.RGBA;\r\n                const format = gl.RGBA;\r\n                const type = gl.UNSIGNED_BYTE;\r\n\r\n                // Asynchronously load an image\r\n                const image = new Image();\r\n                image.src = url;\r\n                image.addEventListener('load', function() {\r\n                    // Now that the image has loaded make copy it to the texture.\r\n                    gl.bindTexture(gl.TEXTURE_CUBE_MAP, that.sky_texture);\r\n                    gl.texImage2D(target, level, internalFormat, format, type, image);\r\n                    // gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\r\n                    that.sky_loadCount ++;\r\n\r\n                });\r\n            });\r\n        }\r\n\r\n        var skyProgram = this.skyProgram = util_Util.createProgram(gl, SKY_VSHADER, SKY_FSHADER);\r\n\r\n\r\n\r\n        //-----------------------\r\n        gl.enable(gl.CULL_FACE);\r\n        gl.enable(gl.DEPTH_TEST);\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n        // gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n\r\n    }\r\n\r\n    initFramebufferObject(gl, size) {\r\n        var framebuffer, texture, depthBuffer;\r\n\r\n        // Define the error handling function\r\n        var error = function() {\r\n            if (framebuffer) gl.deleteFramebuffer(framebuffer);\r\n            if (texture) gl.deleteTexture(texture);\r\n            if (depthBuffer) gl.deleteRenderbuffer(depthBuffer);\r\n            return null;\r\n        }\r\n\r\n        // Create a framebuffer object (FBO)\r\n        framebuffer = gl.createFramebuffer();\r\n        if (!framebuffer) {\r\n            console.log('Failed to create frame buffer object');\r\n            return error();\r\n        }\r\n\r\n        // Create a texture object and set its size and parameters\r\n        texture = gl.createTexture(); // Create a texture object\r\n        if (!texture) {\r\n            console.log('Failed to create texture object');\r\n            return error();\r\n        }\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, size, size, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n\r\n\r\n        // Create a renderbuffer object and Set its size and parameters\r\n        depthBuffer = gl.createRenderbuffer(); // Create a renderbuffer object\r\n        if (!depthBuffer) {\r\n            console.log('Failed to create renderbuffer object');\r\n            return error();\r\n        }\r\n        gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);\r\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, size, size);\r\n\r\n        // Attach the texture and the renderbuffer object to the FBO\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthBuffer);\r\n\r\n        // Check if FBO is configured correctly\r\n        var e = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\r\n        if (gl.FRAMEBUFFER_COMPLETE !== e) {\r\n            console.log('Frame buffer object is incomplete: ' + e.toString());\r\n            return error();\r\n        }\r\n\r\n        framebuffer.texture = texture; // keep the required object\r\n\r\n        // Unbind the buffer object\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\r\n\r\n        return framebuffer;\r\n    }\r\n\r\n    getProgramByVF(v, f){\r\n        var that = this;\r\n        var gl = that.gl;\r\n\r\n        var vertexShader = this.vshader = util_Util.loadShader(gl, gl.VERTEX_SHADER, v);\r\n        var fragmentShader = this.fshader = util_Util.loadShader(gl, gl.FRAGMENT_SHADER, f);\r\n        if (!vertexShader || !fragmentShader) {\r\n            return null;\r\n        }\r\n\r\n        var program = gl.createProgram();\r\n        if (!program) {\r\n            return null;\r\n        }\r\n\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n\r\n        gl.linkProgram(program);\r\n        var linked = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n        if (!linked) {\r\n            var error = gl.getProgramInfoLog(program);\r\n            console.log('Failed to link program: ' + error);\r\n            gl.deleteProgram(program);\r\n            gl.deleteShader(fragmentShader);\r\n            gl.deleteShader(vertexShader);\r\n            return null;\r\n        }\r\n\r\n        return program;\r\n    }\r\n\r\n    setProgram(v, f){\r\n        var that = this;\r\n        var gl = that.gl;\r\n\r\n        // if (!Util.initShaders(gl, v, f)) {\r\n        //     console.log('Failed to intialize shaders.');\r\n        //     return;\r\n        // }\r\n\r\n        var md5vf = (v+f);\r\n        var prog = that.programList[md5vf];\r\n        if(prog){\r\n            gl.useProgram(prog);\r\n            gl.program = prog;\r\n            return;\r\n        }\r\n\r\n        var program = that.getProgramByVF(v,f);\r\n\r\n        that.programList[md5vf] = program;\r\n\r\n        gl.useProgram(program);\r\n        gl.program = program;\r\n    }\r\n\r\n    renderDepthOneMesh(mesh, camera, ambientLight, directionalLight){\r\n        var that = this;\r\n\r\n        var mesh = mesh || new core_Mesh();\r\n        var geometry = mesh.geometry;\r\n\r\n\r\n        var gl = that.gl;\r\n\r\n        var bufferShadow = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufferShadow);\r\n        gl.bufferData(gl.ARRAY_BUFFER, geometry.buffer, gl.STATIC_DRAW);\r\n        var bufferFSIZE = geometry.buffer.BYTES_PER_ELEMENT;\r\n\r\n        var a_Position = gl.getAttribLocation(that.shadowProgram, 'a_Position');\r\n        gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, bufferFSIZE * 8, bufferFSIZE * 0);\r\n        gl.enableVertexAttribArray(a_Position);\r\n\r\n\r\n        var indexBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, geometry.indices, gl.STATIC_DRAW);\r\n\r\n\r\n        var u_MvMatrix = gl.getUniformLocation(that.shadowProgram, 'u_MvMatrix');\r\n        var mvMatrix = mesh.matrixWorld;\r\n        gl.uniformMatrix4fv(u_MvMatrix, false, mvMatrix.elements);\r\n\r\n        var ca = that.getCameraLight(directionalLight);\r\n\r\n        var u_PMatrix = gl.getUniformLocation(that.shadowProgram, 'u_PMatrix');\r\n        // var u_PMatrixFromLight = ca.VPmatrix;\r\n        gl.uniformMatrix4fv(u_PMatrix, false, ca.VPmatrix.elements);\r\n\r\n        gl.drawElements(gl.TRIANGLES, geometry.indices.length, gl.UNSIGNED_SHORT, 0);\r\n\r\n        gl.deleteBuffer(bufferShadow);\r\n        gl.deleteBuffer(indexBuffer);\r\n\r\n    }\r\n\r\n    getCameraLight(directionalLight){\r\n        var cameraLight = new COOL.OrthoCamera(-100, 100, -100, 100, 0, 300);\r\n        // var cameraLight = new COOL.Camera(30,1,1,10);\r\n        var caPos = directionalLight.direction;\r\n        caPos = caPos.map(function (item) {\r\n            return item * 100;\r\n        });\r\n        cameraLight.setPosition(caPos);\r\n        cameraLight.setTarget([0,0,0]);\r\n\r\n        return cameraLight;\r\n    }\r\n\r\n    renderSkyBox(camera){\r\n        var that = this;\r\n        var gl = that.gl;\r\n\r\n        if(that.sky_loadCount != 6){\r\n            return;\r\n        }\r\n        gl.useProgram(that.skyProgram);\r\n        gl.viewport(0, 0, 600, 600);\r\n\r\n        var program = that.skyProgram;\r\n\r\n        var positionLocation = gl.getAttribLocation(program, \"a_position\");\r\n        var skyboxLocation = gl.getUniformLocation(program, \"u_skybox\");\r\n        var viewDirectionProjectionInverseLocation = gl.getUniformLocation(program, \"u_viewDirectionProjectionInverse\");\r\n        var positionBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n        var positions = new Float32Array(\r\n            [\r\n                -1, -1,\r\n                1, -1,\r\n                -1,  1,\r\n                -1,  1,\r\n                1, -1,\r\n                1,  1,\r\n            ]);\r\n        gl.bufferData(gl.ARRAY_BUFFER, positions, gl.STATIC_DRAW);\r\n\r\n        var size = 2;          // 2 components per iteration\r\n        var type = gl.FLOAT;   // the data is 32bit floats\r\n        var normalize = false; // don't normalize the data\r\n        var stride = 0;        // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n        var offset = 0;        // start at the beginning of the buffer\r\n        gl.vertexAttribPointer(positionLocation, size, type, normalize, stride, offset);\r\n        gl.enableVertexAttribArray(positionLocation);\r\n\r\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n        var cameraPositionV3 = new Vector3().fromArray(camera.position).normalize();\r\n        var projectionMatrix = new Matrix4().setPerspective(30, 1, 1, 2000);\r\n        var cameraMatrix = new Matrix4().setLookAt(cameraPositionV3.x, cameraPositionV3.y, cameraPositionV3.z, 0, 0, 0, 0, 1, 0);\r\n        // var viewMatrix = cameraMatrix.invert();\r\n        var viewMatrix = cameraMatrix;\r\n        var viewDirectionProjectionMatrix = projectionMatrix.multiply(viewMatrix);\r\n        var viewDirectionProjectionInverseMatrix = viewDirectionProjectionMatrix.invert();\r\n        gl.uniformMatrix4fv(viewDirectionProjectionInverseLocation, false, viewDirectionProjectionInverseMatrix.elements);\r\n\r\n        gl.uniform1i(skyboxLocation, 8);\r\n        gl.drawArrays(gl.TRIANGLES, 0, 1 * 6);\r\n\r\n    }\r\n\r\n    render(scene, camera){\r\n        var that = this;\r\n        that.curCameraPosition = camera.position;\r\n\r\n        var renderList = that.sortRenderList(scene);\r\n        var useScheme = that.useScheme;\r\n\r\n        var gl = that.gl;\r\n        gl.enable(gl.DEPTH_TEST);\r\n\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        if(that.useSkyBox){\r\n            this.renderSkyBox(camera);\r\n        }\r\n\r\n        var ambientLight = null;\r\n        var directionalLight = null;\r\n\r\n        for(var i in scene.lights){\r\n            if(scene.lights[i].type == 'DirectionalLight'){\r\n                directionalLight = scene.lights[i];\r\n            }else if(scene.lights[i].type == 'AmbientLight'){\r\n                ambientLight = scene.lights[i];\r\n            }\r\n        }\r\n\r\n        that.useShadow = directionalLight ? that.useShadow : false;\r\n\r\n        ambientLight = ambientLight || new light_AmbientLight({intensity:0});\r\n        directionalLight = directionalLight || new light_DirectionalLight({intensity:0});\r\n\r\n        if(that.useShadow){\r\n            gl.useProgram(that.shadowProgram);\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, that.shadow_fbo);\r\n            gl.viewport(0, 0, this.shadowBufferSize, this.shadowBufferSize);\r\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n            gl.disable (gl.BLEND);\r\n            for(var i in renderList){\r\n                this.renderDepthOneMesh(renderList[i], camera, ambientLight, directionalLight);\r\n            }\r\n        }\r\n\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        gl.viewport(0, 0, 600, 600);\r\n        gl.enable (gl.BLEND);\r\n        // gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        for(var i in renderList){\r\n            this.renderOneMesh(renderList[i], camera, ambientLight, directionalLight);\r\n        }\r\n\r\n        //scheme\r\n        if(useScheme) {\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, that.scheme_fbo);\r\n            gl.viewport(0, 0, 600, 600);\r\n            gl.disable(gl.BLEND);\r\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n            for (var i in renderList) {\r\n                if (renderList[i].effect) {\r\n                    useScheme = true;\r\n                    this.renderSchemeMesh(renderList[i], camera, ambientLight, directionalLight);\r\n                } else {\r\n                    this.renderOtherMesh(renderList[i], camera, ambientLight, directionalLight);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        //composer\r\n        if(useScheme){\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n            gl.viewport(0, 0, 600, 600);\r\n            gl.enable (gl.BLEND);\r\n            this.renderComposer();\r\n        }\r\n\r\n    }\r\n\r\n    renderComposer(){\r\n        var that = this;\r\n        var gl = that.gl;\r\n\r\n        gl.useProgram(that.composerProgram);\r\n        gl.viewport(0, 0, 600, 600);\r\n\r\n        var program = that.composerProgram;\r\n\r\n        var a_Position = gl.getAttribLocation(program, \"a_Position\");\r\n        var a_TexCoord = gl.getAttribLocation(program, \"a_TexCoord\");\r\n\r\n        var positionBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n        var positions = new Float32Array(\r\n            [\r\n                -1, -1, 0,0,\r\n                1, -1,  1,0,\r\n                -1,  1, 0,1,\r\n                -1,  1, 0,1,\r\n                1, -1,  1,0,\r\n                1,  1,  1,1\r\n            ]);\r\n        gl.bufferData(gl.ARRAY_BUFFER, positions, gl.STATIC_DRAW);\r\n\r\n        var bufferFSIZE = positions.BYTES_PER_ELEMENT;\r\n\r\n        gl.vertexAttribPointer(a_Position, 2, gl.FLOAT, false, bufferFSIZE*4, bufferFSIZE*0);\r\n        gl.enableVertexAttribArray(a_Position);\r\n\r\n        gl.vertexAttribPointer(a_TexCoord, 2, gl.FLOAT, false, bufferFSIZE*4, bufferFSIZE*2);\r\n        gl.enableVertexAttribArray(a_TexCoord);\r\n\r\n        gl.activeTexture(gl.TEXTURE5);\r\n        gl.bindTexture(gl.TEXTURE_2D, that.scheme_fbo.texture);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, COOL.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, COOL.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, COOL.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, COOL.CLAMP_TO_EDGE);\r\n        var tDiffuse = gl.getUniformLocation(program, \"tDiffuse\");\r\n        gl.uniform1i(tDiffuse, 5);\r\n        gl.drawArrays(gl.TRIANGLES, 0, 1 * 6);\r\n    }\r\n\r\n    renderOtherMesh(mesh, camera, ambientLight, directionalLight){\r\n        var that = this;\r\n\r\n        var mesh = mesh || new core_Mesh();\r\n        var geometry = mesh.geometry;\r\n        var material = mesh.material;\r\n        var map = material.map;\r\n        var color = material.color;\r\n\r\n        var gl = that.gl;\r\n\r\n        gl.useProgram(that.composerOtherProgram);\r\n\r\n        var bufferMesh = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufferMesh);\r\n        gl.bufferData(gl.ARRAY_BUFFER, geometry.buffer, gl.STATIC_DRAW);\r\n        var bufferFSIZE = geometry.buffer.BYTES_PER_ELEMENT;\r\n\r\n        var a_Position = gl.getAttribLocation(that.composerOtherProgram, 'a_Position');\r\n        gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, bufferFSIZE * 8, bufferFSIZE * 0);\r\n        gl.enableVertexAttribArray(a_Position);\r\n\r\n        var indexBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, geometry.indices, gl.STATIC_DRAW);\r\n\r\n        var u_MvMatrix = gl.getUniformLocation(that.composerOtherProgram, 'u_MvMatrix');\r\n        var mvMatrix = mesh.matrixWorld;\r\n        gl.uniformMatrix4fv(u_MvMatrix, false, mvMatrix.elements);\r\n\r\n        var u_PMatrix = gl.getUniformLocation(that.composerOtherProgram, 'u_PMatrix');\r\n        var PMatrix = camera.VPmatrix;\r\n        gl.uniformMatrix4fv(u_PMatrix, false, PMatrix.elements);\r\n\r\n        var model = material.wireframe ? gl.LINE_STRIP : gl.TRIANGLES;\r\n        gl.drawElements(model, geometry.indices.length, gl.UNSIGNED_SHORT, 0);\r\n\r\n        gl.deleteBuffer(bufferMesh);\r\n        gl.deleteBuffer(indexBuffer);\r\n\r\n    }\r\n\r\n    renderSchemeMesh(mesh, camera, ambientLight, directionalLight){\r\n        var that = this;\r\n\r\n        var mesh = mesh || new core_Mesh();\r\n        var geometry = mesh.geometry;\r\n        var material = mesh.material;\r\n        var map = material.map;\r\n        var color = material.color;\r\n\r\n        var gl = that.gl;\r\n\r\n        gl.useProgram(that.composerSchemeProgram);\r\n\r\n        var bufferMesh = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufferMesh);\r\n        gl.bufferData(gl.ARRAY_BUFFER, geometry.buffer, gl.STATIC_DRAW);\r\n        var bufferFSIZE = geometry.buffer.BYTES_PER_ELEMENT;\r\n\r\n        var a_Position = gl.getAttribLocation(that.composerSchemeProgram, 'a_Position');\r\n        gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, bufferFSIZE * 8, bufferFSIZE * 0);\r\n        gl.enableVertexAttribArray(a_Position);\r\n\r\n        var indexBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, geometry.indices, gl.STATIC_DRAW);\r\n\r\n        var u_MvMatrix = gl.getUniformLocation(that.composerSchemeProgram, 'u_MvMatrix');\r\n        var mvMatrix = mesh.matrixWorld;\r\n        gl.uniformMatrix4fv(u_MvMatrix, false, mvMatrix.elements);\r\n\r\n        var u_PMatrix = gl.getUniformLocation(that.composerSchemeProgram, 'u_PMatrix');\r\n        var PMatrix = camera.VPmatrix;\r\n        gl.uniformMatrix4fv(u_PMatrix, false, PMatrix.elements);\r\n\r\n        var model = material.wireframe ? gl.LINE_STRIP : gl.TRIANGLES;\r\n        gl.drawElements(model, geometry.indices.length, gl.UNSIGNED_SHORT, 0);\r\n\r\n        gl.deleteBuffer(bufferMesh);\r\n        gl.deleteBuffer(indexBuffer);\r\n\r\n    }\r\n\r\n    renderOneMesh(mesh, camera, ambientLight, directionalLight){\r\n        var that = this;\r\n\r\n        var mesh = mesh || new core_Mesh();\r\n        var geometry = mesh.geometry;\r\n        var material = mesh.material;\r\n        var map = material.map;\r\n        var envMap = material.envMap;\r\n        var color = material.color;\r\n\r\n        var v = material.vshaderSource;\r\n        var f = material.fshaderSource;\r\n\r\n        var vDef = '';\r\n        var fDef = '';\r\n        if(material.type == 'MeshLambertMaterial'){\r\n            fDef += '#define USE_AmbientLight\\n';\r\n            fDef += '#define USE_DirectionalLight\\n';\r\n\r\n        }else if(material.type == 'MeshStandardMaterial'){\r\n\r\n            fDef += '#define USE_AmbientLight\\n';\r\n\r\n            vDef += '#define USE_SColor\\n';\r\n\r\n            fDef += '#define USE_DirectionalLight\\n';\r\n            fDef += '#define USE_SColor\\n';\r\n\r\n\r\n        }\r\n\r\n        if(map && map.image && map.image.width  && map.image.height){\r\n            fDef += '#define USE_Map\\n';\r\n        }\r\n\r\n        if(envMap && envMap.imgReady){\r\n            vDef += '#define USE_envMap\\n';\r\n            fDef += '#define USE_envMap\\n';\r\n        }\r\n\r\n        if(that.useShadow){\r\n            vDef += '#define USE_Shadow\\n';\r\n            fDef += '#define USE_Shadow\\n';\r\n        }\r\n\r\n        v = vDef + v;\r\n        f = fDef + f;\r\n\r\n        this.setProgram(v,f);\r\n\r\n        var gl = that.gl;\r\n\r\n        var bufferMesh = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufferMesh);\r\n        gl.bufferData(gl.ARRAY_BUFFER, geometry.buffer, gl.STATIC_DRAW);\r\n        var bufferFSIZE = geometry.buffer.BYTES_PER_ELEMENT;\r\n\r\n        var a_Position = gl.getAttribLocation(gl.program, 'a_Position');\r\n        gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, bufferFSIZE * 8, bufferFSIZE * 0);\r\n        gl.enableVertexAttribArray(a_Position);\r\n\r\n        var a_Normal = gl.getAttribLocation(gl.program, 'a_Normal');\r\n        gl.vertexAttribPointer(a_Normal, 3, gl.FLOAT, false, bufferFSIZE * 8, bufferFSIZE * 3);\r\n        gl.enableVertexAttribArray(a_Normal);\r\n\r\n        var a_TexCoord = gl.getAttribLocation(gl.program, 'a_TexCoord');\r\n        gl.vertexAttribPointer(a_TexCoord, 2, gl.FLOAT, false, bufferFSIZE * 8, bufferFSIZE * 6);\r\n        gl.enableVertexAttribArray(a_TexCoord);\r\n\r\n\r\n        var indexBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, geometry.indices, gl.STATIC_DRAW);\r\n\r\n        var u_Color = gl.getUniformLocation(gl.program, 'u_Color');\r\n        gl.uniform4f(u_Color, color[0], color[1], color[2], color[3]);\r\n\r\n        if(f.indexOf('#define USE_SColor')!=-1 || f.indexOf('#define USE_envMap')!=-1){\r\n            var u_Camera_Position = gl.getUniformLocation(gl.program, 'u_Camera_Position');\r\n            gl.uniform3f(u_Camera_Position, camera.position[0], camera.position[1], camera.position[2]);\r\n        }\r\n\r\n        if(f.indexOf('#define USE_AmbientLight')!=-1){\r\n            var u_AmbientLight_Color = gl.getUniformLocation(gl.program, 'u_AmbientLight_Color');\r\n            var ambientLightColor = ambientLight.color;\r\n            ambientLightColor = ambientLightColor.map(function (item) {\r\n                return ambientLight.intensity * item;\r\n            });\r\n            gl.uniform3f(u_AmbientLight_Color, ambientLightColor[0], ambientLightColor[1], ambientLightColor[2]);\r\n        }\r\n\r\n        if(f.indexOf('#define USE_DirectionalLight')!=-1){\r\n            var u_DirectionalLight_Direction = gl.getUniformLocation(gl.program, 'u_DirectionalLight_Direction');\r\n            var directionalLight_Direction = directionalLight.direction;\r\n            gl.uniform3f(u_DirectionalLight_Direction, directionalLight_Direction[0], directionalLight_Direction[1], directionalLight_Direction[2]);\r\n\r\n            var u_DirectionalLight_Color = gl.getUniformLocation(gl.program, 'u_DirectionalLight_Color');\r\n            var directionalLight_Color = directionalLight.color;\r\n            directionalLight_Color = directionalLight_Color.map(function (item) {\r\n                return directionalLight.intensity * item;\r\n            });\r\n            gl.uniform3f(u_DirectionalLight_Color, directionalLight_Color[0], directionalLight_Color[1], directionalLight_Color[2]);\r\n        }\r\n\r\n\r\n        var u_MvMatrix = gl.getUniformLocation(gl.program, 'u_MvMatrix');\r\n        var mvMatrix = mesh.matrixWorld;\r\n        gl.uniformMatrix4fv(u_MvMatrix, false, mvMatrix.elements);\r\n\r\n        var u_PMatrix = gl.getUniformLocation(gl.program, 'u_PMatrix');\r\n        var PMatrix = camera.VPmatrix;\r\n        gl.uniformMatrix4fv(u_PMatrix, false, PMatrix.elements);\r\n\r\n        if(v.indexOf('#define USE_Shadow')!=-1){\r\n            var ca = that.getCameraLight(directionalLight);\r\n            var u_PMatrixFromLight = gl.getUniformLocation(gl.program, 'u_PMatrixFromLight');\r\n            gl.uniformMatrix4fv(u_PMatrixFromLight, false, ca.VPmatrix.elements);\r\n\r\n            gl.activeTexture(gl.TEXTURE0);\r\n            gl.bindTexture(gl.TEXTURE_2D, that.shadow_fbo.texture);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, COOL.LINEAR);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, COOL.LINEAR);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, COOL.CLAMP_TO_EDGE);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, COOL.CLAMP_TO_EDGE);\r\n            var u_ShadowMap = gl.getUniformLocation(gl.program, 'u_ShadowMap');\r\n            gl.uniform1i(u_ShadowMap, 0);\r\n        }\r\n\r\n\r\n\r\n\r\n        if(f.indexOf('#define USE_Map')!=-1){\r\n\r\n            var texture = that.texture = gl.createTexture();   // Create a texture object\r\n            // gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1); // Flip the image's y axis\r\n\r\n            gl.activeTexture(gl.TEXTURE1); //必须在bindTexture之前\r\n            gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n            var u_Sampler = gl.getUniformLocation(gl.program, 'u_Sampler');\r\n            gl.uniform1i(u_Sampler, 1);\r\n\r\n            // Set the texture parameters\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, map.magFilter);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, map.minFilter);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, map.wrapS);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, map.wrapT);\r\n\r\n            // Set the texture image\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, map.image);\r\n        }\r\n\r\n        if(f.indexOf('#define USE_envMap')!=-1){\r\n\r\n            var texture = that.env_texture = gl.createTexture();\r\n            gl.activeTexture(gl.TEXTURE7);\r\n            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);\r\n\r\n            var images = envMap.images;\r\n            var faceInfos = [\r\n                {\r\n                    target: gl.TEXTURE_CUBE_MAP_POSITIVE_X,\r\n                    image:images[0],\r\n                },\r\n                {\r\n                    target: gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\r\n                    image:images[1],\r\n                },\r\n                {\r\n                    target: gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\r\n                    image:images[2],\r\n                },\r\n                {\r\n                    target: gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\r\n                    image:images[3],\r\n                },\r\n                {\r\n                    target: gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\r\n                    image:images[4],\r\n                },\r\n                {\r\n                    target: gl.TEXTURE_CUBE_MAP_NEGATIVE_Z,\r\n                    image:images[5],\r\n                },\r\n            ];\r\n\r\n            faceInfos.forEach((faceInfo) => {\r\n                const {target, image} = faceInfo;\r\n\r\n                const level = 0;\r\n                const internalFormat = gl.RGBA;\r\n                const format = gl.RGBA;\r\n                const type = gl.UNSIGNED_BYTE;\r\n\r\n                gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);\r\n                gl.texImage2D(target, level, internalFormat, format, type, image);\r\n\r\n            });\r\n\r\n            gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, envMap.magFilter);\r\n            gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, envMap.minFilter);\r\n            gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, envMap.wrapS);\r\n            gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, envMap.wrapT);\r\n\r\n            var u_envMap = gl.getUniformLocation(gl.program, \"u_envMap\");\r\n            gl.uniform1i(u_envMap, 7);\r\n\r\n\r\n        }\r\n\r\n        var model = material.wireframe ? gl.LINE_STRIP : gl.TRIANGLES;\r\n        gl.drawElements(model, geometry.indices.length, gl.UNSIGNED_SHORT, 0);\r\n\r\n        if(that.texture){\r\n            gl.deleteTexture(that.texture);\r\n            that.texture = null;\r\n        }\r\n        if(that.env_texture){\r\n            gl.deleteTexture(that.env_texture);\r\n            that.env_texture = null;\r\n        }\r\n\r\n        // gl.deleteBuffer(bufferMesh);\r\n        that.addBuffer(bufferMesh);\r\n        gl.deleteBuffer(indexBuffer);\r\n\r\n        gl.deleteShader(that.vshader);\r\n        gl.deleteShader(that.fshader);\r\n        // gl.deleteProgram(gl.program);\r\n\r\n    }\r\n\r\n    addBuffer(buffer){\r\n        //这个buffer不能立即删除，删了下一帧没深度图，未解之谜\r\n        this.bufferList.push(buffer);\r\n        if(this.bufferList.length > 1){\r\n            var bb = this.bufferList.shift();\r\n            this.gl.deleteBuffer(bb);\r\n        }\r\n    }\r\n\r\n    setSkyBox(skyBox){\r\n        var that = this;\r\n        that.skyBox = skyBox;\r\n        that.useSkyBox = true;\r\n    }\r\n\r\n    getAllObjList(obj, allObjList){\r\n        var that = this;\r\n        for(var i in obj.children){\r\n            if(obj.children[i].geometry){\r\n                allObjList.push(obj.children[i]);\r\n            }\r\n            that.getAllObjList(obj.children[i],allObjList);\r\n        }\r\n        return allObjList;\r\n    }\r\n\r\n    sortRenderList(scene){\r\n        var that = this;\r\n\r\n        var allObjList = that.getAllObjList(scene ,[]);\r\n\r\n        for(var i in allObjList){\r\n            var pa = allObjList[i].getWorldPosition();\r\n            var pc = new Vector3().fromArray(that.curCameraPosition);\r\n            var da = pc.distanceTo(pa);\r\n            allObjList[i].distanceToCamera = da;\r\n        }\r\n        var allObjSortedList = allObjList.sort(that.sortFun);\r\n        // var opacityList = [];\r\n        // var transparentList = [];\r\n        //\r\n        // for(var i in allObjSortedList){\r\n        //     if(allObjSortedList[i].material.transparent){\r\n        //         transparentList.push(allObjSortedList[i]);\r\n        //     }else {\r\n        //         opacityList.push(allObjSortedList[i]);\r\n        //     }\r\n        // }\r\n        //\r\n        // that.renderList = {\r\n        //     opacityList: opacityList,\r\n        //     transparentList: transparentList\r\n        // };\r\n\r\n        return allObjSortedList;\r\n    }\r\n\r\n    sortFun(a, b){\r\n        return b.distanceToCamera - a.distanceToCamera;\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var core_Renderer = (Renderer_Renderer);\r\n\n// CONCATENATED MODULE: ./src/camera/CameraController.js\n\r\n\r\n\r\nclass CameraController_CameraController {\r\n    constructor(camera) {\r\n        this.camera = camera;\r\n\r\n        this.mouse0State = 'up';\r\n        this.mouse1State = 'up';\r\n        this.mouse2State = 'up';\r\n\r\n        this.x = -1;\r\n        this.y = -1;\r\n\r\n        this.minTilt = 0.1;\r\n        this.maxTilt = 3.04;\r\n    }\r\n\r\n    update(){\r\n        var that = this;\r\n\r\n        window.addEventListener('mousedown',function (e) {\r\n            // console.log(e.button+' down '+e.clientX+','+e.clientY);\r\n            var dom =  window.document.getElementsByTagName('canvas')[0];\r\n            if(!dom){\r\n                return;\r\n            }\r\n            var rect = dom.getBoundingClientRect();\r\n            if(e.clientX < rect.left || e.clientX > rect.right || e.clientY < rect.top || e.clientY > rect.bottom){\r\n                return;\r\n            }\r\n            if(e.button == 0){\r\n                that.mouse0State = 'down';\r\n            }else if(e.button == 1){\r\n                that.mouse1State = 'down';\r\n            }else if(e.button == 2){\r\n                that.mouse2State = 'down';\r\n            }\r\n        });\r\n\r\n        window.addEventListener('mouseup',function (e) {\r\n            // console.log(e.button+' up '+e.clientX+','+e.clientY);\r\n            if(e.button == 0){\r\n                that.mouse0State = 'up';\r\n            }else if(e.button == 1){\r\n                that.mouse1State = 'up';\r\n            }else if(e.button == 2){\r\n                that.mouse2State = 'up';\r\n            }\r\n        });\r\n\r\n        window.addEventListener('mousemove',function (e) {\r\n            // console.log(e.button+' move '+e.clientX+','+e.clientY);\r\n\r\n            var camera = that.camera;\r\n            if(that.mouse0State == 'down'){\r\n                var deltaX = e.clientX - that.x;\r\n                var deltaY = e.clientY - that.y;\r\n\r\n                // var angle = Math.sqrt(deltaX*deltaX + deltaY*deltaY)/80;\r\n                //\r\n                // var upV3 = new Vector3(camera.up);\r\n                // var rightV3 = new Vector3(camera.right);\r\n                //\r\n                // var axisV3 = new Vector3().addVectors( new Vector3().scaleVectors(upV3,deltaX) , new Vector3().scaleVectors(rightV3,deltaY)).normalize();\r\n                //\r\n                // var oldPositionV3 = new Vector3(camera.position);\r\n                // var newPositionV3 = new Vector3().rotateByVector(oldPositionV3, axisV3, angle);\r\n                // var newPosition = newPositionV3.toArray();\r\n                //\r\n                // camera.setPosition(newPosition);\r\n\r\n                var axisYV3 = new Vector3(0,1,0);\r\n                var angleY = deltaX/200;\r\n                var oldPositionV3 = new Vector3().fromArray(camera.position);\r\n                var newPositionV3 = new Vector3().rotateByVector(oldPositionV3, axisYV3, angleY);\r\n                var newPosition = newPositionV3.toArray();\r\n                camera.setPosition(newPosition);\r\n\r\n\r\n                var angleX = deltaY/200;\r\n                var tilt = that.getTilt();\r\n                var endTilt = tilt - angleX;\r\n\r\n                if(endTilt<that.maxTilt && endTilt>that.minTilt){\r\n\r\n                    var axisXV3 = new Vector3(camera.right[0], camera.right[1], camera.right[2]);\r\n                    oldPositionV3 = new Vector3().fromArray(camera.position);\r\n                    newPositionV3 = new Vector3().rotateByVector(oldPositionV3, axisXV3, angleX);\r\n                    newPosition = newPositionV3.toArray();\r\n                    camera.setPosition(newPosition);\r\n                }\r\n\r\n            }\r\n\r\n            if(that.mouse2State == 'down'){\r\n                var deltaX = e.clientX - that.x;\r\n                var deltaY = e.clientY - that.y;\r\n\r\n                var tempUp = new Vector3().crossVectors(new Vector3().fromArray(camera.right), new Vector3().fromArray(camera.direction));\r\n                var axisYV3 = tempUp;\r\n\r\n                var oldTargetV3 = new Vector3().fromArray(camera.target);\r\n                var newTargetV3 = new Vector3().addVectors(oldTargetV3, new Vector3().scaleVectors(axisYV3, deltaY/30));\r\n                var newTargetV3 = newTargetV3.toArray();\r\n                camera.setTarget(newTargetV3);\r\n\r\n                var oldPositionV3 = new Vector3().fromArray(camera.position);\r\n                var newPositionV3 = new Vector3().addVectors(oldPositionV3, new Vector3().scaleVectors(axisYV3, deltaY/30));\r\n                var newPosition = newPositionV3.toArray();\r\n                camera.setPosition(newPosition);\r\n\r\n                var axisXV3 = new Vector3().fromArray(camera.right);\r\n\r\n                oldTargetV3 = new Vector3().fromArray(camera.target);\r\n                newTargetV3 = new Vector3().addVectors(oldTargetV3, new Vector3().scaleVectors(axisXV3, -deltaX/30));\r\n                newTargetV3 = newTargetV3.toArray();\r\n                camera.setTarget(newTargetV3);\r\n\r\n                oldPositionV3 = new Vector3().fromArray(camera.position);\r\n                var newPositionV3 = new Vector3().addVectors(oldPositionV3, new Vector3().scaleVectors(axisXV3, -deltaX/30));\r\n                newPosition = newPositionV3.toArray();\r\n                camera.setPosition(newPosition);\r\n\r\n            }\r\n\r\n            that.x = e.clientX;\r\n            that.y = e.clientY;\r\n        });\r\n\r\n        window.addEventListener('mousewheel',function (e) {\r\n            // console.log(e.button+' wheel '+e.wheelDelta);\r\n\r\n            var camera = that.camera;\r\n\r\n            var delta = e.wheelDelta;\r\n\r\n            if(delta == 0 || typeof(delta) != 'number'){\r\n                return;\r\n            }\r\n            delta = Math.abs(delta)/delta;\r\n\r\n            var directionV3 = new Vector3().fromArray(camera.direction);\r\n\r\n            var oldPositionV3 = new Vector3().fromArray(camera.position);\r\n            var dis = oldPositionV3.lengthSq();\r\n            dis = Math.sqrt(dis);\r\n            var newPositionV3 = new Vector3().addVectors(oldPositionV3, new Vector3().scaleVectors(directionV3, dis/10*delta));\r\n            var newPosition = newPositionV3.toArray();\r\n\r\n            camera.setPosition(newPosition);\r\n\r\n        });\r\n    }\r\n\r\n    getTilt(){\r\n        var camera = this.camera;\r\n        var dir = camera.direction;\r\n        var axixY = new Vector3(0,-1,0);\r\n        var dirV3 = new Vector3().fromArray(dir);\r\n\r\n        var tilt = axixY.angleTo(dirV3);\r\n        return tilt;\r\n\r\n    }\r\n}\r\n\r\n/* harmony default export */ var camera_CameraController = (CameraController_CameraController);\r\n\n// CONCATENATED MODULE: ./src/core/Scene.js\n\r\n\r\n\r\nclass Scene {\r\n    constructor(param) {\r\n        param = param || {};\r\n        this.children = [];\r\n        this.lights = [];\r\n    }\r\n\r\n    add(obj){\r\n        if(obj.type == 'Mesh'){\r\n            this.children.push(obj);\r\n        }else{\r\n            this.lights.push(obj);\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n/* harmony default export */ var core_Scene = (Scene);\n// CONCATENATED MODULE: ./src/material/Texture.js\n\r\nclass Texture {\r\n    constructor(param) {\r\n        param = param || {};\r\n        this.image = param.image || new Image();\r\n        this.wrapS = param.wrapS || COOL.REPEAT;\r\n        this.wrapT = param.wrapT || COOL.REPEAT;\r\n        this.magFilter = param.magFilter || COOL.NEAREST;\r\n        this.minFilter = param.minFilter || COOL.NEAREST;\r\n    }\r\n\r\n    clone(){\r\n\r\n        var image = new Image();\r\n        image.src = this.image.src;\r\n\r\n        var texture = new Texture({\r\n            image: image,\r\n            wrapS: this.wrapS,\r\n            wrapT: this.wrapT,\r\n            magFilter: this.magFilter,\r\n            minFilter: this.minFilter\r\n        });\r\n\r\n        return texture;\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var material_Texture = (Texture);\r\n\n// CONCATENATED MODULE: ./src/material/MeshBasicMaterial.js\n\r\n\r\nclass MeshBasicMaterial_MeshBasicMaterial extends material_Material{\r\n    constructor(param) {\r\n        super(param);\r\n        this.type = 'MeshBasicMaterial';\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var material_MeshBasicMaterial = (MeshBasicMaterial_MeshBasicMaterial);\r\n\n// CONCATENATED MODULE: ./src/material/MeshLambertMaterial.js\n\r\n\r\nclass MeshLambertMaterial_MeshLambertMaterial extends material_Material{\r\n    constructor(param) {\r\n        super(param);\r\n        this.type = 'MeshLambertMaterial';\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var material_MeshLambertMaterial = (MeshLambertMaterial_MeshLambertMaterial);\r\n\n// CONCATENATED MODULE: ./src/material/MeshStandardMaterial.js\n\r\n\r\nclass MeshStandardMaterial_MeshStandardMaterial extends material_Material{\r\n    constructor(param) {\r\n        super(param);\r\n        this.type = 'MeshStandardMaterial';\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var material_MeshStandardMaterial = (MeshStandardMaterial_MeshStandardMaterial);\r\n\n// CONCATENATED MODULE: ./src/core/SphereGeometry.js\n\r\n\r\n\r\n\r\nclass SphereGeometry_SphereGeometry {\r\n    constructor( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\r\n\r\n        radius = radius || 1;\r\n\r\n        widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\r\n        heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\r\n\r\n        phiStart = phiStart !== undefined ? phiStart : 0;\r\n        phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\r\n\r\n        thetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n        thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\r\n\r\n        var thetaEnd = thetaStart + thetaLength;\r\n\r\n        var ix, iy;\r\n\r\n        var index = 0;\r\n        var grid = [];\r\n\r\n        var vertex = new Vector3();\r\n        var normal = new Vector3();\r\n\r\n        // buffers\r\n\r\n        var indices = [];\r\n        var vertices = [];\r\n        var normals = [];\r\n        var uvs = [];\r\n\r\n        // generate vertices, normals and uvs\r\n\r\n        for ( iy = 0; iy <= heightSegments; iy ++ ) {\r\n\r\n            var verticesRow = [];\r\n\r\n            var v = iy / heightSegments;\r\n\r\n            for ( ix = 0; ix <= widthSegments; ix ++ ) {\r\n\r\n                var u = ix / widthSegments;\r\n\r\n                // vertex\r\n\r\n                vertex = new Vector3(\r\n                    - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength ),\r\n                    radius * Math.cos( thetaStart + v * thetaLength ),\r\n                    radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength )\r\n                );\r\n\r\n                vertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n                // normal\r\n\r\n                normal = vertex.clone().normalize();\r\n                normals.push( normal.x, normal.y, normal.z );\r\n\r\n                // uv\r\n\r\n                uvs.push( u, 1 - v );\r\n\r\n                verticesRow.push( index ++ );\r\n\r\n            }\r\n\r\n            grid.push( verticesRow );\r\n\r\n        }\r\n\r\n        // indices\r\n\r\n        for ( iy = 0; iy < heightSegments; iy ++ ) {\r\n\r\n            for ( ix = 0; ix < widthSegments; ix ++ ) {\r\n\r\n                var a = grid[ iy ][ ix + 1 ];\r\n                var b = grid[ iy ][ ix ];\r\n                var c = grid[ iy + 1 ][ ix ];\r\n                var d = grid[ iy + 1 ][ ix + 1 ];\r\n\r\n                if ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\r\n                if ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        this.vertices = new Float32Array(vertices);\r\n        this.normal = new Float32Array(normals);\r\n        this.uv = new Float32Array(uvs);\r\n\r\n        this.indices = new Uint16Array(indices);\r\n\r\n        var buffer = [];\r\n        var vertices = this.vertices;\r\n        var normal = this.normal;\r\n        var uv = this.uv;\r\n        for(var i=0; i<vertices.length; i+=3){\r\n            buffer.push(vertices[i+0]);\r\n            buffer.push(vertices[i+1]);\r\n            buffer.push(vertices[i+2]);\r\n\r\n            buffer.push(normal[i+0]);\r\n            buffer.push(normal[i+1]);\r\n            buffer.push(normal[i+2]);\r\n\r\n            buffer.push(uv[i/3*2+0]);\r\n            buffer.push(uv[i/3*2+1]);\r\n        }\r\n\r\n        this.buffer = new Float32Array(buffer);\r\n\r\n        this.boundingSphere = new Sphere();\r\n        this.boundingBox = new Box3();\r\n        this.computeBoundingBox();\r\n\r\n    }\r\n\r\n    computeBoundingBox () {\r\n        var verticesV3 = [];\r\n        for(var i=0; i<this.vertices.length; i+=3){\r\n            verticesV3.push(new Vector3(this.vertices[i], this.vertices[i+1], this.vertices[i+2]))\r\n        }\r\n        this.boundingBox.setFromPoints(verticesV3);\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var core_SphereGeometry = (SphereGeometry_SphereGeometry);\r\n\n// CONCATENATED MODULE: ./src/core/GLTFLoader2.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass GLTFLoader2_GLTFLoader{\r\n    constructor(){\r\n        this.gltfObj = null;\r\n        this.urlBase = null;\r\n\r\n        this.arrayBuffers = [];\r\n        this.arrayBufferCount = 0;\r\n        this.dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\r\n    }\r\n\r\n    load(url, onLoadSuccess){\r\n        this.gltfObj = null;\r\n        this.urlBase = null;\r\n\r\n        this.arrayBuffers = [];\r\n        this.arrayBufferCount = 0;\r\n\r\n        var that = this;\r\n        var urlArray = url.split('/');\r\n        var jsonName = urlArray[urlArray.length-1];\r\n        that.urlBase = url.split(jsonName)[0];\r\n\r\n        var request = new XMLHttpRequest();\r\n        request.open(\"get\", url);\r\n        request.onload = function () {\r\n            if (request.status == 200) {\r\n                var gltfObj = JSON.parse(request.responseText);\r\n                that.gltfObj = gltfObj;\r\n                console.log(gltfObj);\r\n\r\n                that.arrayBufferCount = gltfObj.buffers.length;\r\n                var loadBufferCount = 0;\r\n\r\n                for(var i in gltfObj.buffers){\r\n\r\n                    var buffer = gltfObj.buffers[i];\r\n\r\n                    var dataUriRegexResult = buffer.uri.match( that.dataUriRegex );\r\n                    if(dataUriRegexResult){\r\n\r\n                        var buffer = that.base64ToArrayBuffer(dataUriRegexResult);\r\n                        if(buffer){\r\n                            that.arrayBuffers[i] = buffer;\r\n                            loadBufferCount ++;\r\n\r\n                            if(loadBufferCount = that.arrayBufferCount){\r\n\r\n                                var sceneObj = gltfObj.scenes[0];\r\n                                var scene = new core_Scene();\r\n                                for(var nodeindex in sceneObj.nodes){\r\n                                    var nodesIndex = sceneObj.nodes[nodeindex];\r\n                                    var nodesObj = gltfObj.nodes[nodesIndex];\r\n                                    var cur_mesh = that.nodeToMesh(nodesObj);\r\n                                    scene.add(cur_mesh);\r\n                                }\r\n                                onLoadSuccess(scene);\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                    }else{\r\n\r\n                        var bufferDataUri = that.urlBase + buffer.uri;\r\n\r\n                        var xhr = new XMLHttpRequest();\r\n                        xhr.open( 'GET', bufferDataUri, true );\r\n                        xhr.addEventListener( 'load', function ( event ) {\r\n\r\n                            var buffer = this.response;\r\n                            that.arrayBuffers[i] = buffer;\r\n                            loadBufferCount ++;\r\n\r\n                            if(loadBufferCount = that.arrayBufferCount){\r\n\r\n                                var sceneObj = gltfObj.scenes[0];\r\n                                var scene = new core_Scene();\r\n                                for(var nodeindex in sceneObj.nodes){\r\n                                    var nodesIndex = sceneObj.nodes[nodeindex];\r\n                                    var nodesObj = gltfObj.nodes[nodesIndex];\r\n                                    var cur_mesh = that.nodeToMesh(nodesObj);\r\n                                    scene.add(cur_mesh);\r\n                                }\r\n                                onLoadSuccess(scene);\r\n\r\n                            }\r\n\r\n\r\n                        }, false );\r\n                        xhr.responseType = 'arraybuffer';\r\n                        xhr.send( null );\r\n\r\n                    }\r\n\r\n\r\n                }\r\n\r\n\r\n            }\r\n        };\r\n        request.send(null);\r\n\r\n    }\r\n\r\n    nodeToMesh(node){\r\n        var that = this;\r\n\r\n        var meshIndex = node.mesh;\r\n        var mesh = null;\r\n\r\n        if(meshIndex != undefined){\r\n            var meshObj = that.gltfObj.meshes[meshIndex];\r\n            var geometryAndMaterial = that.meshToGeometry(meshObj);\r\n            mesh = new core_Mesh({\r\n                geometry:geometryAndMaterial[0],\r\n                material:geometryAndMaterial[1]\r\n            });\r\n        }else{\r\n            mesh = new core_Mesh();\r\n        }\r\n\r\n        var scale = node.scale;\r\n        if(scale){\r\n            mesh.setScale(scale);\r\n        }\r\n\r\n        var rotation = node.rotation;\r\n        if(rotation){\r\n            var quaternion = new Quaternion().fromArray(rotation);\r\n            mesh.setQuaternion(quaternion);\r\n        }\r\n\r\n        var translation = node.translation;\r\n        if(translation){\r\n            mesh.setPosition(translation);\r\n        }\r\n\r\n        var matrix = node.matrix;\r\n        if(matrix){\r\n            mesh.setMatrix(new Matrix4().fromArray(matrix));\r\n        }\r\n\r\n        for(var i in node.children){\r\n            var nodeChild = that.gltfObj.nodes[node.children[i]];\r\n            var meshChild = that.nodeToMesh(nodeChild);\r\n            mesh.add(meshChild);\r\n        }\r\n\r\n        return mesh;\r\n    }\r\n\r\n    meshToGeometry(mesh){\r\n        var that = this;\r\n\r\n        var primitive0 = mesh.primitives[0];\r\n        var attributes = primitive0.attributes;\r\n\r\n        var positionAccessorIndex = attributes.POSITION;\r\n        var positionAccessor = that.gltfObj.accessors[positionAccessorIndex];\r\n        var positionBufferViewIndex = positionAccessor.bufferView;\r\n        var positionBufferView = that.gltfObj.bufferViews[positionBufferViewIndex];\r\n        var positionData = that.getDataByBufferView(positionBufferView,positionAccessor);\r\n\r\n        var normalAccessorIndex = attributes.NORMAL;\r\n        var normalAccessor = that.gltfObj.accessors[normalAccessorIndex];\r\n        var normalBufferViewIndex = normalAccessor.bufferView;\r\n        var normalBufferView = that.gltfObj.bufferViews[normalBufferViewIndex];\r\n        var normalData = that.getDataByBufferView(normalBufferView,normalAccessor);\r\n\r\n        //TEXCOORD_0\r\n        var uv0AccessorIndex = attributes.TEXCOORD_0;\r\n        var uv0Accessor = that.gltfObj.accessors[uv0AccessorIndex];\r\n        var uv0BufferViewIndex = uv0Accessor.bufferView;\r\n        var uv0BufferView = that.gltfObj.bufferViews[uv0BufferViewIndex];\r\n        var uv0Data = that.getDataByBufferView(uv0BufferView,uv0Accessor);\r\n\r\n        var indicesData = null;\r\n        var indicesAccessorIndex = primitive0.indices;\r\n\r\n        if(indicesAccessorIndex != undefined){\r\n            var indicesAccessor = that.gltfObj.accessors[indicesAccessorIndex];\r\n            var indicesBufferViewIndex = indicesAccessor.bufferView;\r\n            var indicesBufferView = that.gltfObj.bufferViews[indicesBufferViewIndex];\r\n            indicesData = that.getDataByBufferView(indicesBufferView,indicesAccessor);\r\n        }\r\n\r\n        var materialIndex = primitive0.material;\r\n        var materialObj = that.gltfObj.materials[materialIndex];\r\n\r\n        if(materialObj.pbrMetallicRoughness.baseColorTexture){\r\n            var baseColorTextureIndex = materialObj.pbrMetallicRoughness.baseColorTexture.index;\r\n            var textureObj = that.gltfObj.textures[baseColorTextureIndex];\r\n            var imageIndex = textureObj.source;\r\n            var imageObj = that.gltfObj.images[imageIndex];\r\n            var imageUri = imageObj.uri;\r\n\r\n            var dataUriRegexResult = imageObj.uri.match( that.dataUriRegex );\r\n            if(!dataUriRegexResult){\r\n                imageUri = that.urlBase + imageObj.uri;\r\n            }\r\n\r\n            var samplerIndex = textureObj.sampler;\r\n            var sampler = that.gltfObj.samplers[samplerIndex];\r\n\r\n            var image = new Image();\r\n            image.crossOrigin = \"anonymous\";\r\n            image.src= imageUri;\r\n\r\n            var texture = new COOL.Texture({\r\n                image:image,\r\n                //这两个参数有问题，有的9729 9986是什么东西\r\n                // magFilter: sampler.magFilter,\r\n                // minFilter: sampler.minFilter,\r\n                wrapS: sampler.wrapS,\r\n                wrapT: sampler.wrapT,\r\n            });\r\n        }\r\n\r\n\r\n        var material = new COOL.MeshLambertMaterial({map:texture});\r\n\r\n        return [\r\n            new core_Geometry({\r\n                vertices: positionData,\r\n                indices: indicesData,\r\n                normal:normalData,\r\n                uv:uv0Data\r\n            }),\r\n            material\r\n        ];\r\n    }\r\n\r\n    getDataByBufferView(bufferView, accessor){\r\n        var that = this;\r\n        var bufferIndex = bufferView.buffer;\r\n\r\n        var byteLength = bufferView.byteLength || 0;\r\n        var byteOffset = bufferView.byteOffset || 0;\r\n\r\n        var buffer = that.gltfObj.buffers[bufferIndex];\r\n        var bufferDataUri = that.urlBase + buffer.uri;\r\n\r\n        var arrayBuffer = that.arrayBuffers[bufferIndex];\r\n\r\n        var cur_buffer = arrayBuffer.slice( byteOffset, byteOffset + byteLength );\r\n\r\n        var array = null;\r\n        var itemSize = null;\r\n\r\n        var accessorByteOffset = accessor.byteOffset || 0;\r\n\r\n        if(accessor.type == 'SCALAR'){\r\n            itemSize = 1;\r\n        }else if(accessor.type == 'VEC2'){\r\n            itemSize = 2;\r\n        }else if(accessor.type == 'VEC3'){\r\n            itemSize = 3;\r\n        }else if(accessor.type == 'VEC4'){\r\n            itemSize = 4;\r\n        }else{\r\n            console.warn('accessor.type undefined');\r\n        }\r\n\r\n        if(accessor.componentType == 5126){\r\n            array = new Float32Array( cur_buffer, accessorByteOffset, accessor.count * itemSize );\r\n        }else if(accessor.componentType == 5123){\r\n            array = new Uint16Array( cur_buffer, accessorByteOffset, accessor.count * itemSize );\r\n        }else if(accessor.componentType == 5120){\r\n            array = new Int8Array( cur_buffer, accessorByteOffset, accessor.count * itemSize );\r\n        }else if(accessor.componentType == 5121){\r\n            array = new Uint8Array( cur_buffer, accessorByteOffset, accessor.count * itemSize );\r\n        }else if(accessor.componentType == 5122){\r\n            array = new Int16Array( cur_buffer, accessorByteOffset, accessor.count * itemSize );\r\n        }else if(accessor.componentType == 5125){\r\n            array = new Uint32Array( cur_buffer, accessorByteOffset, accessor.count * itemSize );\r\n        }else{\r\n            console.warn('accessor.componentType undefined');\r\n        }\r\n\r\n        return array;\r\n\r\n\r\n    }\r\n\r\n    base64ToArrayBuffer(dataUriRegexResult){\r\n\r\n        var data = dataUriRegexResult[ 3 ];\r\n        data = decodeURIComponent( data );\r\n        data = atob( data );\r\n\r\n        try {\r\n\r\n            var view = new Uint8Array( data.length );\r\n            for ( var i = 0; i < data.length; i ++ ) {\r\n                view[ i ] = data.charCodeAt( i );\r\n            }\r\n\r\n            var arrayBuffer = view.buffer;\r\n            return arrayBuffer;\r\n\r\n        } catch ( error ) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var GLTFLoader2 = (GLTFLoader2_GLTFLoader);\r\n\n// CONCATENATED MODULE: ./src/camera/OrthoCamera.js\n\r\n\r\n\r\n\r\nclass OrthoCamera_OrthoCamera {\r\n    constructor(left, right, bottom, top, near, far) {\r\n        this.left = left;\r\n        this._right = right;\r\n        this.bottom = bottom;\r\n        this.top = top;\r\n        this.near = near;\r\n        this.far = far;\r\n\r\n        this.position = [0, 0, 10];\r\n        this.target = [0,0,0];\r\n        this.up = [0,1,0];\r\n\r\n        this.VPmatrix = new Matrix4();\r\n\r\n        this.direction = [0,0,-1];\r\n        this.right = [1,0,0];\r\n\r\n        this.updateAll();\r\n    }\r\n\r\n    updateAll(){\r\n        this.updateOption();\r\n        this.updateVPMatrix();\r\n    }\r\n\r\n    updateOption(){\r\n        var targetV3 = new Vector3().fromArray(this.target);\r\n        var positionV3 = new Vector3().fromArray(this.position);\r\n        var upV3 = new Vector3().fromArray(this.up);\r\n\r\n        var directionV3 = new Vector3().subVectors(targetV3, positionV3).normalize();\r\n        this.direction = directionV3.toArray();\r\n\r\n        var rightV3 = new Vector3().crossVectors(directionV3, upV3).normalize();\r\n        this.right = rightV3.toArray();\r\n\r\n        // this.up = new Vector3().crossVectors(rightV3, directionV3).normalize().toArray();\r\n    }\r\n\r\n    setPosition(position){\r\n        this.position = position;\r\n        this.updateAll();\r\n    }\r\n\r\n    setTarget(target){\r\n        this.target = target;\r\n        this.updateAll();\r\n    }\r\n\r\n    setUp(up){\r\n        this.up = new Vector3().fromArray(up).normalize().toArray();\r\n        this.updateAll();\r\n    }\r\n\r\n\r\n\r\n    updateVPMatrix(){\r\n        this.VPmatrix = new Matrix4().setOrtho(this.left, this._right, this.bottom, this.top, this.near, this.far);\r\n        this.VPmatrix.lookAt2(this.position[0],this.position[1],this.position[2], this.target[0],this.target[1],this.target[2], this.up[0],this.up[1],this.up[2]);\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var camera_OrthoCamera = (OrthoCamera_OrthoCamera);\r\n\r\n\n// CONCATENATED MODULE: ./src/animation/Animation.js\n\r\n\r\nclass Animation_Animation {\r\n    constructor(mesh){\r\n        this.mesh = mesh || new core_Mesh();\r\n        this.time = new Date().getTime();\r\n        this.index = 0;\r\n        this.frameCount = this.mesh.geometry.morphAttributes.position.length;\r\n    }\r\n\r\n    play(){\r\n        this.time = new Date().getTime();\r\n        this.index = 0;\r\n        this.animationLoop();\r\n    }\r\n\r\n    animationLoop(){\r\n        var that = this;\r\n        var curTime = new Date().getTime();\r\n        var curIndex = Math.floor((curTime - this.time)/1000*20)%this.frameCount;\r\n        if(curIndex != this.index){\r\n            this.mesh.geometry.vertices = this.mesh.geometry.morphAttributes.position[curIndex].array;\r\n            this.mesh.geometry.updataBuffer();\r\n            this.index = curIndex;\r\n        }\r\n        requestAnimationFrame(function () {\r\n            that.animationLoop();\r\n        });\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var animation_Animation = (Animation_Animation);\r\n\n// CONCATENATED MODULE: ./src/core/Raycaster.js\n\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author bhouston / http://clara.io/\r\n * @author stephomi / http://stephaneginier.com/\r\n */\r\n\r\nfunction Raycaster( origin, direction, near, far ) {\r\n\r\n\tthis.ray = new Ray( origin, direction );\r\n\t// direction is assumed to be normalized (for accurate distance calculations)\r\n\r\n\tthis.near = near || 0;\r\n\tthis.far = far || Infinity;\r\n\r\n\tthis.params = {\r\n\t\tMesh: {},\r\n\t\tLine: {},\r\n\t\tLOD: {},\r\n\t\tPoints: { threshold: 1 },\r\n\t\tSprite: {}\r\n\t};\r\n\r\n\tObject.defineProperties( this.params, {\r\n\t\tPointCloud: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'COOL.Raycaster: params.PointCloud has been renamed to params.Points.' );\r\n\t\t\t\treturn this.Points;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\r\n}\r\n\r\nfunction ascSort( a, b ) {\r\n\r\n\treturn a.distance - b.distance;\r\n\r\n}\r\n\r\nfunction intersectObject( object, raycaster, intersects, recursive ) {\r\n\r\n\tif ( object.visible === false) return;\r\n\r\n\tif(object.geometry){\r\n        object.raycast( raycaster, intersects );\r\n\t}\r\n\r\n\tif ( recursive === true ) {\r\n\r\n\t\tvar children = object.children;\r\n\r\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nObject.assign( Raycaster.prototype, {\r\n\r\n\tlinePrecision: 1,\r\n\r\n\tset: function ( origin, direction ) {\r\n\r\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\r\n\r\n\t\tthis.ray.set( origin, direction );\r\n\r\n\t},\r\n\r\n\tsetFromCamera: function ( coords, camera ) {\r\n\r\n\t\tif ( true ) {\r\n\r\n\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\r\n\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\r\n\r\n\t\t}\r\n\t\t// else if ( ( camera && camera.isOrthographicCamera ) ) {\r\n\t\t//\r\n\t\t// \tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\r\n\t\t// \tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\r\n\t\t//\r\n\t\t// } else {\r\n\t\t//\r\n\t\t// \tconsole.error( 'COOL.Raycaster: Unsupported camera type.' );\r\n\t\t//\r\n\t\t// }\r\n\r\n\t},\r\n\r\n\tintersectObject: function ( object, recursive, optionalTarget ) {\r\n\r\n\t\tvar intersects = optionalTarget || [];\r\n\r\n\t\tintersectObject( object, this, intersects, recursive );\r\n\r\n\t\tintersects.sort( ascSort );\r\n\r\n\t\treturn intersects;\r\n\r\n\t},\r\n\r\n\tintersectObjects: function ( objects, recursive, optionalTarget ) {\r\n\r\n\t\tvar intersects = optionalTarget || [];\r\n\r\n\t\tif ( Array.isArray( objects ) === false ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Raycaster.intersectObjects: objects is not an Array.' );\r\n\t\t\treturn intersects;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\r\n\r\n\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\r\n\r\n\t\t}\r\n\r\n\t\tintersects.sort( ascSort );\r\n\r\n\t\treturn intersects;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/loader/EventDispatcher.js\n/**\r\n * https://github.com/mrdoob/eventdispatcher.js/\r\n */\r\n\r\nfunction EventDispatcher() {}\r\n\r\nObject.assign( EventDispatcher.prototype, {\r\n\r\n\taddEventListener: function ( type, listener ) {\r\n\r\n\t\tif ( this._listeners === undefined ) this._listeners = {};\r\n\r\n\t\tvar listeners = this._listeners;\r\n\r\n\t\tif ( listeners[ type ] === undefined ) {\r\n\r\n\t\t\tlisteners[ type ] = [];\r\n\r\n\t\t}\r\n\r\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\r\n\r\n\t\t\tlisteners[ type ].push( listener );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\thasEventListener: function ( type, listener ) {\r\n\r\n\t\tif ( this._listeners === undefined ) return false;\r\n\r\n\t\tvar listeners = this._listeners;\r\n\r\n\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\r\n\r\n\t},\r\n\r\n\tremoveEventListener: function ( type, listener ) {\r\n\r\n\t\tif ( this._listeners === undefined ) return;\r\n\r\n\t\tvar listeners = this._listeners;\r\n\t\tvar listenerArray = listeners[ type ];\r\n\r\n\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\tvar index = listenerArray.indexOf( listener );\r\n\r\n\t\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\t\tlistenerArray.splice( index, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tdispatchEvent: function ( event ) {\r\n\r\n\t\tif ( this._listeners === undefined ) return;\r\n\r\n\t\tvar listeners = this._listeners;\r\n\t\tvar listenerArray = listeners[ event.type ];\r\n\r\n\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\tevent.target = this;\r\n\r\n\t\t\tvar array = listenerArray.slice( 0 );\r\n\r\n\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tarray[ i ].call( this, event );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/loader/Face3.js\n\r\n\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nfunction Face3_Face3( a, b, c, normal, color, materialIndex ) {\r\n\r\n\tthis.a = a;\r\n\tthis.b = b;\r\n\tthis.c = c;\r\n\r\n\tthis.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();\r\n\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\r\n\r\n\tthis.color = ( color && color.isColor ) ? color : new Color();\r\n\tthis.vertexColors = Array.isArray( color ) ? color : [];\r\n\r\n\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\r\n\r\n}\r\n\r\nObject.assign( Face3_Face3.prototype, {\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.a = source.a;\r\n\t\tthis.b = source.b;\r\n\t\tthis.c = source.c;\r\n\r\n\t\tthis.normal.copy( source.normal );\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.materialIndex = source.materialIndex;\r\n\r\n\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/math/Matrix3.js\n\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author bhouston / http://clara.io\r\n * @author tschw\r\n */\r\n\r\nfunction Matrix3() {\r\n\r\n\tthis.elements = [\r\n\r\n\t\t1, 0, 0,\r\n\t\t0, 1, 0,\r\n\t\t0, 0, 1\r\n\r\n\t];\r\n\r\n\tif ( arguments.length > 0 ) {\r\n\r\n\t\tconsole.error( 'COOL.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\r\n\r\n\t}\r\n\r\n}\r\n\r\nObject.assign( Matrix3.prototype, {\r\n\r\n\tisMatrix3: true,\r\n\r\n\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\r\n\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\r\n\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tidentity: function () {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0,\r\n\t\t\t0, 1, 0,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().fromArray( this.elements );\r\n\r\n\t},\r\n\r\n\tcopy: function ( m ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar me = m.elements;\r\n\r\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\r\n\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\r\n\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromMatrix4: function ( m ) {\r\n\r\n\t\tvar me = m.elements;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\r\n\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\r\n\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyToBufferAttribute: function () {\r\n\r\n\t\tvar v1 = new Vector3();\r\n\r\n\t\treturn function applyToBufferAttribute( attribute ) {\r\n\r\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\tv1.x = attribute.getX( i );\r\n\t\t\t\tv1.y = attribute.getY( i );\r\n\t\t\t\tv1.z = attribute.getZ( i );\r\n\r\n\t\t\t\tv1.applyMatrix3( this );\r\n\r\n\t\t\t\tattribute.setXYZ( i, v1.x, v1.y, v1.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn attribute;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tmultiply: function ( m ) {\r\n\r\n\t\treturn this.multiplyMatrices( this, m );\r\n\r\n\t},\r\n\r\n\tpremultiply: function ( m ) {\r\n\r\n\t\treturn this.multiplyMatrices( m, this );\r\n\r\n\t},\r\n\r\n\tmultiplyMatrices: function ( a, b ) {\r\n\r\n\t\tvar ae = a.elements;\r\n\t\tvar be = b.elements;\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\r\n\t\tvar a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\r\n\t\tvar a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\r\n\r\n\t\tvar b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\r\n\t\tvar b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\r\n\t\tvar b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\r\n\r\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\r\n\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\r\n\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\r\n\r\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\r\n\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\r\n\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\r\n\r\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\r\n\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\r\n\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\r\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\r\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdeterminant: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\r\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\r\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\r\n\r\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\r\n\r\n\t},\r\n\r\n\tgetInverse: function ( matrix, throwOnDegenerate ) {\r\n\r\n\t\tif ( matrix && matrix.isMatrix4 ) {\r\n\r\n\t\t\tconsole.error( \"COOL.Matrix3: .getInverse() no longer takes a Matrix4 argument.\" );\r\n\r\n\t\t}\r\n\r\n\t\tvar me = matrix.elements,\r\n\t\t\tte = this.elements,\r\n\r\n\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\r\n\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\r\n\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\r\n\r\n\t\t\tt11 = n33 * n22 - n32 * n23,\r\n\t\t\tt12 = n32 * n13 - n33 * n12,\r\n\t\t\tt13 = n23 * n12 - n22 * n13,\r\n\r\n\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\r\n\r\n\t\tif ( det === 0 ) {\r\n\r\n\t\t\tvar msg = \"COOL.Matrix3: .getInverse() can't invert matrix, determinant is 0\";\r\n\r\n\t\t\tif ( throwOnDegenerate === true ) {\r\n\r\n\t\t\t\tthrow new Error( msg );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( msg );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.identity();\r\n\r\n\t\t}\r\n\r\n\t\tvar detInv = 1 / det;\r\n\r\n\t\tte[ 0 ] = t11 * detInv;\r\n\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\r\n\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\r\n\r\n\t\tte[ 3 ] = t12 * detInv;\r\n\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\r\n\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\r\n\r\n\t\tte[ 6 ] = t13 * detInv;\r\n\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\r\n\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttranspose: function () {\r\n\r\n\t\tvar tmp, m = this.elements;\r\n\r\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\r\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\r\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetNormalMatrix: function ( matrix4 ) {\r\n\r\n\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\r\n\r\n\t},\r\n\r\n\ttransposeIntoArray: function ( r ) {\r\n\r\n\t\tvar m = this.elements;\r\n\r\n\t\tr[ 0 ] = m[ 0 ];\r\n\t\tr[ 1 ] = m[ 3 ];\r\n\t\tr[ 2 ] = m[ 6 ];\r\n\t\tr[ 3 ] = m[ 1 ];\r\n\t\tr[ 4 ] = m[ 4 ];\r\n\t\tr[ 5 ] = m[ 7 ];\r\n\t\tr[ 6 ] = m[ 2 ];\r\n\t\tr[ 7 ] = m[ 5 ];\r\n\t\tr[ 8 ] = m[ 8 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {\r\n\r\n\t\tvar c = Math.cos( rotation );\r\n\t\tvar s = Math.sin( rotation );\r\n\r\n\t\tthis.set(\r\n\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\r\n\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\r\n\t\t\t0, 0, 1\r\n\t\t);\r\n\r\n\t},\r\n\r\n\tscale: function ( sx, sy ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\r\n\t\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trotate: function ( theta ) {\r\n\r\n\t\tvar c = Math.cos( theta );\r\n\t\tvar s = Math.sin( theta );\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\r\n\t\tvar a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\r\n\r\n\t\tte[ 0 ] = c * a11 + s * a21;\r\n\t\tte[ 3 ] = c * a12 + s * a22;\r\n\t\tte[ 6 ] = c * a13 + s * a23;\r\n\r\n\t\tte[ 1 ] = - s * a11 + c * a21;\r\n\t\tte[ 4 ] = - s * a12 + c * a22;\r\n\t\tte[ 7 ] = - s * a13 + c * a23;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttranslate: function ( tx, ty ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\r\n\t\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( matrix ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar me = matrix.elements;\r\n\r\n\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\tthis.elements[ i ] = array[ i + offset ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tarray[ offset ] = te[ 0 ];\r\n\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\r\n\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\r\n\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\t\tarray[ offset + 8 ] = te[ 8 ];\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/loader/Layers.js\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nfunction Layers() {\r\n\r\n\tthis.mask = 1 | 0;\r\n\r\n}\r\n\r\nObject.assign( Layers.prototype, {\r\n\r\n\tset: function ( channel ) {\r\n\r\n\t\tthis.mask = 1 << channel | 0;\r\n\r\n\t},\r\n\r\n\tenable: function ( channel ) {\r\n\r\n\t\tthis.mask |= 1 << channel | 0;\r\n\r\n\t},\r\n\r\n\ttoggle: function ( channel ) {\r\n\r\n\t\tthis.mask ^= 1 << channel | 0;\r\n\r\n\t},\r\n\r\n\tdisable: function ( channel ) {\r\n\r\n\t\tthis.mask &= ~ ( 1 << channel | 0 );\r\n\r\n\t},\r\n\r\n\ttest: function ( layers ) {\r\n\r\n\t\treturn ( this.mask & layers.mask ) !== 0;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/loader/Object3D.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author elephantatwork / www.elephantatwork.ch\r\n */\r\n\r\nvar object3DId = 0;\r\n\r\nfunction Object3D() {\r\n\r\n\tObject.defineProperty( this, 'id', { value: object3DId ++ } );\r\n\r\n\tthis.uuid = _Math.generateUUID();\r\n\r\n\tthis.name = '';\r\n\tthis.type = 'Object3D';\r\n\r\n\tthis.parent = null;\r\n\tthis.children = [];\r\n\r\n\tthis.up = Object3D.DefaultUp.clone();\r\n\r\n\tvar position = new Vector3();\r\n\tvar rotation = new Euler();\r\n\tvar quaternion = new Quaternion();\r\n\tvar scale = new Vector3( 1, 1, 1 );\r\n\r\n\tfunction onRotationChange() {\r\n\r\n\t\tquaternion.setFromEuler( rotation, false );\r\n\r\n\t}\r\n\r\n\tfunction onQuaternionChange() {\r\n\r\n\t\trotation.setFromQuaternion( quaternion, undefined, false );\r\n\r\n\t}\r\n\r\n\trotation.onChange( onRotationChange );\r\n\tquaternion.onChange( onQuaternionChange );\r\n\r\n\tObject.defineProperties( this, {\r\n\t\tposition: {\r\n\t\t\tconfigurable: true,\r\n\t\t\tenumerable: true,\r\n\t\t\tvalue: position\r\n\t\t},\r\n\t\trotation: {\r\n\t\t\tconfigurable: true,\r\n\t\t\tenumerable: true,\r\n\t\t\tvalue: rotation\r\n\t\t},\r\n\t\tquaternion: {\r\n\t\t\tconfigurable: true,\r\n\t\t\tenumerable: true,\r\n\t\t\tvalue: quaternion\r\n\t\t},\r\n\t\tscale: {\r\n\t\t\tconfigurable: true,\r\n\t\t\tenumerable: true,\r\n\t\t\tvalue: scale\r\n\t\t},\r\n\t\tmodelViewMatrix: {\r\n\t\t\tvalue: new Matrix4()\r\n\t\t},\r\n\t\tnormalMatrix: {\r\n\t\t\tvalue: new Matrix3()\r\n\t\t}\r\n\t} );\r\n\r\n\tthis.matrix = new Matrix4();\r\n\tthis.matrixWorld = new Matrix4();\r\n\r\n\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\r\n\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\tthis.layers = new Layers();\r\n\tthis.visible = true;\r\n\r\n\tthis.castShadow = false;\r\n\tthis.receiveShadow = false;\r\n\r\n\tthis.frustumCulled = true;\r\n\tthis.renderOrder = 0;\r\n\r\n\tthis.userData = {};\r\n\r\n}\r\n\r\nObject3D.DefaultUp = new Vector3( 0, 1, 0 );\r\nObject3D.DefaultMatrixAutoUpdate = true;\r\n\r\nObject3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\tconstructor: Object3D,\r\n\r\n\tisObject3D: true,\r\n\r\n\tonBeforeRender: function () {},\r\n\tonAfterRender: function () {},\r\n\r\n\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\r\n\r\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\r\n\r\n\t},\r\n\r\n\tapplyQuaternion: function ( q ) {\r\n\r\n\t\tthis.quaternion.premultiply( q );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetRotationFromAxisAngle: function ( axis, angle ) {\r\n\r\n\t\t// assumes axis is normalized\r\n\r\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\r\n\r\n\t},\r\n\r\n\tsetRotationFromEuler: function ( euler ) {\r\n\r\n\t\tthis.quaternion.setFromEuler( euler, true );\r\n\r\n\t},\r\n\r\n\tsetRotationFromMatrix: function ( m ) {\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tthis.quaternion.setFromRotationMatrix( m );\r\n\r\n\t},\r\n\r\n\tsetRotationFromQuaternion: function ( q ) {\r\n\r\n\t\t// assumes q is normalized\r\n\r\n\t\tthis.quaternion.copy( q );\r\n\r\n\t},\r\n\r\n\trotateOnAxis: function () {\r\n\r\n\t\t// rotate object on axis in object space\r\n\t\t// axis is assumed to be normalized\r\n\r\n\t\tvar q1 = new Quaternion();\r\n\r\n\t\treturn function rotateOnAxis( axis, angle ) {\r\n\r\n\t\t\tq1.setFromAxisAngle( axis, angle );\r\n\r\n\t\t\tthis.quaternion.multiply( q1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateOnWorldAxis: function () {\r\n\r\n\t\t// rotate object on axis in world space\r\n\t\t// axis is assumed to be normalized\r\n\t\t// method assumes no rotated parent\r\n\r\n\t\tvar q1 = new Quaternion();\r\n\r\n\t\treturn function rotateOnWorldAxis( axis, angle ) {\r\n\r\n\t\t\tq1.setFromAxisAngle( axis, angle );\r\n\r\n\t\t\tthis.quaternion.premultiply( q1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateX: function () {\r\n\r\n\t\tvar v1 = new Vector3( 1, 0, 0 );\r\n\r\n\t\treturn function rotateX( angle ) {\r\n\r\n\t\t\treturn this.rotateOnAxis( v1, angle );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateY: function () {\r\n\r\n\t\tvar v1 = new Vector3( 0, 1, 0 );\r\n\r\n\t\treturn function rotateY( angle ) {\r\n\r\n\t\t\treturn this.rotateOnAxis( v1, angle );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateZ: function () {\r\n\r\n\t\tvar v1 = new Vector3( 0, 0, 1 );\r\n\r\n\t\treturn function rotateZ( angle ) {\r\n\r\n\t\t\treturn this.rotateOnAxis( v1, angle );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslateOnAxis: function () {\r\n\r\n\t\t// translate object by distance along axis in object space\r\n\t\t// axis is assumed to be normalized\r\n\r\n\t\tvar v1 = new Vector3();\r\n\r\n\t\treturn function translateOnAxis( axis, distance ) {\r\n\r\n\t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\r\n\r\n\t\t\tthis.position.add( v1.multiplyScalar( distance ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslateX: function () {\r\n\r\n\t\tvar v1 = new Vector3( 1, 0, 0 );\r\n\r\n\t\treturn function translateX( distance ) {\r\n\r\n\t\t\treturn this.translateOnAxis( v1, distance );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslateY: function () {\r\n\r\n\t\tvar v1 = new Vector3( 0, 1, 0 );\r\n\r\n\t\treturn function translateY( distance ) {\r\n\r\n\t\t\treturn this.translateOnAxis( v1, distance );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslateZ: function () {\r\n\r\n\t\tvar v1 = new Vector3( 0, 0, 1 );\r\n\r\n\t\treturn function translateZ( distance ) {\r\n\r\n\t\t\treturn this.translateOnAxis( v1, distance );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tlocalToWorld: function ( vector ) {\r\n\r\n\t\treturn vector.applyMatrix4( this.matrixWorld );\r\n\r\n\t},\r\n\r\n\tworldToLocal: function () {\r\n\r\n\t\tvar m1 = new Matrix4();\r\n\r\n\t\treturn function worldToLocal( vector ) {\r\n\r\n\t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tlookAt: function () {\r\n\r\n\t\t// This method does not support objects having non-uniformly-scaled parent(s)\r\n\r\n\t\tvar q1 = new Quaternion();\r\n\t\tvar m1 = new Matrix4();\r\n\t\tvar target = new Vector3();\r\n\t\tvar position = new Vector3();\r\n\r\n\t\treturn function lookAt( x, y, z ) {\r\n\r\n\t\t\tif ( x.isVector3 ) {\r\n\r\n\t\t\t\ttarget.copy( x );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttarget.set( x, y, z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar parent = this.parent;\r\n\r\n\t\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\t\tposition.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t\tif ( this.isCamera || this.isLight ) {\r\n\r\n\t\t\t\tm1.lookAt( position, target, this.up );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tm1.lookAt( target, position, this.up );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\r\n\r\n\t\t\tif ( parent ) {\r\n\r\n\t\t\t\tm1.extractRotation( parent.matrixWorld );\r\n\t\t\t\tq1.setFromRotationMatrix( m1 );\r\n\t\t\t\tthis.quaternion.premultiply( q1.inverse() );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tadd: function ( object ) {\r\n\r\n\t\tif ( arguments.length > 1 ) {\r\n\r\n\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\r\n\r\n\t\t\t\tthis.add( arguments[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tif ( object === this ) {\r\n\r\n\t\t\tconsole.error( \"COOL.Object3D.add: object can't be added as a child of itself.\", object );\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ( object && object.isObject3D ) ) {\r\n\r\n\t\t\tif ( object.parent !== null ) {\r\n\r\n\t\t\t\tobject.parent.remove( object );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.parent = this;\r\n\t\t\tobject.dispatchEvent( { type: 'added' } );\r\n\r\n\t\t\tthis.children.push( object );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error( \"COOL.Object3D.add: object not an instance of COOL.Object3D.\", object );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tremove: function ( object ) {\r\n\r\n\t\tif ( arguments.length > 1 ) {\r\n\r\n\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\r\n\r\n\t\t\t\tthis.remove( arguments[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tvar index = this.children.indexOf( object );\r\n\r\n\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\tobject.parent = null;\r\n\r\n\t\t\tobject.dispatchEvent( { type: 'removed' } );\r\n\r\n\t\t\tthis.children.splice( index, 1 );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetObjectById: function ( id ) {\r\n\r\n\t\treturn this.getObjectByProperty( 'id', id );\r\n\r\n\t},\r\n\r\n\tgetObjectByName: function ( name ) {\r\n\r\n\t\treturn this.getObjectByProperty( 'name', name );\r\n\r\n\t},\r\n\r\n\tgetObjectByProperty: function ( name, value ) {\r\n\r\n\t\tif ( this[ name ] === value ) return this;\r\n\r\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar child = this.children[ i ];\r\n\t\t\tvar object = child.getObjectByProperty( name, value );\r\n\r\n\t\t\tif ( object !== undefined ) {\r\n\r\n\t\t\t\treturn object;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\r\n\t},\r\n\r\n\tgetWorldPosition: function ( target ) {\r\n\r\n\t\tif ( target === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Object3D: .getWorldPosition() target is now required' );\r\n\t\t\ttarget = new Vector3();\r\n\r\n\t\t}\r\n\r\n\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\treturn target.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t},\r\n\r\n\tgetWorldQuaternion: function () {\r\n\r\n\t\tvar position = new Vector3();\r\n\t\tvar scale = new Vector3();\r\n\r\n\t\treturn function getWorldQuaternion( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'COOL.Object3D: .getWorldQuaternion() target is now required' );\r\n\t\t\t\ttarget = new Quaternion();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\tthis.matrixWorld.decompose( position, target, scale );\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tgetWorldScale: function () {\r\n\r\n\t\tvar position = new Vector3();\r\n\t\tvar quaternion = new Quaternion();\r\n\r\n\t\treturn function getWorldScale( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'COOL.Object3D: .getWorldScale() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\tthis.matrixWorld.decompose( position, quaternion, target );\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tgetWorldDirection: function ( target ) {\r\n\r\n\t\tif ( target === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Object3D: .getWorldDirection() target is now required' );\r\n\t\t\ttarget = new Vector3();\r\n\r\n\t\t}\r\n\r\n\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\tvar e = this.matrixWorld.elements;\r\n\r\n\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\r\n\r\n\t},\r\n\r\n\traycast: function () {},\r\n\r\n\ttraverse: function ( callback ) {\r\n\r\n\t\tcallback( this );\r\n\r\n\t\tvar children = this.children;\r\n\r\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tchildren[ i ].traverse( callback );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttraverseVisible: function ( callback ) {\r\n\r\n\t\tif ( this.visible === false ) return;\r\n\r\n\t\tcallback( this );\r\n\r\n\t\tvar children = this.children;\r\n\r\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tchildren[ i ].traverseVisible( callback );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttraverseAncestors: function ( callback ) {\r\n\r\n\t\tvar parent = this.parent;\r\n\r\n\t\tif ( parent !== null ) {\r\n\r\n\t\t\tcallback( parent );\r\n\r\n\t\t\tparent.traverseAncestors( callback );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tupdateMatrix: function () {\r\n\r\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\r\n\r\n\t\tthis.matrixWorldNeedsUpdate = true;\r\n\r\n\t},\r\n\r\n\tupdateMatrixWorld: function ( force ) {\r\n\r\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\r\n\r\n\t\tif ( this.matrixWorldNeedsUpdate || force ) {\r\n\r\n\t\t\tif ( this.parent === null ) {\r\n\r\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\t\tforce = true;\r\n\r\n\t\t}\r\n\r\n\t\t// update children\r\n\r\n\t\tvar children = this.children;\r\n\r\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tchildren[ i ].updateMatrixWorld( force );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tupdateWorldMatrix: function ( updateParents, updateChildren ) {\r\n\r\n\t\tvar parent = this.parent;\r\n\r\n\t\tif ( updateParents === true && parent !== null ) {\r\n\r\n\t\t\tparent.updateWorldMatrix( true, false );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\r\n\r\n\t\tif ( this.parent === null ) {\r\n\r\n\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t}\r\n\r\n\t\t// update children\r\n\r\n\t\tif ( updateChildren === true ) {\r\n\r\n\t\t\tvar children = this.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tchildren[ i ].updateWorldMatrix( false, true );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttoJSON: function ( meta ) {\r\n\r\n\t\t// meta is a string when called from JSON.stringify\r\n\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\tvar output = {};\r\n\r\n\t\t// meta is a hash used to collect geometries, materials.\r\n\t\t// not providing it implies that this is the root object\r\n\t\t// being serialized.\r\n\t\tif ( isRootObject ) {\r\n\r\n\t\t\t// initialize meta obj\r\n\t\t\tmeta = {\r\n\t\t\t\tgeometries: {},\r\n\t\t\t\tmaterials: {},\r\n\t\t\t\ttextures: {},\r\n\t\t\t\timages: {},\r\n\t\t\t\tshapes: {}\r\n\t\t\t};\r\n\r\n\t\t\toutput.metadata = {\r\n\t\t\t\tversion: 4.5,\r\n\t\t\t\ttype: 'Object',\r\n\t\t\t\tgenerator: 'Object3D.toJSON'\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\t// standard Object3D serialization\r\n\r\n\t\tvar object = {};\r\n\r\n\t\tobject.uuid = this.uuid;\r\n\t\tobject.type = this.type;\r\n\r\n\t\tif ( this.name !== '' ) object.name = this.name;\r\n\t\tif ( this.castShadow === true ) object.castShadow = true;\r\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\r\n\t\tif ( this.visible === false ) object.visible = false;\r\n\t\tif ( this.frustumCulled === false ) object.frustumCulled = false;\r\n\t\tif ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;\r\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\r\n\r\n\t\tobject.layers = this.layers.mask;\r\n\t\tobject.matrix = this.matrix.toArray();\r\n\r\n\t\tif ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;\r\n\r\n\t\t//\r\n\r\n\t\tfunction serialize( library, element ) {\r\n\r\n\t\t\tif ( library[ element.uuid ] === undefined ) {\r\n\r\n\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn element.uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.isMesh || this.isLine || this.isPoints ) {\r\n\r\n\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\r\n\r\n\t\t\tvar parameters = this.geometry.parameters;\r\n\r\n\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\r\n\r\n\t\t\t\tvar shapes = parameters.shapes;\r\n\r\n\t\t\t\tif ( Array.isArray( shapes ) ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar shape = shapes[ i ];\r\n\r\n\t\t\t\t\t\tserialize( meta.shapes, shape );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tserialize( meta.shapes, shapes );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.material !== undefined ) {\r\n\r\n\t\t\tif ( Array.isArray( this.material ) ) {\r\n\r\n\t\t\t\tvar uuids = [];\r\n\r\n\t\t\t\tfor ( var i = 0, l = this.material.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tobject.material = uuids;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tobject.material = serialize( meta.materials, this.material );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( this.children.length > 0 ) {\r\n\r\n\t\t\tobject.children = [];\r\n\r\n\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\r\n\r\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( isRootObject ) {\r\n\r\n\t\t\tvar geometries = extractFromCache( meta.geometries );\r\n\t\t\tvar materials = extractFromCache( meta.materials );\r\n\t\t\tvar textures = extractFromCache( meta.textures );\r\n\t\t\tvar images = extractFromCache( meta.images );\r\n\t\t\tvar shapes = extractFromCache( meta.shapes );\r\n\r\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\r\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\r\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\r\n\t\t\tif ( images.length > 0 ) output.images = images;\r\n\t\t\tif ( shapes.length > 0 ) output.shapes = shapes;\r\n\r\n\t\t}\r\n\r\n\t\toutput.object = object;\r\n\r\n\t\treturn output;\r\n\r\n\t\t// extract data from the cache hash\r\n\t\t// remove metadata on each item\r\n\t\t// and return as array\r\n\t\tfunction extractFromCache( cache ) {\r\n\r\n\t\t\tvar values = [];\r\n\t\t\tfor ( var key in cache ) {\r\n\r\n\t\t\t\tvar data = cache[ key ];\r\n\t\t\t\tdelete data.metadata;\r\n\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t}\r\n\t\t\treturn values;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function ( recursive ) {\r\n\r\n\t\treturn new this.constructor().copy( this, recursive );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source, recursive ) {\r\n\r\n\t\tif ( recursive === undefined ) recursive = true;\r\n\r\n\t\tthis.name = source.name;\r\n\r\n\t\tthis.up.copy( source.up );\r\n\r\n\t\tthis.position.copy( source.position );\r\n\t\tthis.quaternion.copy( source.quaternion );\r\n\t\tthis.scale.copy( source.scale );\r\n\r\n\t\tthis.matrix.copy( source.matrix );\r\n\t\tthis.matrixWorld.copy( source.matrixWorld );\r\n\r\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\r\n\r\n\t\tthis.layers.mask = source.layers.mask;\r\n\t\tthis.visible = source.visible;\r\n\r\n\t\tthis.castShadow = source.castShadow;\r\n\t\tthis.receiveShadow = source.receiveShadow;\r\n\r\n\t\tthis.frustumCulled = source.frustumCulled;\r\n\t\tthis.renderOrder = source.renderOrder;\r\n\r\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\r\n\r\n\t\tif ( recursive === true ) {\r\n\r\n\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\r\n\r\n\t\t\t\tvar child = source.children[ i ];\r\n\t\t\t\tthis.add( child.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/loader/Geometry.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author kile / http://kile.stravaganza.org/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nvar geometryId = 0; // Geometry uses even numbers as Id\r\n\r\nfunction loader_Geometry_Geometry() {\r\n\r\n\tObject.defineProperty( this, 'id', { value: geometryId += 2 } );\r\n\r\n\tthis.uuid = _Math.generateUUID();\r\n\r\n\tthis.name = '';\r\n\tthis.type = 'Geometry';\r\n\r\n\tthis.vertices = [];\r\n\tthis.colors = [];\r\n\tthis.faces = [];\r\n\tthis.faceVertexUvs = [[]];\r\n\r\n\tthis.morphTargets = [];\r\n\tthis.morphNormals = [];\r\n\r\n\tthis.skinWeights = [];\r\n\tthis.skinIndices = [];\r\n\r\n\tthis.lineDistances = [];\r\n\r\n\tthis.boundingBox = null;\r\n\tthis.boundingSphere = null;\r\n\r\n\t// update flags\r\n\r\n\tthis.elementsNeedUpdate = false;\r\n\tthis.verticesNeedUpdate = false;\r\n\tthis.uvsNeedUpdate = false;\r\n\tthis.normalsNeedUpdate = false;\r\n\tthis.colorsNeedUpdate = false;\r\n\tthis.lineDistancesNeedUpdate = false;\r\n\tthis.groupsNeedUpdate = false;\r\n\r\n}\r\n\r\nloader_Geometry_Geometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\tconstructor: loader_Geometry_Geometry,\r\n\r\n\tisGeometry: true,\r\n\r\n\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar vertex = this.vertices[ i ];\r\n\t\t\tvertex.applyMatrix4( matrix );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar face = this.faces[ i ];\r\n\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.boundingBox !== null ) {\r\n\r\n\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.boundingSphere !== null ) {\r\n\r\n\t\t\tthis.computeBoundingSphere();\r\n\r\n\t\t}\r\n\r\n\t\tthis.verticesNeedUpdate = true;\r\n\t\tthis.normalsNeedUpdate = true;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trotateX: function () {\r\n\r\n\t\t// rotate geometry around world x-axis\r\n\r\n\t\tvar m1 = new Matrix4();\r\n\r\n\t\treturn function rotateX( angle ) {\r\n\r\n\t\t\tm1.makeRotationX( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateY: function () {\r\n\r\n\t\t// rotate geometry around world y-axis\r\n\r\n\t\tvar m1 = new Matrix4();\r\n\r\n\t\treturn function rotateY( angle ) {\r\n\r\n\t\t\tm1.makeRotationY( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateZ: function () {\r\n\r\n\t\t// rotate geometry around world z-axis\r\n\r\n\t\tvar m1 = new Matrix4();\r\n\r\n\t\treturn function rotateZ( angle ) {\r\n\r\n\t\t\tm1.makeRotationZ( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslate: function () {\r\n\r\n\t\t// translate geometry\r\n\r\n\t\tvar m1 = new Matrix4();\r\n\r\n\t\treturn function translate( x, y, z ) {\r\n\r\n\t\t\tm1.makeTranslation( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tscale: function () {\r\n\r\n\t\t// scale geometry\r\n\r\n\t\tvar m1 = new Matrix4();\r\n\r\n\t\treturn function scale( x, y, z ) {\r\n\r\n\t\t\tm1.makeScale( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tlookAt: function () {\r\n\r\n\t\tvar obj = new Object3D();\r\n\r\n\t\treturn function lookAt( vector ) {\r\n\r\n\t\t\tobj.lookAt( vector );\r\n\r\n\t\t\tobj.updateMatrix();\r\n\r\n\t\t\tthis.applyMatrix( obj.matrix );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tfromBufferGeometry: function ( geometry ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\r\n\t\tvar attributes = geometry.attributes;\r\n\r\n\t\tvar positions = attributes.position.array;\r\n\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\r\n\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\r\n\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\r\n\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\r\n\r\n\t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\r\n\r\n\t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\r\n\r\n\t\t\tscope.vertices.push( new Vector3().fromArray( positions, i ) );\r\n\r\n\t\t\tif ( colors !== undefined ) {\r\n\r\n\t\t\t\tscope.colors.push( new Color().fromArray( colors, i ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction addFace( a, b, c, materialIndex ) {\r\n\r\n\t\t\tvar vertexColors = ( colors === undefined ) ? [] : [\r\n\t\t\t\tscope.colors[ a ].clone(),\r\n\t\t\t\tscope.colors[ b ].clone(),\r\n\t\t\t\tscope.colors[ c ].clone() ];\r\n\r\n\t\t\tvar vertexNormals = ( normals === undefined ) ? [] : [\r\n\t\t\t\tnew Vector3().fromArray( normals, a * 3 ),\r\n\t\t\t\tnew Vector3().fromArray( normals, b * 3 ),\r\n\t\t\t\tnew Vector3().fromArray( normals, c * 3 )\r\n\t\t\t];\r\n\r\n\t\t\tvar face = new Face3_Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\r\n\r\n\t\t\tscope.faces.push( face );\r\n\r\n\t\t\tif ( uvs !== undefined ) {\r\n\r\n\t\t\t\tscope.faceVertexUvs[ 0 ].push( [\r\n\t\t\t\t\tnew Vector2().fromArray( uvs, a * 2 ),\r\n\t\t\t\t\tnew Vector2().fromArray( uvs, b * 2 ),\r\n\t\t\t\t\tnew Vector2().fromArray( uvs, c * 2 )\r\n\t\t\t\t] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uvs2 !== undefined ) {\r\n\r\n\t\t\t\tscope.faceVertexUvs[ 1 ].push( [\r\n\t\t\t\t\tnew Vector2().fromArray( uvs2, a * 2 ),\r\n\t\t\t\t\tnew Vector2().fromArray( uvs2, b * 2 ),\r\n\t\t\t\t\tnew Vector2().fromArray( uvs2, c * 2 )\r\n\t\t\t\t] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar groups = geometry.groups;\r\n\r\n\t\tif ( groups.length > 0 ) {\r\n\r\n\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\r\n\r\n\t\t\t\tvar group = groups[ i ];\r\n\r\n\t\t\t\tvar start = group.start;\r\n\t\t\t\tvar count = group.count;\r\n\r\n\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\r\n\r\n\t\t\t\t\tif ( indices !== undefined ) {\r\n\r\n\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\taddFace( j, j + 1, j + 2, group.materialIndex );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( indices !== undefined ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\r\n\r\n\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\r\n\r\n\t\t\t\t\taddFace( i, i + 1, i + 2 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.computeFaceNormals();\r\n\r\n\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcenter: function () {\r\n\r\n\t\tvar offset = new Vector3();\r\n\r\n\t\treturn function center() {\r\n\r\n\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t\tthis.boundingBox.getCenter( offset ).negate();\r\n\r\n\t\t\tthis.translate( offset.x, offset.y, offset.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tnormalize: function () {\r\n\r\n\t\tthis.computeBoundingSphere();\r\n\r\n\t\tvar center = this.boundingSphere.center;\r\n\t\tvar radius = this.boundingSphere.radius;\r\n\r\n\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\r\n\r\n\t\tvar matrix = new Matrix4();\r\n\t\tmatrix.set(\r\n\t\t\ts, 0, 0, - s * center.x,\r\n\t\t\t0, s, 0, - s * center.y,\r\n\t\t\t0, 0, s, - s * center.z,\r\n\t\t\t0, 0, 0, 1\r\n\t\t);\r\n\r\n\t\tthis.applyMatrix( matrix );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcomputeFaceNormals: function () {\r\n\r\n\t\tvar cb = new Vector3(), ab = new Vector3();\r\n\r\n\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tvar face = this.faces[ f ];\r\n\r\n\t\t\tvar vA = this.vertices[ face.a ];\r\n\t\t\tvar vB = this.vertices[ face.b ];\r\n\t\t\tvar vC = this.vertices[ face.c ];\r\n\r\n\t\t\tcb.subVectors( vC, vB );\r\n\t\t\tab.subVectors( vA, vB );\r\n\t\t\tcb.cross( ab );\r\n\r\n\t\t\tcb.normalize();\r\n\r\n\t\t\tface.normal.copy( cb );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeVertexNormals: function ( areaWeighted ) {\r\n\r\n\t\tif ( areaWeighted === undefined ) areaWeighted = true;\r\n\r\n\t\tvar v, vl, f, fl, face, vertices;\r\n\r\n\t\tvertices = new Array( this.vertices.length );\r\n\r\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\tvertices[ v ] = new Vector3();\r\n\r\n\t\t}\r\n\r\n\t\tif ( areaWeighted ) {\r\n\r\n\t\t\t// vertex normals weighted by triangle areas\r\n\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\r\n\r\n\t\t\tvar vA, vB, vC;\r\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tvA = this.vertices[ face.a ];\r\n\t\t\t\tvB = this.vertices[ face.b ];\r\n\t\t\t\tvC = this.vertices[ face.c ];\r\n\r\n\t\t\t\tcb.subVectors( vC, vB );\r\n\t\t\t\tab.subVectors( vA, vB );\r\n\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\tvertices[ face.a ].add( cb );\r\n\t\t\t\tvertices[ face.b ].add( cb );\r\n\t\t\t\tvertices[ face.c ].add( cb );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.computeFaceNormals();\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tvertices[ face.a ].add( face.normal );\r\n\t\t\t\tvertices[ face.b ].add( face.normal );\r\n\t\t\t\tvertices[ face.c ].add( face.normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\tvertices[ v ].normalize();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\tif ( vertexNormals.length === 3 ) {\r\n\r\n\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\r\n\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\r\n\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\r\n\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\r\n\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.faces.length > 0 ) {\r\n\r\n\t\t\tthis.normalsNeedUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeFlatVertexNormals: function () {\r\n\r\n\t\tvar f, fl, face;\r\n\r\n\t\tthis.computeFaceNormals();\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\tif ( vertexNormals.length === 3 ) {\r\n\r\n\t\t\t\tvertexNormals[ 0 ].copy( face.normal );\r\n\t\t\t\tvertexNormals[ 1 ].copy( face.normal );\r\n\t\t\t\tvertexNormals[ 2 ].copy( face.normal );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvertexNormals[ 0 ] = face.normal.clone();\r\n\t\t\t\tvertexNormals[ 1 ] = face.normal.clone();\r\n\t\t\t\tvertexNormals[ 2 ] = face.normal.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.faces.length > 0 ) {\r\n\r\n\t\t\tthis.normalsNeedUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeMorphNormals: function () {\r\n\r\n\t\tvar i, il, f, fl, face;\r\n\r\n\t\t// save original normals\r\n\t\t// - create temp variables on first access\r\n\t\t//   otherwise just copy (for faster repeated calls)\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tif ( ! face.__originalFaceNormal ) {\r\n\r\n\t\t\t\tface.__originalFaceNormal = face.normal.clone();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tface.__originalFaceNormal.copy( face.normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\r\n\r\n\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\r\n\r\n\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// use temp geometry to compute face and vertex normals for each morph\r\n\r\n\t\tvar tmpGeo = new loader_Geometry_Geometry();\r\n\t\ttmpGeo.faces = this.faces;\r\n\r\n\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\t\t// create on first access\r\n\r\n\t\t\tif ( ! this.morphNormals[ i ] ) {\r\n\r\n\t\t\t\tthis.morphNormals[ i ] = {};\r\n\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\r\n\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\r\n\r\n\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\r\n\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\r\n\r\n\t\t\t\tvar faceNormal, vertexNormals;\r\n\r\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tfaceNormal = new Vector3();\r\n\t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\r\n\r\n\t\t\t\t\tdstNormalsFace.push( faceNormal );\r\n\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphNormals = this.morphNormals[ i ];\r\n\r\n\t\t\t// set vertices to morph target\r\n\r\n\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\r\n\r\n\t\t\t// compute morph normals\r\n\r\n\t\t\ttmpGeo.computeFaceNormals();\r\n\t\t\ttmpGeo.computeVertexNormals();\r\n\r\n\t\t\t// store morph normals\r\n\r\n\t\t\tvar faceNormal, vertexNormals;\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\r\n\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\r\n\r\n\t\t\t\tfaceNormal.copy( face.normal );\r\n\r\n\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\r\n\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\r\n\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// restore original normals\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tface.normal = face.__originalFaceNormal;\r\n\t\t\tface.vertexNormals = face.__originalVertexNormals;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeBoundingBox: function () {\r\n\r\n\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\tthis.boundingBox = new Box3();\r\n\r\n\t\t}\r\n\r\n\t\tthis.boundingBox.setFromPoints( this.vertices );\r\n\r\n\t},\r\n\r\n\tcomputeBoundingSphere: function () {\r\n\r\n\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\tthis.boundingSphere = new Sphere();\r\n\r\n\t\t}\r\n\r\n\t\tthis.boundingSphere.setFromPoints( this.vertices );\r\n\r\n\t},\r\n\r\n\tmerge: function ( geometry, matrix, materialIndexOffset ) {\r\n\r\n\t\tif ( ! ( geometry && geometry.isGeometry ) ) {\r\n\r\n\t\t\tconsole.error( 'COOL.Geometry.merge(): geometry not an instance of COOL.Geometry.', geometry );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar normalMatrix,\r\n\t\t\tvertexOffset = this.vertices.length,\r\n\t\t\tvertices1 = this.vertices,\r\n\t\t\tvertices2 = geometry.vertices,\r\n\t\t\tfaces1 = this.faces,\r\n\t\t\tfaces2 = geometry.faces,\r\n\t\t\tuvs1 = this.faceVertexUvs[ 0 ],\r\n\t\t\tuvs2 = geometry.faceVertexUvs[ 0 ],\r\n\t\t\tcolors1 = this.colors,\r\n\t\t\tcolors2 = geometry.colors;\r\n\r\n\t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\r\n\r\n\t\tif ( matrix !== undefined ) {\r\n\r\n\t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\t}\r\n\r\n\t\t// vertices\r\n\r\n\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar vertex = vertices2[ i ];\r\n\r\n\t\t\tvar vertexCopy = vertex.clone();\r\n\r\n\t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\r\n\r\n\t\t\tvertices1.push( vertexCopy );\r\n\r\n\t\t}\r\n\r\n\t\t// colors\r\n\r\n\t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\r\n\r\n\t\t\tcolors1.push( colors2[ i ].clone() );\r\n\r\n\t\t}\r\n\r\n\t\t// faces\r\n\r\n\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\r\n\t\t\t\tfaceVertexNormals = face.vertexNormals,\r\n\t\t\t\tfaceVertexColors = face.vertexColors;\r\n\r\n\t\t\tfaceCopy = new Face3_Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\r\n\t\t\tfaceCopy.normal.copy( face.normal );\r\n\r\n\t\t\tif ( normalMatrix !== undefined ) {\r\n\r\n\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tnormal = faceVertexNormals[ j ].clone();\r\n\r\n\t\t\t\tif ( normalMatrix !== undefined ) {\r\n\r\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfaceCopy.vertexNormals.push( normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfaceCopy.color.copy( face.color );\r\n\r\n\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tcolor = faceVertexColors[ j ];\r\n\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\r\n\r\n\t\t\tfaces1.push( faceCopy );\r\n\r\n\t\t}\r\n\r\n\t\t// uvs\r\n\r\n\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar uv = uvs2[ i ], uvCopy = [];\r\n\r\n\t\t\tif ( uv === undefined ) {\r\n\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tuvCopy.push( uv[ j ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuvs1.push( uvCopy );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tmergeMesh: function ( mesh ) {\r\n\r\n\t\tif ( ! ( mesh && mesh.isMesh ) ) {\r\n\r\n\t\t\tconsole.error( 'COOL.Geometry.mergeMesh(): mesh not an instance of COOL.Mesh.', mesh );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( mesh.matrixAutoUpdate ) mesh.updateMatrix();\r\n\r\n\t\tthis.merge( mesh.geometry, mesh.matrix );\r\n\r\n\t},\r\n\r\n\t/*\r\n\t * Checks for duplicate vertices with hashmap.\r\n\t * Duplicated vertices are removed\r\n\t * and faces' vertices are updated.\r\n\t */\r\n\r\n\tmergeVertices: function () {\r\n\r\n\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\r\n\t\tvar unique = [], changes = [];\r\n\r\n\t\tvar v, key;\r\n\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\r\n\t\tvar precision = Math.pow( 10, precisionPoints );\r\n\t\tvar i, il, face;\r\n\t\tvar indices, j, jl;\r\n\r\n\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tv = this.vertices[ i ];\r\n\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\r\n\r\n\t\t\tif ( verticesMap[ key ] === undefined ) {\r\n\r\n\t\t\t\tverticesMap[ key ] = i;\r\n\t\t\t\tunique.push( this.vertices[ i ] );\r\n\t\t\t\tchanges[ i ] = unique.length - 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\r\n\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// if faces are completely degenerate after merging vertices, we\r\n\t\t// have to remove them from the geometry.\r\n\t\tvar faceIndicesToRemove = [];\r\n\r\n\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tface = this.faces[ i ];\r\n\r\n\t\t\tface.a = changes[ face.a ];\r\n\t\t\tface.b = changes[ face.b ];\r\n\t\t\tface.c = changes[ face.c ];\r\n\r\n\t\t\tindices = [ face.a, face.b, face.c ];\r\n\r\n\t\t\t// if any duplicate vertices are found in a Face3\r\n\t\t\t// we have to remove the face as nothing can be saved\r\n\t\t\tfor ( var n = 0; n < 3; n ++ ) {\r\n\r\n\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\r\n\r\n\t\t\t\t\tfaceIndicesToRemove.push( i );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\r\n\r\n\t\t\tvar idx = faceIndicesToRemove[ i ];\r\n\r\n\t\t\tthis.faces.splice( idx, 1 );\r\n\r\n\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Use unique set of vertices\r\n\r\n\t\tvar diff = this.vertices.length - unique.length;\r\n\t\tthis.vertices = unique;\r\n\t\treturn diff;\r\n\r\n\t},\r\n\r\n\tsetFromPoints: function ( points ) {\r\n\r\n\t\tthis.vertices = [];\r\n\r\n\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar point = points[ i ];\r\n\t\t\tthis.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsortFacesByMaterialIndex: function () {\r\n\r\n\t\tvar faces = this.faces;\r\n\t\tvar length = faces.length;\r\n\r\n\t\t// tag faces\r\n\r\n\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\tfaces[ i ]._id = i;\r\n\r\n\t\t}\r\n\r\n\t\t// sort faces\r\n\r\n\t\tfunction materialIndexSort( a, b ) {\r\n\r\n\t\t\treturn a.materialIndex - b.materialIndex;\r\n\r\n\t\t}\r\n\r\n\t\tfaces.sort( materialIndexSort );\r\n\r\n\t\t// sort uvs\r\n\r\n\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\r\n\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\r\n\r\n\t\tvar newUvs1, newUvs2;\r\n\r\n\t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\r\n\t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\r\n\r\n\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\tvar id = faces[ i ]._id;\r\n\r\n\t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\r\n\t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\r\n\r\n\t\t}\r\n\r\n\t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\r\n\t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\r\n\r\n\t},\r\n\r\n\ttoJSON: function () {\r\n\r\n\t\tvar data = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.5,\r\n\t\t\t\ttype: 'Geometry',\r\n\t\t\t\tgenerator: 'Geometry.toJSON'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// standard Geometry serialization\r\n\r\n\t\tdata.uuid = this.uuid;\r\n\t\tdata.type = this.type;\r\n\t\tif ( this.name !== '' ) data.name = this.name;\r\n\r\n\t\tif ( this.parameters !== undefined ) {\r\n\r\n\t\t\tvar parameters = this.parameters;\r\n\r\n\t\t\tfor ( var key in parameters ) {\r\n\r\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t\tvar vertices = [];\r\n\r\n\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\r\n\r\n\t\t\tvar vertex = this.vertices[ i ];\r\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t}\r\n\r\n\t\tvar faces = [];\r\n\t\tvar normals = [];\r\n\t\tvar normalsHash = {};\r\n\t\tvar colors = [];\r\n\t\tvar colorsHash = {};\r\n\t\tvar uvs = [];\r\n\t\tvar uvsHash = {};\r\n\r\n\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\r\n\r\n\t\t\tvar face = this.faces[ i ];\r\n\r\n\t\t\tvar hasMaterial = true;\r\n\t\t\tvar hasFaceUv = false; // deprecated\r\n\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\r\n\t\t\tvar hasFaceNormal = face.normal.length() > 0;\r\n\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\r\n\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\r\n\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\r\n\r\n\t\t\tvar faceType = 0;\r\n\r\n\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\r\n\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\r\n\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\r\n\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\r\n\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\r\n\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\r\n\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\r\n\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\r\n\r\n\t\t\tfaces.push( faceType );\r\n\t\t\tfaces.push( face.a, face.b, face.c );\r\n\t\t\tfaces.push( face.materialIndex );\r\n\r\n\t\t\tif ( hasFaceVertexUv ) {\r\n\r\n\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\r\n\r\n\t\t\t\tfaces.push(\r\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\r\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\r\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceNormal ) {\r\n\r\n\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceVertexNormal ) {\r\n\r\n\t\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\t\tfaces.push(\r\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\r\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\r\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceColor ) {\r\n\r\n\t\t\t\tfaces.push( getColorIndex( face.color ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceVertexColor ) {\r\n\r\n\t\t\t\tvar vertexColors = face.vertexColors;\r\n\r\n\t\t\t\tfaces.push(\r\n\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\r\n\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\r\n\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction setBit( value, position, enabled ) {\r\n\r\n\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\r\n\r\n\t\t}\r\n\r\n\t\tfunction getNormalIndex( normal ) {\r\n\r\n\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\r\n\r\n\t\t\tif ( normalsHash[ hash ] !== undefined ) {\r\n\r\n\t\t\t\treturn normalsHash[ hash ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tnormalsHash[ hash ] = normals.length / 3;\r\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\treturn normalsHash[ hash ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction getColorIndex( color ) {\r\n\r\n\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\r\n\r\n\t\t\tif ( colorsHash[ hash ] !== undefined ) {\r\n\r\n\t\t\t\treturn colorsHash[ hash ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcolorsHash[ hash ] = colors.length;\r\n\t\t\tcolors.push( color.getHex() );\r\n\r\n\t\t\treturn colorsHash[ hash ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction getUvIndex( uv ) {\r\n\r\n\t\t\tvar hash = uv.x.toString() + uv.y.toString();\r\n\r\n\t\t\tif ( uvsHash[ hash ] !== undefined ) {\r\n\r\n\t\t\t\treturn uvsHash[ hash ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuvsHash[ hash ] = uvs.length / 2;\r\n\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t\treturn uvsHash[ hash ];\r\n\r\n\t\t}\r\n\r\n\t\tdata.data = {};\r\n\r\n\t\tdata.data.vertices = vertices;\r\n\t\tdata.data.normals = normals;\r\n\t\tif ( colors.length > 0 ) data.data.colors = colors;\r\n\t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\r\n\t\tdata.data.faces = faces;\r\n\r\n\t\treturn data;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\t/*\r\n\t\t // Handle primitives\r\n\r\n\t\t var parameters = this.parameters;\r\n\r\n\t\t if ( parameters !== undefined ) {\r\n\r\n\t\t var values = [];\r\n\r\n\t\t for ( var key in parameters ) {\r\n\r\n\t\t values.push( parameters[ key ] );\r\n\r\n\t\t }\r\n\r\n\t\t var geometry = Object.create( this.constructor.prototype );\r\n\t\t this.constructor.apply( geometry, values );\r\n\t\t return geometry;\r\n\r\n\t\t }\r\n\r\n\t\t return new this.constructor().copy( this );\r\n\t\t */\r\n\r\n\t\treturn new loader_Geometry_Geometry().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tvar i, il, j, jl, k, kl;\r\n\r\n\t\t// reset\r\n\r\n\t\tthis.vertices = [];\r\n\t\tthis.colors = [];\r\n\t\tthis.faces = [];\r\n\t\tthis.faceVertexUvs = [[]];\r\n\t\tthis.morphTargets = [];\r\n\t\tthis.morphNormals = [];\r\n\t\tthis.skinWeights = [];\r\n\t\tthis.skinIndices = [];\r\n\t\tthis.lineDistances = [];\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\r\n\t\t// name\r\n\r\n\t\tthis.name = source.name;\r\n\r\n\t\t// vertices\r\n\r\n\t\tvar vertices = source.vertices;\r\n\r\n\t\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.vertices.push( vertices[ i ].clone() );\r\n\r\n\t\t}\r\n\r\n\t\t// colors\r\n\r\n\t\tvar colors = source.colors;\r\n\r\n\t\tfor ( i = 0, il = colors.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.colors.push( colors[ i ].clone() );\r\n\r\n\t\t}\r\n\r\n\t\t// faces\r\n\r\n\t\tvar faces = source.faces;\r\n\r\n\t\tfor ( i = 0, il = faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.faces.push( faces[ i ].clone() );\r\n\r\n\t\t}\r\n\r\n\t\t// face vertex uvs\r\n\r\n\t\tfor ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\r\n\r\n\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\r\n\r\n\t\t\t\tthis.faceVertexUvs[ i ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\r\n\r\n\t\t\t\tfor ( k = 0, kl = uvs.length; k < kl; k ++ ) {\r\n\r\n\t\t\t\t\tvar uv = uvs[ k ];\r\n\r\n\t\t\t\t\tuvsCopy.push( uv.clone() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// morph targets\r\n\r\n\t\tvar morphTargets = source.morphTargets;\r\n\r\n\t\tfor ( i = 0, il = morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar morphTarget = {};\r\n\t\t\tmorphTarget.name = morphTargets[ i ].name;\r\n\r\n\t\t\t// vertices\r\n\r\n\t\t\tif ( morphTargets[ i ].vertices !== undefined ) {\r\n\r\n\t\t\t\tmorphTarget.vertices = [];\r\n\r\n\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tmorphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// normals\r\n\r\n\t\t\tif ( morphTargets[ i ].normals !== undefined ) {\r\n\r\n\t\t\t\tmorphTarget.normals = [];\r\n\r\n\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tmorphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.morphTargets.push( morphTarget );\r\n\r\n\t\t}\r\n\r\n\t\t// morph normals\r\n\r\n\t\tvar morphNormals = source.morphNormals;\r\n\r\n\t\tfor ( i = 0, il = morphNormals.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar morphNormal = {};\r\n\r\n\t\t\t// vertex normals\r\n\r\n\t\t\tif ( morphNormals[ i ].vertexNormals !== undefined ) {\r\n\r\n\t\t\t\tmorphNormal.vertexNormals = [];\r\n\r\n\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tvar srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];\r\n\t\t\t\t\tvar destVertexNormal = {};\r\n\r\n\t\t\t\t\tdestVertexNormal.a = srcVertexNormal.a.clone();\r\n\t\t\t\t\tdestVertexNormal.b = srcVertexNormal.b.clone();\r\n\t\t\t\t\tdestVertexNormal.c = srcVertexNormal.c.clone();\r\n\r\n\t\t\t\t\tmorphNormal.vertexNormals.push( destVertexNormal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// face normals\r\n\r\n\t\t\tif ( morphNormals[ i ].faceNormals !== undefined ) {\r\n\r\n\t\t\t\tmorphNormal.faceNormals = [];\r\n\r\n\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tmorphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.morphNormals.push( morphNormal );\r\n\r\n\t\t}\r\n\r\n\t\t// skin weights\r\n\r\n\t\tvar skinWeights = source.skinWeights;\r\n\r\n\t\tfor ( i = 0, il = skinWeights.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.skinWeights.push( skinWeights[ i ].clone() );\r\n\r\n\t\t}\r\n\r\n\t\t// skin indices\r\n\r\n\t\tvar skinIndices = source.skinIndices;\r\n\r\n\t\tfor ( i = 0, il = skinIndices.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.skinIndices.push( skinIndices[ i ].clone() );\r\n\r\n\t\t}\r\n\r\n\t\t// line distances\r\n\r\n\t\tvar lineDistances = source.lineDistances;\r\n\r\n\t\tfor ( i = 0, il = lineDistances.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.lineDistances.push( lineDistances[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\t// bounding box\r\n\r\n\t\tvar boundingBox = source.boundingBox;\r\n\r\n\t\tif ( boundingBox !== null ) {\r\n\r\n\t\t\tthis.boundingBox = boundingBox.clone();\r\n\r\n\t\t}\r\n\r\n\t\t// bounding sphere\r\n\r\n\t\tvar boundingSphere = source.boundingSphere;\r\n\r\n\t\tif ( boundingSphere !== null ) {\r\n\r\n\t\t\tthis.boundingSphere = boundingSphere.clone();\r\n\r\n\t\t}\r\n\r\n\t\t// update flags\r\n\r\n\t\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\r\n\t\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\r\n\t\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\r\n\t\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\r\n\t\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\r\n\t\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\r\n\t\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/math/Vector4.js\n/**\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author egraether / http://egraether.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nfunction Vector4_Vector4( x, y, z, w ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\tthis.z = z || 0;\r\n\tthis.w = ( w !== undefined ) ? w : 1;\r\n\r\n}\r\n\r\nObject.assign( Vector4_Vector4.prototype, {\r\n\r\n\tisVector4: true,\r\n\r\n\tset: function ( x, y, z, w ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetScalar: function ( scalar ) {\r\n\r\n\t\tthis.x = scalar;\r\n\t\tthis.y = scalar;\r\n\t\tthis.z = scalar;\r\n\t\tthis.w = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetX: function ( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetZ: function ( z ) {\r\n\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetW: function ( w ) {\r\n\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponent: function ( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tcase 2: this.z = value; break;\r\n\t\t\tcase 3: this.w = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetComponent: function ( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tcase 2: return this.z;\r\n\t\t\tcase 3: return this.w;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\r\n\r\n\t},\r\n\r\n\tcopy: function ( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\t\tthis.z = v.z;\r\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\t\tthis.z += v.z;\r\n\t\tthis.w += v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\t\tthis.z += s;\r\n\t\tthis.w += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\t\tthis.z = a.z + b.z;\r\n\t\tthis.w = a.w + b.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScaledVector: function ( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\t\tthis.z += v.z * s;\r\n\t\tthis.w += v.w * s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsub: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\t\tthis.z -= v.z;\r\n\t\tthis.w -= v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubScalar: function ( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\t\tthis.z -= s;\r\n\t\tthis.w -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\t\tthis.z = a.z - b.z;\r\n\t\tthis.w = a.w - b.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\tthis.x *= scalar;\r\n\t\tthis.y *= scalar;\r\n\t\tthis.z *= scalar;\r\n\t\tthis.w *= scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function ( m ) {\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\r\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\r\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\r\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivideScalar: function ( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t},\r\n\r\n\tsetAxisAngleFromQuaternion: function ( q ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\r\n\r\n\t\t// q is assumed to be normalized\r\n\r\n\t\tthis.w = 2 * Math.acos( q.w );\r\n\r\n\t\tvar s = Math.sqrt( 1 - q.w * q.w );\r\n\r\n\t\tif ( s < 0.0001 ) {\r\n\r\n\t\t\tthis.x = 1;\r\n\t\t\tthis.y = 0;\r\n\t\t\tthis.z = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.x = q.x / s;\r\n\t\t\tthis.y = q.y / s;\r\n\t\t\tthis.z = q.z / s;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetAxisAngleFromRotationMatrix: function ( m ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tvar angle, x, y, z,\t\t// variables for result\r\n\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\r\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\r\n\r\n\t\t\tte = m.elements,\r\n\r\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\r\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\r\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\r\n\r\n\t\t\t// singularity found\r\n\t\t\t// first check for identity matrix which must have +1 for all terms\r\n\t\t\t// in leading diagonal and zero in other terms\r\n\r\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\r\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\r\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\r\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\r\n\r\n\t\t\t\t// this singularity is identity matrix so angle = 0\r\n\r\n\t\t\t\tthis.set( 1, 0, 0, 0 );\r\n\r\n\t\t\t\treturn this; // zero angle, arbitrary axis\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// otherwise this singularity is angle = 180\r\n\r\n\t\t\tangle = Math.PI;\r\n\r\n\t\t\tvar xx = ( m11 + 1 ) / 2;\r\n\t\t\tvar yy = ( m22 + 1 ) / 2;\r\n\t\t\tvar zz = ( m33 + 1 ) / 2;\r\n\t\t\tvar xy = ( m12 + m21 ) / 4;\r\n\t\t\tvar xz = ( m13 + m31 ) / 4;\r\n\t\t\tvar yz = ( m23 + m32 ) / 4;\r\n\r\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\r\n\r\n\t\t\t\t// m11 is the largest diagonal term\r\n\r\n\t\t\t\tif ( xx < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0;\r\n\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tx = Math.sqrt( xx );\r\n\t\t\t\t\ty = xy / x;\r\n\t\t\t\t\tz = xz / x;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( yy > zz ) {\r\n\r\n\t\t\t\t// m22 is the largest diagonal term\r\n\r\n\t\t\t\tif ( yy < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\ty = 0;\r\n\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ty = Math.sqrt( yy );\r\n\t\t\t\t\tx = xy / y;\r\n\t\t\t\t\tz = yz / y;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// m33 is the largest diagonal term so base result on this\r\n\r\n\t\t\t\tif ( zz < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\tz = 0;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tz = Math.sqrt( zz );\r\n\t\t\t\t\tx = xz / z;\r\n\t\t\t\t\ty = yz / z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.set( x, y, z, angle );\r\n\r\n\t\t\treturn this; // return 180 deg rotation\r\n\r\n\t\t}\r\n\r\n\t\t// as we have reached here there are no singularities so we can handle normally\r\n\r\n\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\r\n\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\r\n\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\r\n\r\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\r\n\r\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\r\n\t\t// caught by singularity test above, but I've left it in just in case\r\n\r\n\t\tthis.x = ( m32 - m23 ) / s;\r\n\t\tthis.y = ( m13 - m31 ) / s;\r\n\t\tthis.z = ( m21 - m12 ) / s;\r\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmin: function ( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\t\tthis.z = Math.min( this.z, v.z );\r\n\t\tthis.w = Math.min( this.w, v.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmax: function ( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\t\tthis.z = Math.max( this.z, v.z );\r\n\t\tthis.w = Math.max( this.w, v.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclamp: function ( min, max ) {\r\n\r\n\t\t// assumes min < max, componentwise\r\n\r\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclampScalar: function () {\r\n\r\n\t\tvar min, max;\r\n\r\n\t\treturn function clampScalar( minVal, maxVal ) {\r\n\r\n\t\t\tif ( min === undefined ) {\r\n\r\n\t\t\t\tmin = new Vector4_Vector4();\r\n\t\t\t\tmax = new Vector4_Vector4();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmin.set( minVal, minVal, minVal, minVal );\r\n\t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\r\n\r\n\t\t\treturn this.clamp( min, max );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclampLength: function ( min, max ) {\r\n\r\n\t\tvar length = this.length();\r\n\r\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t},\r\n\r\n\tfloor: function () {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\t\tthis.z = Math.floor( this.z );\r\n\t\tthis.w = Math.floor( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tceil: function () {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\t\tthis.z = Math.ceil( this.z );\r\n\t\tthis.w = Math.ceil( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tround: function () {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\t\tthis.z = Math.round( this.z );\r\n\t\tthis.w = Math.round( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\troundToZero: function () {\r\n\r\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function () {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\t\tthis.z = - this.z;\r\n\t\tthis.w = - this.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\r\n\r\n\t},\r\n\r\n\tmanhattanLength: function () {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t},\r\n\r\n\tsetLength: function ( length ) {\r\n\r\n\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t},\r\n\r\n\tlerp: function ( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\t\tthis.w += ( v.w - this.w ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t},\r\n\r\n\tequals: function ( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\t\tthis.z = array[ offset + 2 ];\r\n\t\tthis.w = array[ offset + 3 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\t\tarray[ offset + 2 ] = this.z;\r\n\t\tarray[ offset + 3 ] = this.w;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tfromBufferAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\tif ( offset !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Vector4: offset has been removed from .fromBufferAttribute().' );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x = attribute.getX( index );\r\n\t\tthis.y = attribute.getY( index );\r\n\t\tthis.z = attribute.getZ( index );\r\n\t\tthis.w = attribute.getW( index );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/loader/BufferAttribute.js\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nfunction BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\tif ( Array.isArray( array ) ) {\r\n\r\n\t\tthrow new TypeError( 'COOL.BufferAttribute: array should be a Typed Array.' );\r\n\r\n\t}\r\n\r\n\tthis.name = '';\r\n\r\n\tthis.array = array;\r\n\tthis.itemSize = itemSize;\r\n\tthis.count = array !== undefined ? array.length / itemSize : 0;\r\n\tthis.normalized = normalized === true;\r\n\r\n\tthis.dynamic = false;\r\n\tthis.updateRange = { offset: 0, count: - 1 };\r\n\r\n\tthis.version = 0;\r\n\r\n}\r\n\r\nObject.defineProperty( BufferAttribute.prototype, 'needsUpdate', {\r\n\r\n\tset: function ( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t}\r\n\r\n} );\r\n\r\nObject.assign( BufferAttribute.prototype, {\r\n\r\n\tisBufferAttribute: true,\r\n\r\n\tonUploadCallback: function () {},\r\n\r\n\tsetArray: function ( array ) {\r\n\r\n\t\tif ( Array.isArray( array ) ) {\r\n\r\n\t\t\tthrow new TypeError( 'COOL.BufferAttribute: array should be a Typed Array.' );\r\n\r\n\t\t}\r\n\r\n\t\tthis.count = array !== undefined ? array.length / this.itemSize : 0;\r\n\t\tthis.array = array;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetDynamic: function ( value ) {\r\n\r\n\t\tthis.dynamic = value;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.name = source.name;\r\n\t\tthis.array = new source.array.constructor( source.array );\r\n\t\tthis.itemSize = source.itemSize;\r\n\t\tthis.count = source.count;\r\n\t\tthis.normalized = source.normalized;\r\n\r\n\t\tthis.dynamic = source.dynamic;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyAt: function ( index1, attribute, index2 ) {\r\n\r\n\t\tindex1 *= this.itemSize;\r\n\t\tindex2 *= attribute.itemSize;\r\n\r\n\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\r\n\r\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyArray: function ( array ) {\r\n\r\n\t\tthis.array.set( array );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyColorsArray: function ( colors ) {\r\n\r\n\t\tvar array = this.array, offset = 0;\r\n\r\n\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar color = colors[ i ];\r\n\r\n\t\t\tif ( color === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'COOL.BufferAttribute.copyColorsArray(): color is undefined', i );\r\n\t\t\t\tcolor = new Color();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tarray[ offset ++ ] = color.r;\r\n\t\t\tarray[ offset ++ ] = color.g;\r\n\t\t\tarray[ offset ++ ] = color.b;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyVector2sArray: function ( vectors ) {\r\n\r\n\t\tvar array = this.array, offset = 0;\r\n\r\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar vector = vectors[ i ];\r\n\r\n\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'COOL.BufferAttribute.copyVector2sArray(): vector is undefined', i );\r\n\t\t\t\tvector = new Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\tarray[ offset ++ ] = vector.y;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyVector3sArray: function ( vectors ) {\r\n\r\n\t\tvar array = this.array, offset = 0;\r\n\r\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar vector = vectors[ i ];\r\n\r\n\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'COOL.BufferAttribute.copyVector3sArray(): vector is undefined', i );\r\n\t\t\t\tvector = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\tarray[ offset ++ ] = vector.y;\r\n\t\t\tarray[ offset ++ ] = vector.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyVector4sArray: function ( vectors ) {\r\n\r\n\t\tvar array = this.array, offset = 0;\r\n\r\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar vector = vectors[ i ];\r\n\r\n\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'COOL.BufferAttribute.copyVector4sArray(): vector is undefined', i );\r\n\t\t\t\tvector = new Vector4_Vector4();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\tarray[ offset ++ ] = vector.y;\r\n\t\t\tarray[ offset ++ ] = vector.z;\r\n\t\t\tarray[ offset ++ ] = vector.w;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tset: function ( value, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.array.set( value, offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetX: function ( index ) {\r\n\r\n\t\treturn this.array[ index * this.itemSize ];\r\n\r\n\t},\r\n\r\n\tsetX: function ( index, x ) {\r\n\r\n\t\tthis.array[ index * this.itemSize ] = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetY: function ( index ) {\r\n\r\n\t\treturn this.array[ index * this.itemSize + 1 ];\r\n\r\n\t},\r\n\r\n\tsetY: function ( index, y ) {\r\n\r\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetZ: function ( index ) {\r\n\r\n\t\treturn this.array[ index * this.itemSize + 2 ];\r\n\r\n\t},\r\n\r\n\tsetZ: function ( index, z ) {\r\n\r\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetW: function ( index ) {\r\n\r\n\t\treturn this.array[ index * this.itemSize + 3 ];\r\n\r\n\t},\r\n\r\n\tsetW: function ( index, w ) {\r\n\r\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetXY: function ( index, x, y ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tthis.array[ index + 0 ] = x;\r\n\t\tthis.array[ index + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetXYZ: function ( index, x, y, z ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tthis.array[ index + 0 ] = x;\r\n\t\tthis.array[ index + 1 ] = y;\r\n\t\tthis.array[ index + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetXYZW: function ( index, x, y, z, w ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tthis.array[ index + 0 ] = x;\r\n\t\tthis.array[ index + 1 ] = y;\r\n\t\tthis.array[ index + 2 ] = z;\r\n\t\tthis.array[ index + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tonUpload: function ( callback ) {\r\n\r\n\t\tthis.onUploadCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n//\r\n\r\nfunction Int8BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\tBufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );\r\n\r\n}\r\n\r\nInt8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\nInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\r\n\r\n\r\nfunction Uint8BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\tBufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );\r\n\r\n}\r\n\r\nUint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\nUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\r\n\r\n\r\nfunction Uint8ClampedBufferAttribute( array, itemSize, normalized ) {\r\n\r\n\tBufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );\r\n\r\n}\r\n\r\nUint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\nUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\r\n\r\n\r\nfunction Int16BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\tBufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );\r\n\r\n}\r\n\r\nInt16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\nInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\r\n\r\n\r\nfunction Uint16BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\tBufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );\r\n\r\n}\r\n\r\nUint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\nUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\r\n\r\n\r\nfunction Int32BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\tBufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );\r\n\r\n}\r\n\r\nInt32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\nInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\r\n\r\n\r\nfunction Uint32BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\tBufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );\r\n\r\n}\r\n\r\nUint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\nUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\r\n\r\n\r\nfunction Float32BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\tBufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );\r\n\r\n}\r\n\r\nFloat32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\nFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\r\n\r\n\r\nfunction Float64BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\tBufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );\r\n\r\n}\r\n\r\nFloat64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\nFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute;\r\n\r\n//\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/loader/DirectGeometry.js\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\n\r\n\r\nfunction DirectGeometry() {\r\n\r\n\tthis.vertices = [];\r\n\tthis.normals = [];\r\n\tthis.colors = [];\r\n\tthis.uvs = [];\r\n\tthis.uvs2 = [];\r\n\r\n\tthis.groups = [];\r\n\r\n\tthis.morphTargets = {};\r\n\r\n\tthis.skinWeights = [];\r\n\tthis.skinIndices = [];\r\n\r\n\t// this.lineDistances = [];\r\n\r\n\tthis.boundingBox = null;\r\n\tthis.boundingSphere = null;\r\n\r\n\t// update flags\r\n\r\n\tthis.verticesNeedUpdate = false;\r\n\tthis.normalsNeedUpdate = false;\r\n\tthis.colorsNeedUpdate = false;\r\n\tthis.uvsNeedUpdate = false;\r\n\tthis.groupsNeedUpdate = false;\r\n\r\n}\r\n\r\nObject.assign( DirectGeometry.prototype, {\r\n\r\n\tcomputeGroups: function ( geometry ) {\r\n\r\n\t\tvar group;\r\n\t\tvar groups = [];\r\n\t\tvar materialIndex = undefined;\r\n\r\n\t\tvar faces = geometry.faces;\r\n\r\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\r\n\r\n\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t// materials\r\n\r\n\t\t\tif ( face.materialIndex !== materialIndex ) {\r\n\r\n\t\t\t\tmaterialIndex = face.materialIndex;\r\n\r\n\t\t\t\tif ( group !== undefined ) {\r\n\r\n\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\r\n\t\t\t\t\tgroups.push( group );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgroup = {\r\n\t\t\t\t\tstart: i * 3,\r\n\t\t\t\t\tmaterialIndex: materialIndex\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( group !== undefined ) {\r\n\r\n\t\t\tgroup.count = ( i * 3 ) - group.start;\r\n\t\t\tgroups.push( group );\r\n\r\n\t\t}\r\n\r\n\t\tthis.groups = groups;\r\n\r\n\t},\r\n\r\n\tfromGeometry: function ( geometry ) {\r\n\r\n\t\tvar faces = geometry.faces;\r\n\t\tvar vertices = geometry.vertices;\r\n\t\tvar faceVertexUvs = geometry.faceVertexUvs;\r\n\r\n\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\r\n\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\r\n\r\n\t\t// morphs\r\n\r\n\t\tvar morphTargets = geometry.morphTargets;\r\n\t\tvar morphTargetsLength = morphTargets.length;\r\n\r\n\t\tvar morphTargetsPosition;\r\n\r\n\t\tif ( morphTargetsLength > 0 ) {\r\n\r\n\t\t\tmorphTargetsPosition = [];\r\n\r\n\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\r\n\r\n\t\t\t\tmorphTargetsPosition[ i ] = {\r\n\t\t\t\t\tname: morphTargets[ i ].name,\r\n\t\t\t\t \tdata: []\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.morphTargets.position = morphTargetsPosition;\r\n\r\n\t\t}\r\n\r\n\t\tvar morphNormals = geometry.morphNormals;\r\n\t\tvar morphNormalsLength = morphNormals.length;\r\n\r\n\t\tvar morphTargetsNormal;\r\n\r\n\t\tif ( morphNormalsLength > 0 ) {\r\n\r\n\t\t\tmorphTargetsNormal = [];\r\n\r\n\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\r\n\r\n\t\t\t\tmorphTargetsNormal[ i ] = {\r\n\t\t\t\t\tname: morphNormals[ i ].name,\r\n\t\t\t\t \tdata: []\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.morphTargets.normal = morphTargetsNormal;\r\n\r\n\t\t}\r\n\r\n\t\t// skins\r\n\r\n\t\tvar skinIndices = geometry.skinIndices;\r\n\t\tvar skinWeights = geometry.skinWeights;\r\n\r\n\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\r\n\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\r\n\r\n\t\t//\r\n\r\n\t\tif ( vertices.length > 0 && faces.length === 0 ) {\r\n\r\n\t\t\tconsole.error( 'COOL.DirectGeometry: Faceless geometries are not supported.' );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\r\n\r\n\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\r\n\r\n\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\tif ( vertexNormals.length === 3 ) {\r\n\r\n\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar normal = face.normal;\r\n\r\n\t\t\t\tthis.normals.push( normal, normal, normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar vertexColors = face.vertexColors;\r\n\r\n\t\t\tif ( vertexColors.length === 3 ) {\r\n\r\n\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar color = face.color;\r\n\r\n\t\t\t\tthis.colors.push( color, color, color );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceVertexUv === true ) {\r\n\r\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\r\n\r\n\t\t\t\tif ( vertexUvs !== undefined ) {\r\n\r\n\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( 'COOL.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\r\n\r\n\t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceVertexUv2 === true ) {\r\n\r\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\r\n\r\n\t\t\t\tif ( vertexUvs !== undefined ) {\r\n\r\n\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( 'COOL.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\r\n\r\n\t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// morphs\r\n\r\n\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\r\n\r\n\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\r\n\r\n\t\t\t\tmorphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\r\n\r\n\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\r\n\r\n\t\t\t\tmorphTargetsNormal[ j ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// skins\r\n\r\n\t\t\tif ( hasSkinIndices ) {\r\n\r\n\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasSkinWeights ) {\r\n\r\n\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.computeGroups( geometry );\r\n\r\n\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\r\n\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\r\n\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\r\n\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\r\n\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/loader/utils.js\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nfunction arrayMin( array ) {\r\n\r\n\tif ( array.length === 0 ) return Infinity;\r\n\r\n\tvar min = array[ 0 ];\r\n\r\n\tfor ( var i = 1, l = array.length; i < l; ++ i ) {\r\n\r\n\t\tif ( array[ i ] < min ) min = array[ i ];\r\n\r\n\t}\r\n\r\n\treturn min;\r\n\r\n}\r\n\r\nfunction arrayMax( array ) {\r\n\r\n\tif ( array.length === 0 ) return - Infinity;\r\n\r\n\tvar max = array[ 0 ];\r\n\r\n\tfor ( var i = 1, l = array.length; i < l; ++ i ) {\r\n\r\n\t\tif ( array[ i ] > max ) max = array[ i ];\r\n\r\n\t}\r\n\r\n\treturn max;\r\n\r\n}\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/loader/BufferGeometry.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nvar bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\r\n\r\nfunction BufferGeometry() {\r\n\r\n\tObject.defineProperty( this, 'id', { value: bufferGeometryId += 2 } );\r\n\r\n\tthis.uuid = _Math.generateUUID();\r\n\r\n\tthis.name = '';\r\n\tthis.type = 'BufferGeometry';\r\n\r\n\tthis.index = null;\r\n\tthis.attributes = {};\r\n\r\n\tthis.morphAttributes = {};\r\n\r\n\tthis.groups = [];\r\n\r\n\tthis.boundingBox = null;\r\n\tthis.boundingSphere = null;\r\n\r\n\tthis.drawRange = { start: 0, count: Infinity };\r\n\r\n\tthis.userData = {};\r\n\r\n}\r\n\r\nBufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\tconstructor: BufferGeometry,\r\n\r\n\tisBufferGeometry: true,\r\n\r\n\tgetIndex: function () {\r\n\r\n\t\treturn this.index;\r\n\r\n\t},\r\n\r\n\tsetIndex: function ( index ) {\r\n\r\n\t\tif ( Array.isArray( index ) ) {\r\n\r\n\t\t\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.index = index;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\taddAttribute: function ( name, attribute ) {\r\n\r\n\t\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\r\n\r\n\t\t\treturn this.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( name === 'index' ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\r\n\t\t\tthis.setIndex( attribute );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tthis.attributes[ name ] = attribute;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetAttribute: function ( name ) {\r\n\r\n\t\treturn this.attributes[ name ];\r\n\r\n\t},\r\n\r\n\tremoveAttribute: function ( name ) {\r\n\r\n\t\tdelete this.attributes[ name ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddGroup: function ( start, count, materialIndex ) {\r\n\r\n\t\tthis.groups.push( {\r\n\r\n\t\t\tstart: start,\r\n\t\t\tcount: count,\r\n\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\r\n\r\n\t\t} );\r\n\r\n\t},\r\n\r\n\tclearGroups: function () {\r\n\r\n\t\tthis.groups = [];\r\n\r\n\t},\r\n\r\n\tsetDrawRange: function ( start, count ) {\r\n\r\n\t\tthis.drawRange.start = start;\r\n\t\tthis.drawRange.count = count;\r\n\r\n\t},\r\n\r\n\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\tvar position = this.attributes.position;\r\n\r\n\t\tif ( position !== undefined ) {\r\n\r\n\t\t\tmatrix.applyToBufferAttribute( position );\r\n\t\t\tposition.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tvar normal = this.attributes.normal;\r\n\r\n\t\tif ( normal !== undefined ) {\r\n\r\n\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\t\tnormalMatrix.applyToBufferAttribute( normal );\r\n\t\t\tnormal.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.boundingBox !== null ) {\r\n\r\n\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.boundingSphere !== null ) {\r\n\r\n\t\t\tthis.computeBoundingSphere();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trotateX: function () {\r\n\r\n\t\t// rotate geometry around world x-axis\r\n\r\n\t\tvar m1 = new Matrix4();\r\n\r\n\t\treturn function rotateX( angle ) {\r\n\r\n\t\t\tm1.makeRotationX( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateY: function () {\r\n\r\n\t\t// rotate geometry around world y-axis\r\n\r\n\t\tvar m1 = new Matrix4();\r\n\r\n\t\treturn function rotateY( angle ) {\r\n\r\n\t\t\tm1.makeRotationY( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateZ: function () {\r\n\r\n\t\t// rotate geometry around world z-axis\r\n\r\n\t\tvar m1 = new Matrix4();\r\n\r\n\t\treturn function rotateZ( angle ) {\r\n\r\n\t\t\tm1.makeRotationZ( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslate: function () {\r\n\r\n\t\t// translate geometry\r\n\r\n\t\tvar m1 = new Matrix4();\r\n\r\n\t\treturn function translate( x, y, z ) {\r\n\r\n\t\t\tm1.makeTranslation( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tscale: function () {\r\n\r\n\t\t// scale geometry\r\n\r\n\t\tvar m1 = new Matrix4();\r\n\r\n\t\treturn function scale( x, y, z ) {\r\n\r\n\t\t\tm1.makeScale( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tlookAt: function () {\r\n\r\n\t\tvar obj = new Object3D();\r\n\r\n\t\treturn function lookAt( vector ) {\r\n\r\n\t\t\tobj.lookAt( vector );\r\n\r\n\t\t\tobj.updateMatrix();\r\n\r\n\t\t\tthis.applyMatrix( obj.matrix );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tcenter: function () {\r\n\r\n\t\tvar offset = new Vector3();\r\n\r\n\t\treturn function center() {\r\n\r\n\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t\tthis.boundingBox.getCenter( offset ).negate();\r\n\r\n\t\t\tthis.translate( offset.x, offset.y, offset.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tsetFromObject: function ( object ) {\r\n\r\n\t\t// console.log( 'COOL.BufferGeometry.setFromObject(). Converting', object, this );\r\n\r\n\t\tvar geometry = object.geometry;\r\n\r\n\t\tif ( object.isPoints || object.isLine ) {\r\n\r\n\t\t\tvar positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );\r\n\t\t\tvar colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );\r\n\r\n\t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\r\n\t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\r\n\r\n\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\r\n\r\n\t\t\t\tvar lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );\r\n\r\n\t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( object.isMesh ) {\r\n\r\n\t\t\tif ( geometry && geometry.isGeometry ) {\r\n\r\n\t\t\t\tthis.fromGeometry( geometry );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromPoints: function ( points ) {\r\n\r\n\t\tvar position = [];\r\n\r\n\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar point = points[ i ];\r\n\t\t\tposition.push( point.x, point.y, point.z || 0 );\r\n\r\n\t\t}\r\n\r\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tupdateFromObject: function ( object ) {\r\n\r\n\t\tvar geometry = object.geometry;\r\n\r\n\t\tif ( object.isMesh ) {\r\n\r\n\t\t\tvar direct = geometry.__directGeometry;\r\n\r\n\t\t\tif ( geometry.elementsNeedUpdate === true ) {\r\n\r\n\t\t\t\tdirect = undefined;\r\n\t\t\t\tgeometry.elementsNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( direct === undefined ) {\r\n\r\n\t\t\t\treturn this.fromGeometry( geometry );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\r\n\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\r\n\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\r\n\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\r\n\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\r\n\r\n\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\tgeometry.normalsNeedUpdate = false;\r\n\t\t\tgeometry.colorsNeedUpdate = false;\r\n\t\t\tgeometry.uvsNeedUpdate = false;\r\n\t\t\tgeometry.groupsNeedUpdate = false;\r\n\r\n\t\t\tgeometry = direct;\r\n\r\n\t\t}\r\n\r\n\t\tvar attribute;\r\n\r\n\t\tif ( geometry.verticesNeedUpdate === true ) {\r\n\r\n\t\t\tattribute = this.attributes.position;\r\n\r\n\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\r\n\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.verticesNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.normalsNeedUpdate === true ) {\r\n\r\n\t\t\tattribute = this.attributes.normal;\r\n\r\n\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\tattribute.copyVector3sArray( geometry.normals );\r\n\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.normalsNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.colorsNeedUpdate === true ) {\r\n\r\n\t\t\tattribute = this.attributes.color;\r\n\r\n\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\tattribute.copyColorsArray( geometry.colors );\r\n\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.colorsNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.uvsNeedUpdate ) {\r\n\r\n\t\t\tattribute = this.attributes.uv;\r\n\r\n\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\r\n\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.uvsNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.lineDistancesNeedUpdate ) {\r\n\r\n\t\t\tattribute = this.attributes.lineDistance;\r\n\r\n\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\tattribute.copyArray( geometry.lineDistances );\r\n\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.lineDistancesNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.groupsNeedUpdate ) {\r\n\r\n\t\t\tgeometry.computeGroups( object.geometry );\r\n\t\t\tthis.groups = geometry.groups;\r\n\r\n\t\t\tgeometry.groupsNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tfromGeometry: function ( geometry ) {\r\n\r\n\t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\r\n\r\n\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\r\n\r\n\t},\r\n\r\n\tfromDirectGeometry: function ( geometry ) {\r\n\r\n\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\r\n\t\tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\r\n\r\n\t\tif ( geometry.normals.length > 0 ) {\r\n\r\n\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\r\n\t\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.colors.length > 0 ) {\r\n\r\n\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\r\n\t\t\tthis.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.uvs.length > 0 ) {\r\n\r\n\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\r\n\t\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.uvs2.length > 0 ) {\r\n\r\n\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\r\n\t\t\tthis.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\r\n\r\n\t\t}\r\n\r\n\t\t// groups\r\n\r\n\t\tthis.groups = geometry.groups;\r\n\r\n\t\t// morphs\r\n\r\n\t\tfor ( var name in geometry.morphTargets ) {\r\n\r\n\t\t\tvar array = [];\r\n\t\t\tvar morphTargets = geometry.morphTargets[ name ];\r\n\r\n\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar morphTarget = morphTargets[ i ];\r\n\r\n\t\t\t\tvar attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );\r\n\t\t\t\tattribute.name = morphTarget.name;\r\n\r\n\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget.data ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.morphAttributes[ name ] = array;\r\n\r\n\t\t}\r\n\r\n\t\t// skinning\r\n\r\n\t\tif ( geometry.skinIndices.length > 0 ) {\r\n\r\n\t\t\tvar skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );\r\n\t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.skinWeights.length > 0 ) {\r\n\r\n\t\t\tvar skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );\r\n\t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcomputeBoundingBox: function () {\r\n\r\n\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\tthis.boundingBox = new Box3();\r\n\r\n\t\t}\r\n\r\n\t\tvar position = this.attributes.position;\r\n\r\n\t\tif ( position !== undefined ) {\r\n\r\n\t\t\tthis.boundingBox.setFromBufferAttribute( position );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.boundingBox.makeEmpty();\r\n\r\n\t\t}\r\n\r\n\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\r\n\r\n\t\t\tconsole.error( 'COOL.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeBoundingSphere: function () {\r\n\r\n\t\tvar box = new Box3();\r\n\t\tvar vector = new Vector3();\r\n\r\n\t\treturn function computeBoundingSphere() {\r\n\r\n\t\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = new Sphere();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar position = this.attributes.position;\r\n\r\n\t\t\tif ( position ) {\r\n\r\n\t\t\t\tvar center = this.boundingSphere.center;\r\n\r\n\t\t\t\tbox.setFromBufferAttribute( position );\r\n\t\t\t\tbox.getCenter( center );\r\n\r\n\t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\r\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\r\n\r\n\t\t\t\tvar maxRadiusSq = 0;\r\n\r\n\t\t\t\tfor ( var i = 0, il = position.count; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvector.x = position.getX( i );\r\n\t\t\t\t\tvector.y = position.getY( i );\r\n\t\t\t\t\tvector.z = position.getZ( i );\r\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\r\n\r\n\t\t\t\t\tconsole.error( 'COOL.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tcomputeFaceNormals: function () {\r\n\r\n\t\t// backwards compatibility\r\n\r\n\t},\r\n\r\n\tcomputeVertexNormals: function () {\r\n\r\n\t\tvar index = this.index;\r\n\t\tvar attributes = this.attributes;\r\n\r\n\t\tif ( attributes.position ) {\r\n\r\n\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\tif ( attributes.normal === undefined ) {\r\n\r\n\t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// reset existing normals to zero\r\n\r\n\t\t\t\tvar array = attributes.normal.array;\r\n\r\n\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tarray[ i ] = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar normals = attributes.normal.array;\r\n\r\n\t\t\tvar vA, vB, vC;\r\n\t\t\tvar pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\r\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\r\n\r\n\t\t\t// indexed elements\r\n\r\n\t\t\tif ( index ) {\r\n\r\n\t\t\t\tvar indices = index.array;\r\n\r\n\t\t\t\tfor ( var i = 0, il = index.count; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\tvA = indices[ i + 0 ] * 3;\r\n\t\t\t\t\tvB = indices[ i + 1 ] * 3;\r\n\t\t\t\t\tvC = indices[ i + 2 ] * 3;\r\n\r\n\t\t\t\t\tpA.fromArray( positions, vA );\r\n\t\t\t\t\tpB.fromArray( positions, vB );\r\n\t\t\t\t\tpC.fromArray( positions, vC );\r\n\r\n\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\tnormals[ vA ] += cb.x;\r\n\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\r\n\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\r\n\r\n\t\t\t\t\tnormals[ vB ] += cb.x;\r\n\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\r\n\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\r\n\r\n\t\t\t\t\tnormals[ vC ] += cb.x;\r\n\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\r\n\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\r\n\r\n\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\r\n\r\n\t\t\t\t\tpA.fromArray( positions, i );\r\n\t\t\t\t\tpB.fromArray( positions, i + 3 );\r\n\t\t\t\t\tpC.fromArray( positions, i + 6 );\r\n\r\n\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\tnormals[ i ] = cb.x;\r\n\t\t\t\t\tnormals[ i + 1 ] = cb.y;\r\n\t\t\t\t\tnormals[ i + 2 ] = cb.z;\r\n\r\n\t\t\t\t\tnormals[ i + 3 ] = cb.x;\r\n\t\t\t\t\tnormals[ i + 4 ] = cb.y;\r\n\t\t\t\t\tnormals[ i + 5 ] = cb.z;\r\n\r\n\t\t\t\t\tnormals[ i + 6 ] = cb.x;\r\n\t\t\t\t\tnormals[ i + 7 ] = cb.y;\r\n\t\t\t\t\tnormals[ i + 8 ] = cb.z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.normalizeNormals();\r\n\r\n\t\t\tattributes.normal.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tmerge: function ( geometry, offset ) {\r\n\r\n\t\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\r\n\r\n\t\t\tconsole.error( 'COOL.BufferGeometry.merge(): geometry not an instance of COOL.BufferGeometry.', geometry );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( offset === undefined ) {\r\n\r\n\t\t\toffset = 0;\r\n\r\n\t\t\tconsole.warn(\r\n\t\t\t\t'COOL.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '\r\n\t\t\t\t+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'\r\n\t\t\t);\r\n\r\n\t\t}\r\n\r\n\t\tvar attributes = this.attributes;\r\n\r\n\t\tfor ( var key in attributes ) {\r\n\r\n\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\r\n\r\n\t\t\tvar attribute1 = attributes[ key ];\r\n\t\t\tvar attributeArray1 = attribute1.array;\r\n\r\n\t\t\tvar attribute2 = geometry.attributes[ key ];\r\n\t\t\tvar attributeArray2 = attribute2.array;\r\n\r\n\t\t\tvar attributeSize = attribute2.itemSize;\r\n\r\n\t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\r\n\r\n\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnormalizeNormals: function () {\r\n\r\n\t\tvar vector = new Vector3();\r\n\r\n\t\treturn function normalizeNormals() {\r\n\r\n\t\t\tvar normals = this.attributes.normal;\r\n\r\n\t\t\tfor ( var i = 0, il = normals.count; i < il; i ++ ) {\r\n\r\n\t\t\t\tvector.x = normals.getX( i );\r\n\t\t\t\tvector.y = normals.getY( i );\r\n\t\t\t\tvector.z = normals.getZ( i );\r\n\r\n\t\t\t\tvector.normalize();\r\n\r\n\t\t\t\tnormals.setXYZ( i, vector.x, vector.y, vector.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttoNonIndexed: function () {\r\n\r\n\t\tif ( this.index === null ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tvar geometry2 = new BufferGeometry();\r\n\r\n\t\tvar indices = this.index.array;\r\n\t\tvar attributes = this.attributes;\r\n\r\n\t\tfor ( var name in attributes ) {\r\n\r\n\t\t\tvar attribute = attributes[ name ];\r\n\r\n\t\t\tvar array = attribute.array;\r\n\t\t\tvar itemSize = attribute.itemSize;\r\n\r\n\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\r\n\r\n\t\t\tvar index = 0, index2 = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tindex = indices[ i ] * itemSize;\r\n\r\n\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\r\n\r\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );\r\n\r\n\t\t}\r\n\r\n\t\tvar groups = this.groups;\r\n\r\n\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar group = groups[ i ];\r\n\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\r\n\r\n\t\t}\r\n\r\n\t\treturn geometry2;\r\n\r\n\t},\r\n\r\n\ttoJSON: function () {\r\n\r\n\t\tvar data = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.5,\r\n\t\t\t\ttype: 'BufferGeometry',\r\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// standard BufferGeometry serialization\r\n\r\n\t\tdata.uuid = this.uuid;\r\n\t\tdata.type = this.type;\r\n\t\tif ( this.name !== '' ) data.name = this.name;\r\n\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\r\n\r\n\t\tif ( this.parameters !== undefined ) {\r\n\r\n\t\t\tvar parameters = this.parameters;\r\n\r\n\t\t\tfor ( var key in parameters ) {\r\n\r\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t\tdata.data = { attributes: {} };\r\n\r\n\t\tvar index = this.index;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tvar array = Array.prototype.slice.call( index.array );\r\n\r\n\t\t\tdata.data.index = {\r\n\t\t\t\ttype: index.array.constructor.name,\r\n\t\t\t\tarray: array\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tvar attributes = this.attributes;\r\n\r\n\t\tfor ( var key in attributes ) {\r\n\r\n\t\t\tvar attribute = attributes[ key ];\r\n\r\n\t\t\tvar array = Array.prototype.slice.call( attribute.array );\r\n\r\n\t\t\tdata.data.attributes[ key ] = {\r\n\t\t\t\titemSize: attribute.itemSize,\r\n\t\t\t\ttype: attribute.array.constructor.name,\r\n\t\t\t\tarray: array,\r\n\t\t\t\tnormalized: attribute.normalized\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tvar groups = this.groups;\r\n\r\n\t\tif ( groups.length > 0 ) {\r\n\r\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\r\n\r\n\t\t}\r\n\r\n\t\tvar boundingSphere = this.boundingSphere;\r\n\r\n\t\tif ( boundingSphere !== null ) {\r\n\r\n\t\t\tdata.data.boundingSphere = {\r\n\t\t\t\tcenter: boundingSphere.center.toArray(),\r\n\t\t\t\tradius: boundingSphere.radius\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\t/*\r\n\t\t // Handle primitives\r\n\r\n\t\t var parameters = this.parameters;\r\n\r\n\t\t if ( parameters !== undefined ) {\r\n\r\n\t\t var values = [];\r\n\r\n\t\t for ( var key in parameters ) {\r\n\r\n\t\t values.push( parameters[ key ] );\r\n\r\n\t\t }\r\n\r\n\t\t var geometry = Object.create( this.constructor.prototype );\r\n\t\t this.constructor.apply( geometry, values );\r\n\t\t return geometry;\r\n\r\n\t\t }\r\n\r\n\t\t return new this.constructor().copy( this );\r\n\t\t */\r\n\r\n\t\treturn new BufferGeometry().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tvar name, i, l;\r\n\r\n\t\t// reset\r\n\r\n\t\tthis.index = null;\r\n\t\tthis.attributes = {};\r\n\t\tthis.morphAttributes = {};\r\n\t\tthis.groups = [];\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\r\n\t\t// name\r\n\r\n\t\tthis.name = source.name;\r\n\r\n\t\t// index\r\n\r\n\t\tvar index = source.index;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tthis.setIndex( index.clone() );\r\n\r\n\t\t}\r\n\r\n\t\t// attributes\r\n\r\n\t\tvar attributes = source.attributes;\r\n\r\n\t\tfor ( name in attributes ) {\r\n\r\n\t\t\tvar attribute = attributes[ name ];\r\n\t\t\tthis.addAttribute( name, attribute.clone() );\r\n\r\n\t\t}\r\n\r\n\t\t// morph attributes\r\n\r\n\t\tvar morphAttributes = source.morphAttributes;\r\n\r\n\t\tfor ( name in morphAttributes ) {\r\n\r\n\t\t\tvar array = [];\r\n\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\r\n\r\n\t\t\tfor ( i = 0, l = morphAttribute.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tarray.push( morphAttribute[ i ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.morphAttributes[ name ] = array;\r\n\r\n\t\t}\r\n\r\n\t\t// groups\r\n\r\n\t\tvar groups = source.groups;\r\n\r\n\t\tfor ( i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar group = groups[ i ];\r\n\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\r\n\r\n\t\t}\r\n\r\n\t\t// bounding box\r\n\r\n\t\tvar boundingBox = source.boundingBox;\r\n\r\n\t\tif ( boundingBox !== null ) {\r\n\r\n\t\t\tthis.boundingBox = boundingBox.clone();\r\n\r\n\t\t}\r\n\r\n\t\t// bounding sphere\r\n\r\n\t\tvar boundingSphere = source.boundingSphere;\r\n\r\n\t\tif ( boundingSphere !== null ) {\r\n\r\n\t\t\tthis.boundingSphere = boundingSphere.clone();\r\n\r\n\t\t}\r\n\r\n\t\t// draw range\r\n\r\n\t\tthis.drawRange.start = source.drawRange.start;\r\n\t\tthis.drawRange.count = source.drawRange.count;\r\n\r\n\t\t// user data\r\n\r\n\t\tthis.userData = source.userData;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/extras/Earcut.js\n/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n * Port from https://github.com/mapbox/earcut (v2.1.2)\r\n */\r\n\r\nvar Earcut = {\r\n\r\n\ttriangulate: function ( data, holeIndices, dim ) {\r\n\r\n\t\tdim = dim || 2;\r\n\r\n\t\tvar hasHoles = holeIndices && holeIndices.length,\r\n\t\t\touterLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,\r\n\t\t\touterNode = linkedList( data, 0, outerLen, dim, true ),\r\n\t\t\ttriangles = [];\r\n\r\n\t\tif ( ! outerNode ) return triangles;\r\n\r\n\t\tvar minX, minY, maxX, maxY, x, y, invSize;\r\n\r\n\t\tif ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );\r\n\r\n\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\r\n\r\n\t\tif ( data.length > 80 * dim ) {\r\n\r\n\t\t\tminX = maxX = data[ 0 ];\r\n\t\t\tminY = maxY = data[ 1 ];\r\n\r\n\t\t\tfor ( var i = dim; i < outerLen; i += dim ) {\r\n\r\n\t\t\t\tx = data[ i ];\r\n\t\t\t\ty = data[ i + 1 ];\r\n\t\t\t\tif ( x < minX ) minX = x;\r\n\t\t\t\tif ( y < minY ) minY = y;\r\n\t\t\t\tif ( x > maxX ) maxX = x;\r\n\t\t\t\tif ( y > maxY ) maxY = y;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\r\n\r\n\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\r\n\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\r\n\r\n\t\t}\r\n\r\n\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize );\r\n\r\n\t\treturn triangles;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// create a circular doubly linked list from polygon points in the specified winding order\r\n\r\nfunction linkedList( data, start, end, dim, clockwise ) {\r\n\r\n\tvar i, last;\r\n\r\n\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\r\n\r\n\t\tfor ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\r\n\r\n\t} else {\r\n\r\n\t\tfor ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\r\n\r\n\t}\r\n\r\n\tif ( last && equals( last, last.next ) ) {\r\n\r\n\t\tremoveNode( last );\r\n\t\tlast = last.next;\r\n\r\n\t}\r\n\r\n\treturn last;\r\n\r\n}\r\n\r\n// eliminate colinear or duplicate points\r\n\r\nfunction filterPoints( start, end ) {\r\n\r\n\tif ( ! start ) return start;\r\n\tif ( ! end ) end = start;\r\n\r\n\tvar p = start, again;\r\n\r\n\tdo {\r\n\r\n\t\tagain = false;\r\n\r\n\t\tif ( ! p.steiner && ( equals( p, p.next ) || Earcut_area( p.prev, p, p.next ) === 0 ) ) {\r\n\r\n\t\t\tremoveNode( p );\r\n\t\t\tp = end = p.prev;\r\n\t\t\tif ( p === p.next ) break;\r\n\t\t\tagain = true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tp = p.next;\r\n\r\n\t\t}\r\n\r\n\t} while ( again || p !== end );\r\n\r\n\treturn end;\r\n\r\n}\r\n\r\n// main ear slicing loop which triangulates a polygon (given as a linked list)\r\n\r\nfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\r\n\r\n\tif ( ! ear ) return;\r\n\r\n\t// interlink polygon nodes in z-order\r\n\r\n\tif ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );\r\n\r\n\tvar stop = ear, prev, next;\r\n\r\n\t// iterate through ears, slicing them one by one\r\n\r\n\twhile ( ear.prev !== ear.next ) {\r\n\r\n\t\tprev = ear.prev;\r\n\t\tnext = ear.next;\r\n\r\n\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\r\n\r\n\t\t\t// cut off the triangle\r\n\t\t\ttriangles.push( prev.i / dim );\r\n\t\t\ttriangles.push( ear.i / dim );\r\n\t\t\ttriangles.push( next.i / dim );\r\n\r\n\t\t\tremoveNode( ear );\r\n\r\n\t\t\t// skipping the next vertice leads to less sliver triangles\r\n\t\t\tear = next.next;\r\n\t\t\tstop = next.next;\r\n\r\n\t\t\tcontinue;\r\n\r\n\t\t}\r\n\r\n\t\tear = next;\r\n\r\n\t\t// if we looped through the whole remaining polygon and can't find any more ears\r\n\r\n\t\tif ( ear === stop ) {\r\n\r\n\t\t\t// try filtering points and slicing again\r\n\r\n\t\t\tif ( ! pass ) {\r\n\r\n\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\r\n\r\n\t\t\t\t// if this didn't work, try curing all small self-intersections locally\r\n\r\n\t\t\t} else if ( pass === 1 ) {\r\n\r\n\t\t\t\tear = cureLocalIntersections( ear, triangles, dim );\r\n\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\r\n\r\n\t\t\t\t// as a last resort, try splitting the remaining polygon into two\r\n\r\n\t\t\t} else if ( pass === 2 ) {\r\n\r\n\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n// check whether a polygon node forms a valid ear with adjacent nodes\r\n\r\nfunction isEar( ear ) {\r\n\r\n\tvar a = ear.prev,\r\n\t\tb = ear,\r\n\t\tc = ear.next;\r\n\r\n\tif ( Earcut_area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\r\n\r\n\t// now make sure we don't have other points inside the potential ear\r\n\tvar p = ear.next.next;\r\n\r\n\twhile ( p !== ear.prev ) {\r\n\r\n\t\tif ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) && Earcut_area( p.prev, p, p.next ) >= 0 ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\tp = p.next;\r\n\r\n\t}\r\n\r\n\treturn true;\r\n\r\n}\r\n\r\nfunction isEarHashed( ear, minX, minY, invSize ) {\r\n\r\n\tvar a = ear.prev,\r\n\t\tb = ear,\r\n\t\tc = ear.next;\r\n\r\n\tif ( Earcut_area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\r\n\r\n\t// triangle bbox; min & max are calculated like this for speed\r\n\r\n\tvar minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\r\n\t\tminTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\r\n\t\tmaxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\r\n\t\tmaxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\r\n\r\n\t// z-order range for the current triangle bbox;\r\n\r\n\tvar minZ = zOrder( minTX, minTY, minX, minY, invSize ),\r\n\t\tmaxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\r\n\r\n\t// first look for points inside the triangle in increasing z-order\r\n\r\n\tvar p = ear.nextZ;\r\n\r\n\twhile ( p && p.z <= maxZ ) {\r\n\r\n\t\tif ( p !== ear.prev && p !== ear.next &&\r\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\r\n\t\t\t\tEarcut_area( p.prev, p, p.next ) >= 0 ) return false;\r\n\t\tp = p.nextZ;\r\n\r\n\t}\r\n\r\n\t// then look for points in decreasing z-order\r\n\r\n\tp = ear.prevZ;\r\n\r\n\twhile ( p && p.z >= minZ ) {\r\n\r\n\t\tif ( p !== ear.prev && p !== ear.next &&\r\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\r\n\t\t\t\tEarcut_area( p.prev, p, p.next ) >= 0 ) return false;\r\n\r\n\t\tp = p.prevZ;\r\n\r\n\t}\r\n\r\n\treturn true;\r\n\r\n}\r\n\r\n// go through all polygon nodes and cure small local self-intersections\r\n\r\nfunction cureLocalIntersections( start, triangles, dim ) {\r\n\r\n\tvar p = start;\r\n\r\n\tdo {\r\n\r\n\t\tvar a = p.prev, b = p.next.next;\r\n\r\n\t\tif ( ! equals( a, b ) && Earcut_intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\r\n\r\n\t\t\ttriangles.push( a.i / dim );\r\n\t\t\ttriangles.push( p.i / dim );\r\n\t\t\ttriangles.push( b.i / dim );\r\n\r\n\t\t\t// remove two nodes involved\r\n\r\n\t\t\tremoveNode( p );\r\n\t\t\tremoveNode( p.next );\r\n\r\n\t\t\tp = start = b;\r\n\r\n\t\t}\r\n\r\n\t\tp = p.next;\r\n\r\n\t} while ( p !== start );\r\n\r\n\treturn p;\r\n\r\n}\r\n\r\n// try splitting polygon into two and triangulate them independently\r\n\r\nfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\r\n\r\n\t// look for a valid diagonal that divides the polygon into two\r\n\r\n\tvar a = start;\r\n\r\n\tdo {\r\n\r\n\t\tvar b = a.next.next;\r\n\r\n\t\twhile ( b !== a.prev ) {\r\n\r\n\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\r\n\r\n\t\t\t\t// split the polygon in two by the diagonal\r\n\r\n\t\t\t\tvar c = splitPolygon( a, b );\r\n\r\n\t\t\t\t// filter colinear points around the cuts\r\n\r\n\t\t\t\ta = filterPoints( a, a.next );\r\n\t\t\t\tc = filterPoints( c, c.next );\r\n\r\n\t\t\t\t// run earcut on each half\r\n\r\n\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize );\r\n\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tb = b.next;\r\n\r\n\t\t}\r\n\r\n\t\ta = a.next;\r\n\r\n\t} while ( a !== start );\r\n\r\n}\r\n\r\n// link every hole into the outer loop, producing a single-ring polygon without holes\r\n\r\nfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\r\n\r\n\tvar queue = [], i, len, start, end, list;\r\n\r\n\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\r\n\r\n\t\tstart = holeIndices[ i ] * dim;\r\n\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\r\n\t\tlist = linkedList( data, start, end, dim, false );\r\n\t\tif ( list === list.next ) list.steiner = true;\r\n\t\tqueue.push( getLeftmost( list ) );\r\n\r\n\t}\r\n\r\n\tqueue.sort( compareX );\r\n\r\n\t// process holes from left to right\r\n\r\n\tfor ( i = 0; i < queue.length; i ++ ) {\r\n\r\n\t\teliminateHole( queue[ i ], outerNode );\r\n\t\touterNode = filterPoints( outerNode, outerNode.next );\r\n\r\n\t}\r\n\r\n\treturn outerNode;\r\n\r\n}\r\n\r\nfunction compareX( a, b ) {\r\n\r\n\treturn a.x - b.x;\r\n\r\n}\r\n\r\n// find a bridge between vertices that connects hole with an outer ring and and link it\r\n\r\nfunction eliminateHole( hole, outerNode ) {\r\n\r\n\touterNode = findHoleBridge( hole, outerNode );\r\n\r\n\tif ( outerNode ) {\r\n\r\n\t\tvar b = splitPolygon( outerNode, hole );\r\n\r\n\t\tfilterPoints( b, b.next );\r\n\r\n\t}\r\n\r\n}\r\n\r\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\r\n\r\nfunction findHoleBridge( hole, outerNode ) {\r\n\r\n\tvar p = outerNode,\r\n\t\thx = hole.x,\r\n\t\thy = hole.y,\r\n\t\tqx = - Infinity,\r\n\t\tm;\r\n\r\n\t// find a segment intersected by a ray from the hole's leftmost point to the left;\r\n\t// segment's endpoint with lesser x will be potential connection point\r\n\r\n\tdo {\r\n\r\n\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\r\n\r\n\t\t\tvar x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\r\n\r\n\t\t\tif ( x <= hx && x > qx ) {\r\n\r\n\t\t\t\tqx = x;\r\n\r\n\t\t\t\tif ( x === hx ) {\r\n\r\n\t\t\t\t\tif ( hy === p.y ) return p;\r\n\t\t\t\t\tif ( hy === p.next.y ) return p.next;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tm = p.x < p.next.x ? p : p.next;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tp = p.next;\r\n\r\n\t} while ( p !== outerNode );\r\n\r\n\tif ( ! m ) return null;\r\n\r\n\tif ( hx === qx ) return m.prev; // hole touches outer segment; pick lower endpoint\r\n\r\n\t// look for points inside the triangle of hole point, segment intersection and endpoint;\r\n\t// if there are no points found, we have a valid connection;\r\n\t// otherwise choose the point of the minimum angle with the ray as connection point\r\n\r\n\tvar stop = m,\r\n\t\tmx = m.x,\r\n\t\tmy = m.y,\r\n\t\ttanMin = Infinity,\r\n\t\ttan;\r\n\r\n\tp = m.next;\r\n\r\n\twhile ( p !== stop ) {\r\n\r\n\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\r\n\t\t\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\r\n\r\n\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\r\n\r\n\t\t\tif ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {\r\n\r\n\t\t\t\tm = p;\r\n\t\t\t\ttanMin = tan;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tp = p.next;\r\n\r\n\t}\r\n\r\n\treturn m;\r\n\r\n}\r\n\r\n// interlink polygon nodes in z-order\r\n\r\nfunction indexCurve( start, minX, minY, invSize ) {\r\n\r\n\tvar p = start;\r\n\r\n\tdo {\r\n\r\n\t\tif ( p.z === null ) p.z = zOrder( p.x, p.y, minX, minY, invSize );\r\n\t\tp.prevZ = p.prev;\r\n\t\tp.nextZ = p.next;\r\n\t\tp = p.next;\r\n\r\n\t} while ( p !== start );\r\n\r\n\tp.prevZ.nextZ = null;\r\n\tp.prevZ = null;\r\n\r\n\tsortLinked( p );\r\n\r\n}\r\n\r\n// Simon Tatham's linked list merge sort algorithm\r\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\r\n\r\nfunction sortLinked( list ) {\r\n\r\n\tvar i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;\r\n\r\n\tdo {\r\n\r\n\t\tp = list;\r\n\t\tlist = null;\r\n\t\ttail = null;\r\n\t\tnumMerges = 0;\r\n\r\n\t\twhile ( p ) {\r\n\r\n\t\t\tnumMerges ++;\r\n\t\t\tq = p;\r\n\t\t\tpSize = 0;\r\n\r\n\t\t\tfor ( i = 0; i < inSize; i ++ ) {\r\n\r\n\t\t\t\tpSize ++;\r\n\t\t\t\tq = q.nextZ;\r\n\t\t\t\tif ( ! q ) break;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tqSize = inSize;\r\n\r\n\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\r\n\r\n\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\r\n\r\n\t\t\t\t\te = p;\r\n\t\t\t\t\tp = p.nextZ;\r\n\t\t\t\t\tpSize --;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\te = q;\r\n\t\t\t\t\tq = q.nextZ;\r\n\t\t\t\t\tqSize --;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( tail ) tail.nextZ = e;\r\n\t\t\t\telse list = e;\r\n\r\n\t\t\t\te.prevZ = tail;\r\n\t\t\t\ttail = e;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tp = q;\r\n\r\n\t\t}\r\n\r\n\t\ttail.nextZ = null;\r\n\t\tinSize *= 2;\r\n\r\n\t} while ( numMerges > 1 );\r\n\r\n\treturn list;\r\n\r\n}\r\n\r\n// z-order of a point given coords and inverse of the longer side of data bbox\r\n\r\nfunction zOrder( x, y, minX, minY, invSize ) {\r\n\r\n\t// coords are transformed into non-negative 15-bit integer range\r\n\r\n\tx = 32767 * ( x - minX ) * invSize;\r\n\ty = 32767 * ( y - minY ) * invSize;\r\n\r\n\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\r\n\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\r\n\tx = ( x | ( x << 2 ) ) & 0x33333333;\r\n\tx = ( x | ( x << 1 ) ) & 0x55555555;\r\n\r\n\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\r\n\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\r\n\ty = ( y | ( y << 2 ) ) & 0x33333333;\r\n\ty = ( y | ( y << 1 ) ) & 0x55555555;\r\n\r\n\treturn x | ( y << 1 );\r\n\r\n}\r\n\r\n// find the leftmost node of a polygon ring\r\n\r\nfunction getLeftmost( start ) {\r\n\r\n\tvar p = start, leftmost = start;\r\n\r\n\tdo {\r\n\r\n\t\tif ( p.x < leftmost.x ) leftmost = p;\r\n\t\tp = p.next;\r\n\r\n\t} while ( p !== start );\r\n\r\n\treturn leftmost;\r\n\r\n}\r\n\r\n// check if a point lies within a convex triangle\r\n\r\nfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\r\n\r\n\treturn ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\r\n\t ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\r\n\t ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\r\n\r\n}\r\n\r\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\r\n\r\nfunction isValidDiagonal( a, b ) {\r\n\r\n\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&\r\n\t\tlocallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );\r\n\r\n}\r\n\r\n// signed area of a triangle\r\n\r\nfunction Earcut_area( p, q, r ) {\r\n\r\n\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\r\n\r\n}\r\n\r\n// check if two points are equal\r\n\r\nfunction equals( p1, p2 ) {\r\n\r\n\treturn p1.x === p2.x && p1.y === p2.y;\r\n\r\n}\r\n\r\n// check if two segments intersect\r\n\r\nfunction Earcut_intersects( p1, q1, p2, q2 ) {\r\n\r\n\tif ( ( equals( p1, q1 ) && equals( p2, q2 ) ) ||\r\n\t\t\t( equals( p1, q2 ) && equals( p2, q1 ) ) ) return true;\r\n\r\n\treturn Earcut_area( p1, q1, p2 ) > 0 !== Earcut_area( p1, q1, q2 ) > 0 &&\r\n\t\t\t\t Earcut_area( p2, q2, p1 ) > 0 !== Earcut_area( p2, q2, q1 ) > 0;\r\n\r\n}\r\n\r\n// check if a polygon diagonal intersects any polygon segments\r\n\r\nfunction intersectsPolygon( a, b ) {\r\n\r\n\tvar p = a;\r\n\r\n\tdo {\r\n\r\n\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\r\n\t\t\t\t\t\tEarcut_intersects( p, p.next, a, b ) ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\tp = p.next;\r\n\r\n\t} while ( p !== a );\r\n\r\n\treturn false;\r\n\r\n}\r\n\r\n// check if a polygon diagonal is locally inside the polygon\r\n\r\nfunction locallyInside( a, b ) {\r\n\r\n\treturn Earcut_area( a.prev, a, a.next ) < 0 ?\r\n\t\tEarcut_area( a, b, a.next ) >= 0 && Earcut_area( a, a.prev, b ) >= 0 :\r\n\t\tEarcut_area( a, b, a.prev ) < 0 || Earcut_area( a, a.next, b ) < 0;\r\n\r\n}\r\n\r\n// check if the middle point of a polygon diagonal is inside the polygon\r\n\r\nfunction middleInside( a, b ) {\r\n\r\n\tvar p = a,\r\n\t\tinside = false,\r\n\t\tpx = ( a.x + b.x ) / 2,\r\n\t\tpy = ( a.y + b.y ) / 2;\r\n\r\n\tdo {\r\n\r\n\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\r\n\t\t\t\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) ) {\r\n\r\n\t\t\tinside = ! inside;\r\n\r\n\t\t}\r\n\r\n\t\tp = p.next;\r\n\r\n\t} while ( p !== a );\r\n\r\n\treturn inside;\r\n\r\n}\r\n\r\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\r\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\r\n\r\nfunction splitPolygon( a, b ) {\r\n\r\n\tvar a2 = new Node( a.i, a.x, a.y ),\r\n\t\tb2 = new Node( b.i, b.x, b.y ),\r\n\t\tan = a.next,\r\n\t\tbp = b.prev;\r\n\r\n\ta.next = b;\r\n\tb.prev = a;\r\n\r\n\ta2.next = an;\r\n\tan.prev = a2;\r\n\r\n\tb2.next = a2;\r\n\ta2.prev = b2;\r\n\r\n\tbp.next = b2;\r\n\tb2.prev = bp;\r\n\r\n\treturn b2;\r\n\r\n}\r\n\r\n// create a node and optionally link it with previous one (in a circular doubly linked list)\r\n\r\nfunction insertNode( i, x, y, last ) {\r\n\r\n\tvar p = new Node( i, x, y );\r\n\r\n\tif ( ! last ) {\r\n\r\n\t\tp.prev = p;\r\n\t\tp.next = p;\r\n\r\n\t} else {\r\n\r\n\t\tp.next = last.next;\r\n\t\tp.prev = last;\r\n\t\tlast.next.prev = p;\r\n\t\tlast.next = p;\r\n\r\n\t}\r\n\r\n\treturn p;\r\n\r\n}\r\n\r\nfunction removeNode( p ) {\r\n\r\n\tp.next.prev = p.prev;\r\n\tp.prev.next = p.next;\r\n\r\n\tif ( p.prevZ ) p.prevZ.nextZ = p.nextZ;\r\n\tif ( p.nextZ ) p.nextZ.prevZ = p.prevZ;\r\n\r\n}\r\n\r\nfunction Node( i, x, y ) {\r\n\r\n\t// vertice index in coordinates array\r\n\tthis.i = i;\r\n\r\n\t// vertex coordinates\r\n\tthis.x = x;\r\n\tthis.y = y;\r\n\r\n\t// previous and next vertice nodes in a polygon ring\r\n\tthis.prev = null;\r\n\tthis.next = null;\r\n\r\n\t// z-order curve value\r\n\tthis.z = null;\r\n\r\n\t// previous and next nodes in z-order\r\n\tthis.prevZ = null;\r\n\tthis.nextZ = null;\r\n\r\n\t// indicates whether this is a steiner point\r\n\tthis.steiner = false;\r\n\r\n}\r\n\r\nfunction signedArea( data, start, end, dim ) {\r\n\r\n\tvar sum = 0;\r\n\r\n\tfor ( var i = start, j = end - dim; i < end; i += dim ) {\r\n\r\n\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\r\n\t\tj = i;\r\n\r\n\t}\r\n\r\n\treturn sum;\r\n\r\n}\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/extras/ShapeUtils.js\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n */\r\n\r\n\r\n\r\nvar ShapeUtils = {\r\n\r\n\t// calculate area of the contour polygon\r\n\r\n\tarea: function ( contour ) {\r\n\r\n\t\tvar n = contour.length;\r\n\t\tvar a = 0.0;\r\n\r\n\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\r\n\r\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\r\n\r\n\t\t}\r\n\r\n\t\treturn a * 0.5;\r\n\r\n\t},\r\n\r\n\tisClockWise: function ( pts ) {\r\n\r\n\t\treturn ShapeUtils.area( pts ) < 0;\r\n\r\n\t},\r\n\r\n\ttriangulateShape: function ( contour, holes ) {\r\n\r\n\t\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\r\n\t\tvar holeIndices = []; // array of hole indices\r\n\t\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\r\n\r\n\t\tremoveDupEndPts( contour );\r\n\t\taddContour( vertices, contour );\r\n\r\n\t\t//\r\n\r\n\t\tvar holeIndex = contour.length;\r\n\r\n\t\tholes.forEach( removeDupEndPts );\r\n\r\n\t\tfor ( var i = 0; i < holes.length; i ++ ) {\r\n\r\n\t\t\tholeIndices.push( holeIndex );\r\n\t\t\tholeIndex += holes[ i ].length;\r\n\t\t\taddContour( vertices, holes[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar triangles = Earcut.triangulate( vertices, holeIndices );\r\n\r\n\t\t//\r\n\r\n\t\tfor ( var i = 0; i < triangles.length; i += 3 ) {\r\n\r\n\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn faces;\r\n\r\n\t}\r\n\r\n};\r\n\r\nfunction removeDupEndPts( points ) {\r\n\r\n\tvar l = points.length;\r\n\r\n\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\r\n\r\n\t\tpoints.pop();\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction addContour( vertices, contour ) {\r\n\r\n\tfor ( var i = 0; i < contour.length; i ++ ) {\r\n\r\n\t\tvertices.push( contour[ i ].x );\r\n\t\tvertices.push( contour[ i ].y );\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/loader/ExtrudeGeometry.js\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n *\r\n * Creates extruded geometry from a path shape.\r\n *\r\n * parameters = {\r\n *\r\n *  curveSegments: <int>, // number of points on the curves\r\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\r\n *  depth: <float>, // Depth to extrude the shape\r\n *\r\n *  bevelEnabled: <bool>, // turn on bevel\r\n *  bevelThickness: <float>, // how deep into the original shape bevel goes\r\n *  bevelSize: <float>, // how far from shape outline is bevel\r\n *  bevelSegments: <int>, // number of bevel layers\r\n *\r\n *  extrudePath: <COOL.Curve> // curve to extrude shape along\r\n *\r\n *  UVGenerator: <Object> // object that provides UV generator functions\r\n *\r\n * }\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// ExtrudeGeometry\r\n\r\nfunction ExtrudeGeometry( shapes, options ) {\r\n\r\n\tloader_Geometry_Geometry.call( this );\r\n\r\n\tthis.type = 'ExtrudeGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tshapes: shapes,\r\n\t\toptions: options\r\n\t};\r\n\r\n\tthis.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );\r\n\tthis.mergeVertices();\r\n\r\n}\r\n\r\nExtrudeGeometry.prototype = Object.create( loader_Geometry_Geometry.prototype );\r\nExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\r\n\r\nExtrudeGeometry.prototype.toJSON = function () {\r\n\r\n\tvar data = loader_Geometry_Geometry.prototype.toJSON.call( this );\r\n\r\n\tvar shapes = this.parameters.shapes;\r\n\tvar options = this.parameters.options;\r\n\r\n\treturn toJSON( shapes, options, data );\r\n\r\n};\r\n\r\n// ExtrudeBufferGeometry\r\n\r\nfunction ExtrudeBufferGeometry( shapes, options ) {\r\n\r\n\tBufferGeometry.call( this );\r\n\r\n\tthis.type = 'ExtrudeBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tshapes: shapes,\r\n\t\toptions: options\r\n\t};\r\n\r\n\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\r\n\r\n\tvar scope = this;\r\n\r\n\tvar verticesArray = [];\r\n\tvar uvArray = [];\r\n\r\n\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\tvar shape = shapes[ i ];\r\n\t\taddShape( shape );\r\n\r\n\t}\r\n\r\n\t// build geometry\r\n\r\n\tthis.addAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\r\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\r\n\r\n\tthis.computeVertexNormals();\r\n\r\n\t// functions\r\n\r\n\tfunction addShape( shape ) {\r\n\r\n\t\tvar placeholder = [];\r\n\r\n\t\t// options\r\n\r\n\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\r\n\t\tvar steps = options.steps !== undefined ? options.steps : 1;\r\n\t\tvar depth = options.depth !== undefined ? options.depth : 100;\r\n\r\n\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\r\n\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\r\n\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\r\n\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\r\n\r\n\t\tvar extrudePath = options.extrudePath;\r\n\r\n\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\r\n\r\n\t\t// deprecated options\r\n\r\n\t\tif ( options.amount !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.ExtrudeBufferGeometry: amount has been renamed to depth.' );\r\n\t\t\tdepth = options.amount;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar extrudePts, extrudeByPath = false;\r\n\t\tvar splineTube, binormal, normal, position2;\r\n\r\n\t\tif ( extrudePath ) {\r\n\r\n\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\r\n\r\n\t\t\textrudeByPath = true;\r\n\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\r\n\r\n\t\t\t// SETUP TNB variables\r\n\r\n\t\t\t// TODO1 - have a .isClosed in spline?\r\n\r\n\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\r\n\r\n\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\r\n\r\n\t\t\tbinormal = new Vector3();\r\n\t\t\tnormal = new Vector3();\r\n\t\t\tposition2 = new Vector3();\r\n\r\n\t\t}\r\n\r\n\t\t// Safeguards if bevels are not enabled\r\n\r\n\t\tif ( ! bevelEnabled ) {\r\n\r\n\t\t\tbevelSegments = 0;\r\n\t\t\tbevelThickness = 0;\r\n\t\t\tbevelSize = 0;\r\n\r\n\t\t}\r\n\r\n\t\t// Variables initialization\r\n\r\n\t\tvar ahole, h, hl; // looping of holes\r\n\r\n\t\tvar shapePoints = shape.extractPoints( curveSegments );\r\n\r\n\t\tvar vertices = shapePoints.shape;\r\n\t\tvar holes = shapePoints.holes;\r\n\r\n\t\tvar reverse = ! ShapeUtils.isClockWise( vertices );\r\n\r\n\t\tif ( reverse ) {\r\n\r\n\t\t\tvertices = vertices.reverse();\r\n\r\n\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\r\n\r\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\tahole = holes[ h ];\r\n\r\n\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\r\n\r\n\t\t\t\t\tholes[ h ] = ahole.reverse();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\r\n\r\n\t\t/* Vertices */\r\n\r\n\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\r\n\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\r\n\t\t\tvertices = vertices.concat( ahole );\r\n\r\n\t\t}\r\n\r\n\r\n\t\tfunction scalePt2( pt, vec, size ) {\r\n\r\n\t\t\tif ( ! vec ) console.error( \"COOL.ExtrudeGeometry: vec does not exist\" );\r\n\r\n\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\r\n\r\n\t\t}\r\n\r\n\t\tvar b, bs, t, z,\r\n\t\t\tvert, vlen = vertices.length,\r\n\t\t\tface, flen = faces.length;\r\n\r\n\r\n\t\t// Find directions for point movement\r\n\r\n\r\n\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\r\n\r\n\t\t\t// computes for inPt the corresponding point inPt' on a new contour\r\n\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\r\n\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\r\n\t\t\t//\r\n\t\t\t// inPt' is the intersection of the two lines parallel to the two\r\n\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\r\n\r\n\t\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\r\n\r\n\t\t\t// good reading for geometry algorithms (here: line-line intersection)\r\n\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\r\n\r\n\t\t\tvar v_prev_x = inPt.x - inPrev.x,\r\n\t\t\t\tv_prev_y = inPt.y - inPrev.y;\r\n\t\t\tvar v_next_x = inNext.x - inPt.x,\r\n\t\t\t\tv_next_y = inNext.y - inPt.y;\r\n\r\n\t\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\r\n\r\n\t\t\t// check for collinear edges\r\n\t\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\r\n\r\n\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\r\n\r\n\t\t\t\t// not collinear\r\n\r\n\t\t\t\t// length of vectors for normalizing\r\n\r\n\t\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\r\n\t\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\r\n\r\n\t\t\t\t// shift adjacent points by unit vectors to the left\r\n\r\n\t\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\r\n\t\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\r\n\r\n\t\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\r\n\t\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\r\n\r\n\t\t\t\t// scaling factor for v_prev to intersection point\r\n\r\n\t\t\t\tvar sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\r\n\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\r\n\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\r\n\r\n\t\t\t\t// vector from inPt to intersection point\r\n\r\n\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\r\n\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\r\n\r\n\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\r\n\t\t\t\t//  but prevent crazy spikes\r\n\t\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\r\n\t\t\t\tif ( v_trans_lensq <= 2 ) {\r\n\r\n\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// handle special case of collinear edges\r\n\r\n\t\t\t\tvar direction_eq = false; // assumes: opposite\r\n\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\r\n\r\n\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\r\n\r\n\t\t\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( direction_eq ) {\r\n\r\n\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\r\n\t\t\t\t\tv_trans_x = - v_prev_y;\r\n\t\t\t\t\tv_trans_y = v_prev_x;\r\n\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\r\n\t\t\t\t\tv_trans_x = v_prev_x;\r\n\t\t\t\t\tv_trans_y = v_prev_y;\r\n\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\r\n\r\n\t\t}\r\n\r\n\r\n\t\tvar contourMovements = [];\r\n\r\n\t\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\r\n\t\t\tif ( j === il ) j = 0;\r\n\t\t\tif ( k === il ) k = 0;\r\n\r\n\t\t\t//  (j)---(i)---(k)\r\n\t\t\t// console.log('i,j,k', i, j , k)\r\n\r\n\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\r\n\r\n\t\t}\r\n\r\n\t\tvar holesMovements = [],\r\n\t\t\toneHoleMovements, verticesMovements = contourMovements.concat();\r\n\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\r\n\t\t\toneHoleMovements = [];\r\n\r\n\t\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\r\n\t\t\t\tif ( j === il ) j = 0;\r\n\t\t\t\tif ( k === il ) k = 0;\r\n\r\n\t\t\t\t//  (j)---(i)---(k)\r\n\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tholesMovements.push( oneHoleMovements );\r\n\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// Loop bevelSegments, 1 for the front, 1 for the back\r\n\r\n\t\tfor ( b = 0; b < bevelSegments; b ++ ) {\r\n\r\n\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\r\n\r\n\t\t\tt = b / bevelSegments;\r\n\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\r\n\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\r\n\r\n\t\t\t// contract shape\r\n\r\n\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\r\n\t\t\t\tv( vert.x, vert.y, - z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// expand holes\r\n\r\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\tahole = holes[ h ];\r\n\t\t\t\toneHoleMovements = holesMovements[ h ];\r\n\r\n\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\r\n\t\t\t\t\tv( vert.x, vert.y, - z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tbs = bevelSize;\r\n\r\n\t\t// Back facing vertices\r\n\r\n\t\tfor ( i = 0; i < vlen; i ++ ) {\r\n\r\n\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\r\n\t\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\t\tv( vert.x, vert.y, 0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\r\n\r\n\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\r\n\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\r\n\r\n\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\r\n\r\n\t\t\t\tv( position2.x, position2.y, position2.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Add stepped vertices...\r\n\t\t// Including front facing vertices\r\n\r\n\t\tvar s;\r\n\r\n\t\tfor ( s = 1; s <= steps; s ++ ) {\r\n\r\n\t\t\tfor ( i = 0; i < vlen; i ++ ) {\r\n\r\n\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\r\n\t\t\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\t\t\tv( vert.x, vert.y, depth / steps * s );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\r\n\r\n\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\r\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\r\n\r\n\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\r\n\r\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// Add bevel segments planes\r\n\r\n\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\r\n\t\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\r\n\r\n\t\t\tt = b / bevelSegments;\r\n\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\r\n\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\r\n\r\n\t\t\t// contract shape\r\n\r\n\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\t\t\t\tv( vert.x, vert.y, depth + z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// expand holes\r\n\r\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\tahole = holes[ h ];\r\n\t\t\t\toneHoleMovements = holesMovements[ h ];\r\n\r\n\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\r\n\t\t\t\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\t\t\t\tv( vert.x, vert.y, depth + z );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t/* Faces */\r\n\r\n\t\t// Top and bottom faces\r\n\r\n\t\tbuildLidFaces();\r\n\r\n\t\t// Sides faces\r\n\r\n\t\tbuildSideFaces();\r\n\r\n\r\n\t\t/////  Internal functions\r\n\r\n\t\tfunction buildLidFaces() {\r\n\r\n\t\t\tvar start = verticesArray.length / 3;\r\n\r\n\t\t\tif ( bevelEnabled ) {\r\n\r\n\t\t\t\tvar layer = 0; // steps + 1\r\n\t\t\t\tvar offset = vlen * layer;\r\n\r\n\t\t\t\t// Bottom faces\r\n\r\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\t\tface = faces[ i ];\r\n\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlayer = steps + bevelSegments * 2;\r\n\t\t\t\toffset = vlen * layer;\r\n\r\n\t\t\t\t// Top faces\r\n\r\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\t\tface = faces[ i ];\r\n\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Bottom faces\r\n\r\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\t\tface = faces[ i ];\r\n\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Top faces\r\n\r\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\t\tface = faces[ i ];\r\n\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\r\n\r\n\t\t}\r\n\r\n\t\t// Create faces for the z-sides of the shape\r\n\r\n\t\tfunction buildSideFaces() {\r\n\r\n\t\t\tvar start = verticesArray.length / 3;\r\n\t\t\tvar layeroffset = 0;\r\n\t\t\tsidewalls( contour, layeroffset );\r\n\t\t\tlayeroffset += contour.length;\r\n\r\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\tahole = holes[ h ];\r\n\t\t\t\tsidewalls( ahole, layeroffset );\r\n\r\n\t\t\t\t//, true\r\n\t\t\t\tlayeroffset += ahole.length;\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\r\n\r\n\r\n\t\t}\r\n\r\n\t\tfunction sidewalls( contour, layeroffset ) {\r\n\r\n\t\t\tvar j, k;\r\n\t\t\ti = contour.length;\r\n\r\n\t\t\twhile ( -- i >= 0 ) {\r\n\r\n\t\t\t\tj = i;\r\n\t\t\t\tk = i - 1;\r\n\t\t\t\tif ( k < 0 ) k = contour.length - 1;\r\n\r\n\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\r\n\r\n\t\t\t\tvar s = 0,\r\n\t\t\t\t\tsl = steps + bevelSegments * 2;\r\n\r\n\t\t\t\tfor ( s = 0; s < sl; s ++ ) {\r\n\r\n\t\t\t\t\tvar slen1 = vlen * s;\r\n\t\t\t\t\tvar slen2 = vlen * ( s + 1 );\r\n\r\n\t\t\t\t\tvar a = layeroffset + j + slen1,\r\n\t\t\t\t\t\tb = layeroffset + k + slen1,\r\n\t\t\t\t\t\tc = layeroffset + k + slen2,\r\n\t\t\t\t\t\td = layeroffset + j + slen2;\r\n\r\n\t\t\t\t\tf4( a, b, c, d );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction v( x, y, z ) {\r\n\r\n\t\t\tplaceholder.push( x );\r\n\t\t\tplaceholder.push( y );\r\n\t\t\tplaceholder.push( z );\r\n\r\n\t\t}\r\n\r\n\r\n\t\tfunction f3( a, b, c ) {\r\n\r\n\t\t\taddVertex( a );\r\n\t\t\taddVertex( b );\r\n\t\t\taddVertex( c );\r\n\r\n\t\t\tvar nextIndex = verticesArray.length / 3;\r\n\t\t\tvar uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\r\n\r\n\t\t\taddUV( uvs[ 0 ] );\r\n\t\t\taddUV( uvs[ 1 ] );\r\n\t\t\taddUV( uvs[ 2 ] );\r\n\r\n\t\t}\r\n\r\n\t\tfunction f4( a, b, c, d ) {\r\n\r\n\t\t\taddVertex( a );\r\n\t\t\taddVertex( b );\r\n\t\t\taddVertex( d );\r\n\r\n\t\t\taddVertex( b );\r\n\t\t\taddVertex( c );\r\n\t\t\taddVertex( d );\r\n\r\n\r\n\t\t\tvar nextIndex = verticesArray.length / 3;\r\n\t\t\tvar uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\r\n\r\n\t\t\taddUV( uvs[ 0 ] );\r\n\t\t\taddUV( uvs[ 1 ] );\r\n\t\t\taddUV( uvs[ 3 ] );\r\n\r\n\t\t\taddUV( uvs[ 1 ] );\r\n\t\t\taddUV( uvs[ 2 ] );\r\n\t\t\taddUV( uvs[ 3 ] );\r\n\r\n\t\t}\r\n\r\n\t\tfunction addVertex( index ) {\r\n\r\n\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\r\n\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\r\n\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\r\n\r\n\t\t}\r\n\r\n\r\n\t\tfunction addUV( vector2 ) {\r\n\r\n\t\t\tuvArray.push( vector2.x );\r\n\t\t\tuvArray.push( vector2.y );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\nExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;\r\n\r\nExtrudeBufferGeometry.prototype.toJSON = function () {\r\n\r\n\tvar data = BufferGeometry.prototype.toJSON.call( this );\r\n\r\n\tvar shapes = this.parameters.shapes;\r\n\tvar options = this.parameters.options;\r\n\r\n\treturn toJSON( shapes, options, data );\r\n\r\n};\r\n\r\n//\r\n\r\nvar WorldUVGenerator = {\r\n\r\n\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\r\n\r\n\t\tvar a_x = vertices[ indexA * 3 ];\r\n\t\tvar a_y = vertices[ indexA * 3 + 1 ];\r\n\t\tvar b_x = vertices[ indexB * 3 ];\r\n\t\tvar b_y = vertices[ indexB * 3 + 1 ];\r\n\t\tvar c_x = vertices[ indexC * 3 ];\r\n\t\tvar c_y = vertices[ indexC * 3 + 1 ];\r\n\r\n\t\treturn [\r\n\t\t\tnew Vector2( a_x, a_y ),\r\n\t\t\tnew Vector2( b_x, b_y ),\r\n\t\t\tnew Vector2( c_x, c_y )\r\n\t\t];\r\n\r\n\t},\r\n\r\n\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\r\n\r\n\t\tvar a_x = vertices[ indexA * 3 ];\r\n\t\tvar a_y = vertices[ indexA * 3 + 1 ];\r\n\t\tvar a_z = vertices[ indexA * 3 + 2 ];\r\n\t\tvar b_x = vertices[ indexB * 3 ];\r\n\t\tvar b_y = vertices[ indexB * 3 + 1 ];\r\n\t\tvar b_z = vertices[ indexB * 3 + 2 ];\r\n\t\tvar c_x = vertices[ indexC * 3 ];\r\n\t\tvar c_y = vertices[ indexC * 3 + 1 ];\r\n\t\tvar c_z = vertices[ indexC * 3 + 2 ];\r\n\t\tvar d_x = vertices[ indexD * 3 ];\r\n\t\tvar d_y = vertices[ indexD * 3 + 1 ];\r\n\t\tvar d_z = vertices[ indexD * 3 + 2 ];\r\n\r\n\t\tif ( Math.abs( a_y - b_y ) < 0.01 ) {\r\n\r\n\t\t\treturn [\r\n\t\t\t\tnew Vector2( a_x, 1 - a_z ),\r\n\t\t\t\tnew Vector2( b_x, 1 - b_z ),\r\n\t\t\t\tnew Vector2( c_x, 1 - c_z ),\r\n\t\t\t\tnew Vector2( d_x, 1 - d_z )\r\n\t\t\t];\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn [\r\n\t\t\t\tnew Vector2( a_y, 1 - a_z ),\r\n\t\t\t\tnew Vector2( b_y, 1 - b_z ),\r\n\t\t\t\tnew Vector2( c_y, 1 - c_z ),\r\n\t\t\t\tnew Vector2( d_y, 1 - d_z )\r\n\t\t\t];\r\n\r\n\t\t}\r\n\r\n\t}\r\n};\r\n\r\nfunction toJSON( shapes, options, data ) {\r\n\r\n\t//\r\n\r\n\tdata.shapes = [];\r\n\r\n\tif ( Array.isArray( shapes ) ) {\r\n\r\n\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar shape = shapes[ i ];\r\n\r\n\t\t\tdata.shapes.push( shape.uuid );\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\tdata.shapes.push( shapes.uuid );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tif ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();\r\n\r\n\treturn data;\r\n\r\n}\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/extras/core/Curve.js\n\r\n\r\n\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * Extensible curve object\r\n *\r\n * Some common of curve methods:\r\n * .getPoint( t, optionalTarget ), .getTangent( t )\r\n * .getPointAt( u, optionalTarget ), .getTangentAt( u )\r\n * .getPoints(), .getSpacedPoints()\r\n * .getLength()\r\n * .updateArcLengths()\r\n *\r\n * This following curves inherit from COOL.Curve:\r\n *\r\n * -- 2D curves --\r\n * COOL.ArcCurve\r\n * COOL.CubicBezierCurve\r\n * COOL.EllipseCurve\r\n * COOL.LineCurve\r\n * COOL.QuadraticBezierCurve\r\n * COOL.SplineCurve\r\n *\r\n * -- 3D curves --\r\n * COOL.CatmullRomCurve3\r\n * COOL.CubicBezierCurve3\r\n * COOL.LineCurve3\r\n * COOL.QuadraticBezierCurve3\r\n *\r\n * A series of curves can be represented as a COOL.CurvePath.\r\n *\r\n **/\r\n\r\n/**************************************************************\r\n *\tAbstract Curve base class\r\n **************************************************************/\r\n\r\nfunction Curve() {\r\n\r\n\tthis.type = 'Curve';\r\n\r\n\tthis.arcLengthDivisions = 200;\r\n\r\n}\r\n\r\nObject.assign( Curve.prototype, {\r\n\r\n\t// Virtual base class method to overwrite and implement in subclasses\r\n\t//\t- t [0 .. 1]\r\n\r\n\tgetPoint: function ( /* t, optionalTarget */ ) {\r\n\r\n\t\tconsole.warn( 'COOL.Curve: .getPoint() not implemented.' );\r\n\t\treturn null;\r\n\r\n\t},\r\n\r\n\t// Get point at relative position in curve according to arc length\r\n\t// - u [0 .. 1]\r\n\r\n\tgetPointAt: function ( u, optionalTarget ) {\r\n\r\n\t\tvar t = this.getUtoTmapping( u );\r\n\t\treturn this.getPoint( t, optionalTarget );\r\n\r\n\t},\r\n\r\n\t// Get sequence of points using getPoint( t )\r\n\r\n\tgetPoints: function ( divisions ) {\r\n\r\n\t\tif ( divisions === undefined ) divisions = 5;\r\n\r\n\t\tvar points = [];\r\n\r\n\t\tfor ( var d = 0; d <= divisions; d ++ ) {\r\n\r\n\t\t\tpoints.push( this.getPoint( d / divisions ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn points;\r\n\r\n\t},\r\n\r\n\t// Get sequence of points using getPointAt( u )\r\n\r\n\tgetSpacedPoints: function ( divisions ) {\r\n\r\n\t\tif ( divisions === undefined ) divisions = 5;\r\n\r\n\t\tvar points = [];\r\n\r\n\t\tfor ( var d = 0; d <= divisions; d ++ ) {\r\n\r\n\t\t\tpoints.push( this.getPointAt( d / divisions ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn points;\r\n\r\n\t},\r\n\r\n\t// Get total curve arc length\r\n\r\n\tgetLength: function () {\r\n\r\n\t\tvar lengths = this.getLengths();\r\n\t\treturn lengths[ lengths.length - 1 ];\r\n\r\n\t},\r\n\r\n\t// Get list of cumulative segment lengths\r\n\r\n\tgetLengths: function ( divisions ) {\r\n\r\n\t\tif ( divisions === undefined ) divisions = this.arcLengthDivisions;\r\n\r\n\t\tif ( this.cacheArcLengths &&\r\n\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\r\n\t\t\t! this.needsUpdate ) {\r\n\r\n\t\t\treturn this.cacheArcLengths;\r\n\r\n\t\t}\r\n\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t\tvar cache = [];\r\n\t\tvar current, last = this.getPoint( 0 );\r\n\t\tvar p, sum = 0;\r\n\r\n\t\tcache.push( 0 );\r\n\r\n\t\tfor ( p = 1; p <= divisions; p ++ ) {\r\n\r\n\t\t\tcurrent = this.getPoint( p / divisions );\r\n\t\t\tsum += current.distanceTo( last );\r\n\t\t\tcache.push( sum );\r\n\t\t\tlast = current;\r\n\r\n\t\t}\r\n\r\n\t\tthis.cacheArcLengths = cache;\r\n\r\n\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\r\n\r\n\t},\r\n\r\n\tupdateArcLengths: function () {\r\n\r\n\t\tthis.needsUpdate = true;\r\n\t\tthis.getLengths();\r\n\r\n\t},\r\n\r\n\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\r\n\r\n\tgetUtoTmapping: function ( u, distance ) {\r\n\r\n\t\tvar arcLengths = this.getLengths();\r\n\r\n\t\tvar i = 0, il = arcLengths.length;\r\n\r\n\t\tvar targetArcLength; // The targeted u distance value to get\r\n\r\n\t\tif ( distance ) {\r\n\r\n\t\t\ttargetArcLength = distance;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\r\n\r\n\t\t}\r\n\r\n\t\t// binary search for the index with largest value smaller than target u distance\r\n\r\n\t\tvar low = 0, high = il - 1, comparison;\r\n\r\n\t\twhile ( low <= high ) {\r\n\r\n\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\r\n\r\n\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\r\n\r\n\t\t\tif ( comparison < 0 ) {\r\n\r\n\t\t\t\tlow = i + 1;\r\n\r\n\t\t\t} else if ( comparison > 0 ) {\r\n\r\n\t\t\t\thigh = i - 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\thigh = i;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t\t// DONE\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\ti = high;\r\n\r\n\t\tif ( arcLengths[ i ] === targetArcLength ) {\r\n\r\n\t\t\treturn i / ( il - 1 );\r\n\r\n\t\t}\r\n\r\n\t\t// we could get finer grain at lengths, or use simple interpolation between two points\r\n\r\n\t\tvar lengthBefore = arcLengths[ i ];\r\n\t\tvar lengthAfter = arcLengths[ i + 1 ];\r\n\r\n\t\tvar segmentLength = lengthAfter - lengthBefore;\r\n\r\n\t\t// determine where we are between the 'before' and 'after' points\r\n\r\n\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\r\n\r\n\t\t// add that fractional amount to t\r\n\r\n\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\r\n\r\n\t\treturn t;\r\n\r\n\t},\r\n\r\n\t// Returns a unit vector tangent at t\r\n\t// In case any sub curve does not implement its tangent derivation,\r\n\t// 2 points a small delta apart will be used to find its gradient\r\n\t// which seems to give a reasonable approximation\r\n\r\n\tgetTangent: function ( t ) {\r\n\r\n\t\tvar delta = 0.0001;\r\n\t\tvar t1 = t - delta;\r\n\t\tvar t2 = t + delta;\r\n\r\n\t\t// Capping in case of danger\r\n\r\n\t\tif ( t1 < 0 ) t1 = 0;\r\n\t\tif ( t2 > 1 ) t2 = 1;\r\n\r\n\t\tvar pt1 = this.getPoint( t1 );\r\n\t\tvar pt2 = this.getPoint( t2 );\r\n\r\n\t\tvar vec = pt2.clone().sub( pt1 );\r\n\t\treturn vec.normalize();\r\n\r\n\t},\r\n\r\n\tgetTangentAt: function ( u ) {\r\n\r\n\t\tvar t = this.getUtoTmapping( u );\r\n\t\treturn this.getTangent( t );\r\n\r\n\t},\r\n\r\n\tcomputeFrenetFrames: function ( segments, closed ) {\r\n\r\n\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\r\n\r\n\t\tvar normal = new Vector3();\r\n\r\n\t\tvar tangents = [];\r\n\t\tvar normals = [];\r\n\t\tvar binormals = [];\r\n\r\n\t\tvar vec = new Vector3();\r\n\t\tvar mat = new Matrix4();\r\n\r\n\t\tvar i, u, theta;\r\n\r\n\t\t// compute the tangent vectors for each segment on the curve\r\n\r\n\t\tfor ( i = 0; i <= segments; i ++ ) {\r\n\r\n\t\t\tu = i / segments;\r\n\r\n\t\t\ttangents[ i ] = this.getTangentAt( u );\r\n\t\t\ttangents[ i ].normalize();\r\n\r\n\t\t}\r\n\r\n\t\t// select an initial normal vector perpendicular to the first tangent vector,\r\n\t\t// and in the direction of the minimum tangent xyz component\r\n\r\n\t\tnormals[ 0 ] = new Vector3();\r\n\t\tbinormals[ 0 ] = new Vector3();\r\n\t\tvar min = Number.MAX_VALUE;\r\n\t\tvar tx = Math.abs( tangents[ 0 ].x );\r\n\t\tvar ty = Math.abs( tangents[ 0 ].y );\r\n\t\tvar tz = Math.abs( tangents[ 0 ].z );\r\n\r\n\t\tif ( tx <= min ) {\r\n\r\n\t\t\tmin = tx;\r\n\t\t\tnormal.set( 1, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( ty <= min ) {\r\n\r\n\t\t\tmin = ty;\r\n\t\t\tnormal.set( 0, 1, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( tz <= min ) {\r\n\r\n\t\t\tnormal.set( 0, 0, 1 );\r\n\r\n\t\t}\r\n\r\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\r\n\r\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\r\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\r\n\r\n\r\n\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\r\n\r\n\t\tfor ( i = 1; i <= segments; i ++ ) {\r\n\r\n\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\r\n\r\n\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\r\n\r\n\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\r\n\r\n\t\t\tif ( vec.length() > Number.EPSILON ) {\r\n\r\n\t\t\t\tvec.normalize();\r\n\r\n\t\t\t\ttheta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\r\n\r\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\r\n\r\n\t\tif ( closed === true ) {\r\n\r\n\t\t\ttheta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\r\n\t\t\ttheta /= segments;\r\n\r\n\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\r\n\r\n\t\t\t\ttheta = - theta;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( i = 1; i <= segments; i ++ ) {\r\n\r\n\t\t\t\t// twist a little...\r\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\r\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\ttangents: tangents,\r\n\t\t\tnormals: normals,\r\n\t\t\tbinormals: binormals\r\n\t\t};\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoJSON: function () {\r\n\r\n\t\tvar data = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.5,\r\n\t\t\t\ttype: 'Curve',\r\n\t\t\t\tgenerator: 'Curve.toJSON'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\r\n\t\tdata.type = this.type;\r\n\r\n\t\treturn data;\r\n\r\n\t},\r\n\r\n\tfromJSON: function ( json ) {\r\n\r\n\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/extras/curves/EllipseCurve.js\n\r\n\r\n\r\n\r\nfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\tCurve.call( this );\r\n\r\n\tthis.type = 'EllipseCurve';\r\n\r\n\tthis.aX = aX || 0;\r\n\tthis.aY = aY || 0;\r\n\r\n\tthis.xRadius = xRadius || 1;\r\n\tthis.yRadius = yRadius || 1;\r\n\r\n\tthis.aStartAngle = aStartAngle || 0;\r\n\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\r\n\r\n\tthis.aClockwise = aClockwise || false;\r\n\r\n\tthis.aRotation = aRotation || 0;\r\n\r\n}\r\n\r\nEllipseCurve.prototype = Object.create( Curve.prototype );\r\nEllipseCurve.prototype.constructor = EllipseCurve;\r\n\r\nEllipseCurve.prototype.isEllipseCurve = true;\r\n\r\nEllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\tvar point = optionalTarget || new Vector2();\r\n\r\n\tvar twoPi = Math.PI * 2;\r\n\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\r\n\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\r\n\r\n\t// ensures that deltaAngle is 0 .. 2 PI\r\n\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\r\n\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\r\n\r\n\tif ( deltaAngle < Number.EPSILON ) {\r\n\r\n\t\tif ( samePoints ) {\r\n\r\n\t\t\tdeltaAngle = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tdeltaAngle = twoPi;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tif ( this.aClockwise === true && ! samePoints ) {\r\n\r\n\t\tif ( deltaAngle === twoPi ) {\r\n\r\n\t\t\tdeltaAngle = - twoPi;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tdeltaAngle = deltaAngle - twoPi;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvar angle = this.aStartAngle + t * deltaAngle;\r\n\tvar x = this.aX + this.xRadius * Math.cos( angle );\r\n\tvar y = this.aY + this.yRadius * Math.sin( angle );\r\n\r\n\tif ( this.aRotation !== 0 ) {\r\n\r\n\t\tvar cos = Math.cos( this.aRotation );\r\n\t\tvar sin = Math.sin( this.aRotation );\r\n\r\n\t\tvar tx = x - this.aX;\r\n\t\tvar ty = y - this.aY;\r\n\r\n\t\t// Rotate the point about the center of the ellipse.\r\n\t\tx = tx * cos - ty * sin + this.aX;\r\n\t\ty = tx * sin + ty * cos + this.aY;\r\n\r\n\t}\r\n\r\n\treturn point.set( x, y );\r\n\r\n};\r\n\r\nEllipseCurve.prototype.copy = function ( source ) {\r\n\r\n\tCurve.prototype.copy.call( this, source );\r\n\r\n\tthis.aX = source.aX;\r\n\tthis.aY = source.aY;\r\n\r\n\tthis.xRadius = source.xRadius;\r\n\tthis.yRadius = source.yRadius;\r\n\r\n\tthis.aStartAngle = source.aStartAngle;\r\n\tthis.aEndAngle = source.aEndAngle;\r\n\r\n\tthis.aClockwise = source.aClockwise;\r\n\r\n\tthis.aRotation = source.aRotation;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n\r\nEllipseCurve.prototype.toJSON = function () {\r\n\r\n\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\tdata.aX = this.aX;\r\n\tdata.aY = this.aY;\r\n\r\n\tdata.xRadius = this.xRadius;\r\n\tdata.yRadius = this.yRadius;\r\n\r\n\tdata.aStartAngle = this.aStartAngle;\r\n\tdata.aEndAngle = this.aEndAngle;\r\n\r\n\tdata.aClockwise = this.aClockwise;\r\n\r\n\tdata.aRotation = this.aRotation;\r\n\r\n\treturn data;\r\n\r\n};\r\n\r\nEllipseCurve.prototype.fromJSON = function ( json ) {\r\n\r\n\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\tthis.aX = json.aX;\r\n\tthis.aY = json.aY;\r\n\r\n\tthis.xRadius = json.xRadius;\r\n\tthis.yRadius = json.yRadius;\r\n\r\n\tthis.aStartAngle = json.aStartAngle;\r\n\tthis.aEndAngle = json.aEndAngle;\r\n\r\n\tthis.aClockwise = json.aClockwise;\r\n\r\n\tthis.aRotation = json.aRotation;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/extras/curves/ArcCurve.js\n\r\n\r\n\r\nfunction ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\r\n\r\n\tthis.type = 'ArcCurve';\r\n\r\n}\r\n\r\nArcCurve.prototype = Object.create( EllipseCurve.prototype );\r\nArcCurve.prototype.constructor = ArcCurve;\r\n\r\nArcCurve.prototype.isArcCurve = true;\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/extras/curves/CatmullRomCurve3.js\n\r\n\r\n\r\n/**\r\n * @author zz85 https://github.com/zz85\r\n *\r\n * Centripetal CatmullRom Curve - which is useful for avoiding\r\n * cusps and self-intersections in non-uniform catmull rom curves.\r\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\r\n *\r\n * curve.type accepts centripetal(default), chordal and catmullrom\r\n * curve.tension is used for catmullrom which defaults to 0.5\r\n */\r\n\r\n\r\n/*\r\nBased on an optimized c++ solution in\r\n - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\r\n - http://ideone.com/NoEbVM\r\n\r\nThis CubicPoly class could be used for reusing some variables and calculations,\r\nbut for COOL.js curve use, it could be possible inlined and flatten into a single function call\r\nwhich can be placed in CurveUtils.\r\n*/\r\n\r\nfunction CubicPoly() {\r\n\r\n\tvar c0 = 0, c1 = 0, c2 = 0, c3 = 0;\r\n\r\n\t/*\r\n\t * Compute coefficients for a cubic polynomial\r\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\r\n\t * such that\r\n\t *   p(0) = x0, p(1) = x1\r\n\t *  and\r\n\t *   p'(0) = t0, p'(1) = t1.\r\n\t */\r\n\tfunction init( x0, x1, t0, t1 ) {\r\n\r\n\t\tc0 = x0;\r\n\t\tc1 = t0;\r\n\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\r\n\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\r\n\r\n\t}\r\n\r\n\treturn {\r\n\r\n\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\r\n\r\n\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\r\n\r\n\t\t},\r\n\r\n\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\r\n\r\n\t\t\t// compute tangents when parameterized in [t1,t2]\r\n\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\r\n\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\r\n\r\n\t\t\t// rescale tangents for parametrization in [0,1]\r\n\t\t\tt1 *= dt1;\r\n\t\t\tt2 *= dt1;\r\n\r\n\t\t\tinit( x1, x2, t1, t2 );\r\n\r\n\t\t},\r\n\r\n\t\tcalc: function ( t ) {\r\n\r\n\t\t\tvar t2 = t * t;\r\n\t\t\tvar t3 = t2 * t;\r\n\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n}\r\n\r\n//\r\n\r\nvar tmp = new Vector3();\r\nvar px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();\r\n\r\nfunction CatmullRomCurve3( points, closed, curveType, tension ) {\r\n\r\n\tCurve.call( this );\r\n\r\n\tthis.type = 'CatmullRomCurve3';\r\n\r\n\tthis.points = points || [];\r\n\tthis.closed = closed || false;\r\n\tthis.curveType = curveType || 'centripetal';\r\n\tthis.tension = tension || 0.5;\r\n\r\n}\r\n\r\nCatmullRomCurve3.prototype = Object.create( Curve.prototype );\r\nCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\r\n\r\nCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\r\n\r\nCatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\tvar point = optionalTarget || new Vector3();\r\n\r\n\tvar points = this.points;\r\n\tvar l = points.length;\r\n\r\n\tvar p = ( l - ( this.closed ? 0 : 1 ) ) * t;\r\n\tvar intPoint = Math.floor( p );\r\n\tvar weight = p - intPoint;\r\n\r\n\tif ( this.closed ) {\r\n\r\n\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\r\n\r\n\t} else if ( weight === 0 && intPoint === l - 1 ) {\r\n\r\n\t\tintPoint = l - 2;\r\n\t\tweight = 1;\r\n\r\n\t}\r\n\r\n\tvar p0, p1, p2, p3; // 4 points\r\n\r\n\tif ( this.closed || intPoint > 0 ) {\r\n\r\n\t\tp0 = points[ ( intPoint - 1 ) % l ];\r\n\r\n\t} else {\r\n\r\n\t\t// extrapolate first point\r\n\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\r\n\t\tp0 = tmp;\r\n\r\n\t}\r\n\r\n\tp1 = points[ intPoint % l ];\r\n\tp2 = points[ ( intPoint + 1 ) % l ];\r\n\r\n\tif ( this.closed || intPoint + 2 < l ) {\r\n\r\n\t\tp3 = points[ ( intPoint + 2 ) % l ];\r\n\r\n\t} else {\r\n\r\n\t\t// extrapolate last point\r\n\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\r\n\t\tp3 = tmp;\r\n\r\n\t}\r\n\r\n\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\r\n\r\n\t\t// init Centripetal / Chordal Catmull-Rom\r\n\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\r\n\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\r\n\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\r\n\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\r\n\r\n\t\t// safety check for repeated points\r\n\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\r\n\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\r\n\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\r\n\r\n\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\r\n\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\r\n\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\r\n\r\n\t} else if ( this.curveType === 'catmullrom' ) {\r\n\r\n\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\r\n\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\r\n\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\r\n\r\n\t}\r\n\r\n\tpoint.set(\r\n\t\tpx.calc( weight ),\r\n\t\tpy.calc( weight ),\r\n\t\tpz.calc( weight )\r\n\t);\r\n\r\n\treturn point;\r\n\r\n};\r\n\r\nCatmullRomCurve3.prototype.copy = function ( source ) {\r\n\r\n\tCurve.prototype.copy.call( this, source );\r\n\r\n\tthis.points = [];\r\n\r\n\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\r\n\r\n\t\tvar point = source.points[ i ];\r\n\r\n\t\tthis.points.push( point.clone() );\r\n\r\n\t}\r\n\r\n\tthis.closed = source.closed;\r\n\tthis.curveType = source.curveType;\r\n\tthis.tension = source.tension;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nCatmullRomCurve3.prototype.toJSON = function () {\r\n\r\n\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\tdata.points = [];\r\n\r\n\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\r\n\r\n\t\tvar point = this.points[ i ];\r\n\t\tdata.points.push( point.toArray() );\r\n\r\n\t}\r\n\r\n\tdata.closed = this.closed;\r\n\tdata.curveType = this.curveType;\r\n\tdata.tension = this.tension;\r\n\r\n\treturn data;\r\n\r\n};\r\n\r\nCatmullRomCurve3.prototype.fromJSON = function ( json ) {\r\n\r\n\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\tthis.points = [];\r\n\r\n\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\r\n\r\n\t\tvar point = json.points[ i ];\r\n\t\tthis.points.push( new Vector3().fromArray( point ) );\r\n\r\n\t}\r\n\r\n\tthis.closed = json.closed;\r\n\tthis.curveType = json.curveType;\r\n\tthis.tension = json.tension;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/extras/core/Interpolations.js\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n *\r\n * Bezier Curves formulas obtained from\r\n * http://en.wikipedia.org/wiki/Bézier_curve\r\n */\r\n\r\nfunction CatmullRom( t, p0, p1, p2, p3 ) {\r\n\r\n\tvar v0 = ( p2 - p0 ) * 0.5;\r\n\tvar v1 = ( p3 - p1 ) * 0.5;\r\n\tvar t2 = t * t;\r\n\tvar t3 = t * t2;\r\n\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\r\n\r\n}\r\n\r\n//\r\n\r\nfunction QuadraticBezierP0( t, p ) {\r\n\r\n\tvar k = 1 - t;\r\n\treturn k * k * p;\r\n\r\n}\r\n\r\nfunction QuadraticBezierP1( t, p ) {\r\n\r\n\treturn 2 * ( 1 - t ) * t * p;\r\n\r\n}\r\n\r\nfunction QuadraticBezierP2( t, p ) {\r\n\r\n\treturn t * t * p;\r\n\r\n}\r\n\r\nfunction QuadraticBezier( t, p0, p1, p2 ) {\r\n\r\n\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\r\n\t\tQuadraticBezierP2( t, p2 );\r\n\r\n}\r\n\r\n//\r\n\r\nfunction CubicBezierP0( t, p ) {\r\n\r\n\tvar k = 1 - t;\r\n\treturn k * k * k * p;\r\n\r\n}\r\n\r\nfunction CubicBezierP1( t, p ) {\r\n\r\n\tvar k = 1 - t;\r\n\treturn 3 * k * k * t * p;\r\n\r\n}\r\n\r\nfunction CubicBezierP2( t, p ) {\r\n\r\n\treturn 3 * ( 1 - t ) * t * t * p;\r\n\r\n}\r\n\r\nfunction CubicBezierP3( t, p ) {\r\n\r\n\treturn t * t * t * p;\r\n\r\n}\r\n\r\nfunction CubicBezier( t, p0, p1, p2, p3 ) {\r\n\r\n\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\r\n\t\tCubicBezierP3( t, p3 );\r\n\r\n}\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/extras/curves/CubicBezierCurve.js\n\r\n\r\n\r\n\r\n\r\nfunction CubicBezierCurve( v0, v1, v2, v3 ) {\r\n\r\n\tCurve.call( this );\r\n\r\n\tthis.type = 'CubicBezierCurve';\r\n\r\n\tthis.v0 = v0 || new Vector2();\r\n\tthis.v1 = v1 || new Vector2();\r\n\tthis.v2 = v2 || new Vector2();\r\n\tthis.v3 = v3 || new Vector2();\r\n\r\n}\r\n\r\nCubicBezierCurve.prototype = Object.create( Curve.prototype );\r\nCubicBezierCurve.prototype.constructor = CubicBezierCurve;\r\n\r\nCubicBezierCurve.prototype.isCubicBezierCurve = true;\r\n\r\nCubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\tvar point = optionalTarget || new Vector2();\r\n\r\n\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\r\n\r\n\tpoint.set(\r\n\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\r\n\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\r\n\t);\r\n\r\n\treturn point;\r\n\r\n};\r\n\r\nCubicBezierCurve.prototype.copy = function ( source ) {\r\n\r\n\tCurve.prototype.copy.call( this, source );\r\n\r\n\tthis.v0.copy( source.v0 );\r\n\tthis.v1.copy( source.v1 );\r\n\tthis.v2.copy( source.v2 );\r\n\tthis.v3.copy( source.v3 );\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nCubicBezierCurve.prototype.toJSON = function () {\r\n\r\n\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\tdata.v0 = this.v0.toArray();\r\n\tdata.v1 = this.v1.toArray();\r\n\tdata.v2 = this.v2.toArray();\r\n\tdata.v3 = this.v3.toArray();\r\n\r\n\treturn data;\r\n\r\n};\r\n\r\nCubicBezierCurve.prototype.fromJSON = function ( json ) {\r\n\r\n\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\tthis.v0.fromArray( json.v0 );\r\n\tthis.v1.fromArray( json.v1 );\r\n\tthis.v2.fromArray( json.v2 );\r\n\tthis.v3.fromArray( json.v3 );\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/extras/curves/CubicBezierCurve3.js\n\r\n\r\n\r\n\r\n\r\nfunction CubicBezierCurve3( v0, v1, v2, v3 ) {\r\n\r\n\tCurve.call( this );\r\n\r\n\tthis.type = 'CubicBezierCurve3';\r\n\r\n\tthis.v0 = v0 || new Vector3();\r\n\tthis.v1 = v1 || new Vector3();\r\n\tthis.v2 = v2 || new Vector3();\r\n\tthis.v3 = v3 || new Vector3();\r\n\r\n}\r\n\r\nCubicBezierCurve3.prototype = Object.create( Curve.prototype );\r\nCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\r\n\r\nCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\r\n\r\nCubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\tvar point = optionalTarget || new Vector3();\r\n\r\n\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\r\n\r\n\tpoint.set(\r\n\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\r\n\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\r\n\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\r\n\t);\r\n\r\n\treturn point;\r\n\r\n};\r\n\r\nCubicBezierCurve3.prototype.copy = function ( source ) {\r\n\r\n\tCurve.prototype.copy.call( this, source );\r\n\r\n\tthis.v0.copy( source.v0 );\r\n\tthis.v1.copy( source.v1 );\r\n\tthis.v2.copy( source.v2 );\r\n\tthis.v3.copy( source.v3 );\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nCubicBezierCurve3.prototype.toJSON = function () {\r\n\r\n\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\tdata.v0 = this.v0.toArray();\r\n\tdata.v1 = this.v1.toArray();\r\n\tdata.v2 = this.v2.toArray();\r\n\tdata.v3 = this.v3.toArray();\r\n\r\n\treturn data;\r\n\r\n};\r\n\r\nCubicBezierCurve3.prototype.fromJSON = function ( json ) {\r\n\r\n\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\tthis.v0.fromArray( json.v0 );\r\n\tthis.v1.fromArray( json.v1 );\r\n\tthis.v2.fromArray( json.v2 );\r\n\tthis.v3.fromArray( json.v3 );\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/extras/curves/LineCurve.js\n\r\n\r\n\r\n\r\nfunction LineCurve( v1, v2 ) {\r\n\r\n\tCurve.call( this );\r\n\r\n\tthis.type = 'LineCurve';\r\n\r\n\tthis.v1 = v1 || new Vector2();\r\n\tthis.v2 = v2 || new Vector2();\r\n\r\n}\r\n\r\nLineCurve.prototype = Object.create( Curve.prototype );\r\nLineCurve.prototype.constructor = LineCurve;\r\n\r\nLineCurve.prototype.isLineCurve = true;\r\n\r\nLineCurve.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\tvar point = optionalTarget || new Vector2();\r\n\r\n\tif ( t === 1 ) {\r\n\r\n\t\tpoint.copy( this.v2 );\r\n\r\n\t} else {\r\n\r\n\t\tpoint.copy( this.v2 ).sub( this.v1 );\r\n\t\tpoint.multiplyScalar( t ).add( this.v1 );\r\n\r\n\t}\r\n\r\n\treturn point;\r\n\r\n};\r\n\r\n// Line curve is linear, so we can overwrite default getPointAt\r\n\r\nLineCurve.prototype.getPointAt = function ( u, optionalTarget ) {\r\n\r\n\treturn this.getPoint( u, optionalTarget );\r\n\r\n};\r\n\r\nLineCurve.prototype.getTangent = function ( /* t */ ) {\r\n\r\n\tvar tangent = this.v2.clone().sub( this.v1 );\r\n\r\n\treturn tangent.normalize();\r\n\r\n};\r\n\r\nLineCurve.prototype.copy = function ( source ) {\r\n\r\n\tCurve.prototype.copy.call( this, source );\r\n\r\n\tthis.v1.copy( source.v1 );\r\n\tthis.v2.copy( source.v2 );\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nLineCurve.prototype.toJSON = function () {\r\n\r\n\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\tdata.v1 = this.v1.toArray();\r\n\tdata.v2 = this.v2.toArray();\r\n\r\n\treturn data;\r\n\r\n};\r\n\r\nLineCurve.prototype.fromJSON = function ( json ) {\r\n\r\n\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\tthis.v1.fromArray( json.v1 );\r\n\tthis.v2.fromArray( json.v2 );\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/extras/curves/LineCurve3.js\n\r\n\r\n\r\n\r\nfunction LineCurve3( v1, v2 ) {\r\n\r\n\tCurve.call( this );\r\n\r\n\tthis.type = 'LineCurve3';\r\n\r\n\tthis.v1 = v1 || new Vector3();\r\n\tthis.v2 = v2 || new Vector3();\r\n\r\n}\r\n\r\nLineCurve3.prototype = Object.create( Curve.prototype );\r\nLineCurve3.prototype.constructor = LineCurve3;\r\n\r\nLineCurve3.prototype.isLineCurve3 = true;\r\n\r\nLineCurve3.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\tvar point = optionalTarget || new Vector3();\r\n\r\n\tif ( t === 1 ) {\r\n\r\n\t\tpoint.copy( this.v2 );\r\n\r\n\t} else {\r\n\r\n\t\tpoint.copy( this.v2 ).sub( this.v1 );\r\n\t\tpoint.multiplyScalar( t ).add( this.v1 );\r\n\r\n\t}\r\n\r\n\treturn point;\r\n\r\n};\r\n\r\n// Line curve is linear, so we can overwrite default getPointAt\r\n\r\nLineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {\r\n\r\n\treturn this.getPoint( u, optionalTarget );\r\n\r\n};\r\n\r\nLineCurve3.prototype.copy = function ( source ) {\r\n\r\n\tCurve.prototype.copy.call( this, source );\r\n\r\n\tthis.v1.copy( source.v1 );\r\n\tthis.v2.copy( source.v2 );\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nLineCurve3.prototype.toJSON = function () {\r\n\r\n\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\tdata.v1 = this.v1.toArray();\r\n\tdata.v2 = this.v2.toArray();\r\n\r\n\treturn data;\r\n\r\n};\r\n\r\nLineCurve3.prototype.fromJSON = function ( json ) {\r\n\r\n\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\tthis.v1.fromArray( json.v1 );\r\n\tthis.v2.fromArray( json.v2 );\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/extras/curves/QuadraticBezierCurve.js\n\r\n\r\n\r\n\r\n\r\nfunction QuadraticBezierCurve( v0, v1, v2 ) {\r\n\r\n\tCurve.call( this );\r\n\r\n\tthis.type = 'QuadraticBezierCurve';\r\n\r\n\tthis.v0 = v0 || new Vector2();\r\n\tthis.v1 = v1 || new Vector2();\r\n\tthis.v2 = v2 || new Vector2();\r\n\r\n}\r\n\r\nQuadraticBezierCurve.prototype = Object.create( Curve.prototype );\r\nQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\r\n\r\nQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\r\n\r\nQuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\tvar point = optionalTarget || new Vector2();\r\n\r\n\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\r\n\r\n\tpoint.set(\r\n\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\r\n\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\r\n\t);\r\n\r\n\treturn point;\r\n\r\n};\r\n\r\nQuadraticBezierCurve.prototype.copy = function ( source ) {\r\n\r\n\tCurve.prototype.copy.call( this, source );\r\n\r\n\tthis.v0.copy( source.v0 );\r\n\tthis.v1.copy( source.v1 );\r\n\tthis.v2.copy( source.v2 );\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nQuadraticBezierCurve.prototype.toJSON = function () {\r\n\r\n\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\tdata.v0 = this.v0.toArray();\r\n\tdata.v1 = this.v1.toArray();\r\n\tdata.v2 = this.v2.toArray();\r\n\r\n\treturn data;\r\n\r\n};\r\n\r\nQuadraticBezierCurve.prototype.fromJSON = function ( json ) {\r\n\r\n\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\tthis.v0.fromArray( json.v0 );\r\n\tthis.v1.fromArray( json.v1 );\r\n\tthis.v2.fromArray( json.v2 );\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/extras/curves/QuadraticBezierCurve3.js\n\r\n\r\n\r\n\r\n\r\nfunction QuadraticBezierCurve3( v0, v1, v2 ) {\r\n\r\n\tCurve.call( this );\r\n\r\n\tthis.type = 'QuadraticBezierCurve3';\r\n\r\n\tthis.v0 = v0 || new Vector3();\r\n\tthis.v1 = v1 || new Vector3();\r\n\tthis.v2 = v2 || new Vector3();\r\n\r\n}\r\n\r\nQuadraticBezierCurve3.prototype = Object.create( Curve.prototype );\r\nQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\r\n\r\nQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\r\n\r\nQuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\tvar point = optionalTarget || new Vector3();\r\n\r\n\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\r\n\r\n\tpoint.set(\r\n\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\r\n\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\r\n\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\r\n\t);\r\n\r\n\treturn point;\r\n\r\n};\r\n\r\nQuadraticBezierCurve3.prototype.copy = function ( source ) {\r\n\r\n\tCurve.prototype.copy.call( this, source );\r\n\r\n\tthis.v0.copy( source.v0 );\r\n\tthis.v1.copy( source.v1 );\r\n\tthis.v2.copy( source.v2 );\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nQuadraticBezierCurve3.prototype.toJSON = function () {\r\n\r\n\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\tdata.v0 = this.v0.toArray();\r\n\tdata.v1 = this.v1.toArray();\r\n\tdata.v2 = this.v2.toArray();\r\n\r\n\treturn data;\r\n\r\n};\r\n\r\nQuadraticBezierCurve3.prototype.fromJSON = function ( json ) {\r\n\r\n\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\tthis.v0.fromArray( json.v0 );\r\n\tthis.v1.fromArray( json.v1 );\r\n\tthis.v2.fromArray( json.v2 );\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/extras/curves/SplineCurve.js\n\r\n\r\n\r\n\r\n\r\nfunction SplineCurve( points /* array of Vector2 */ ) {\r\n\r\n\tCurve.call( this );\r\n\r\n\tthis.type = 'SplineCurve';\r\n\r\n\tthis.points = points || [];\r\n\r\n}\r\n\r\nSplineCurve.prototype = Object.create( Curve.prototype );\r\nSplineCurve.prototype.constructor = SplineCurve;\r\n\r\nSplineCurve.prototype.isSplineCurve = true;\r\n\r\nSplineCurve.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\tvar point = optionalTarget || new Vector2();\r\n\r\n\tvar points = this.points;\r\n\tvar p = ( points.length - 1 ) * t;\r\n\r\n\tvar intPoint = Math.floor( p );\r\n\tvar weight = p - intPoint;\r\n\r\n\tvar p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\r\n\tvar p1 = points[ intPoint ];\r\n\tvar p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\r\n\tvar p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\r\n\r\n\tpoint.set(\r\n\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\r\n\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\r\n\t);\r\n\r\n\treturn point;\r\n\r\n};\r\n\r\nSplineCurve.prototype.copy = function ( source ) {\r\n\r\n\tCurve.prototype.copy.call( this, source );\r\n\r\n\tthis.points = [];\r\n\r\n\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\r\n\r\n\t\tvar point = source.points[ i ];\r\n\r\n\t\tthis.points.push( point.clone() );\r\n\r\n\t}\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nSplineCurve.prototype.toJSON = function () {\r\n\r\n\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\tdata.points = [];\r\n\r\n\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\r\n\r\n\t\tvar point = this.points[ i ];\r\n\t\tdata.points.push( point.toArray() );\r\n\r\n\t}\r\n\r\n\treturn data;\r\n\r\n};\r\n\r\nSplineCurve.prototype.fromJSON = function ( json ) {\r\n\r\n\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\tthis.points = [];\r\n\r\n\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\r\n\r\n\t\tvar point = json.points[ i ];\r\n\t\tthis.points.push( new Vector2().fromArray( point ) );\r\n\r\n\t}\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/extras/curves/Curves.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/extras/core/CurvePath.js\n\r\n\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n *\r\n **/\r\n\r\n/**************************************************************\r\n *\tCurved Path - a curve path is simply a array of connected\r\n *  curves, but retains the api of a curve\r\n **************************************************************/\r\n\r\nfunction CurvePath() {\r\n\r\n\tCurve.call( this );\r\n\r\n\tthis.type = 'CurvePath';\r\n\r\n\tthis.curves = [];\r\n\tthis.autoClose = false; // Automatically closes the path\r\n\r\n}\r\n\r\nCurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\r\n\r\n\tconstructor: CurvePath,\r\n\r\n\tadd: function ( curve ) {\r\n\r\n\t\tthis.curves.push( curve );\r\n\r\n\t},\r\n\r\n\tclosePath: function () {\r\n\r\n\t\t// Add a line curve if start and end of lines are not connected\r\n\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\r\n\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\r\n\r\n\t\tif ( ! startPoint.equals( endPoint ) ) {\r\n\r\n\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t// To get accurate point with reference to\r\n\t// entire path distance at time t,\r\n\t// following has to be done:\r\n\r\n\t// 1. Length of each sub path have to be known\r\n\t// 2. Locate and identify type of curve\r\n\t// 3. Get t for the curve\r\n\t// 4. Return curve.getPointAt(t')\r\n\r\n\tgetPoint: function ( t ) {\r\n\r\n\t\tvar d = t * this.getLength();\r\n\t\tvar curveLengths = this.getCurveLengths();\r\n\t\tvar i = 0;\r\n\r\n\t\t// To think about boundaries points.\r\n\r\n\t\twhile ( i < curveLengths.length ) {\r\n\r\n\t\t\tif ( curveLengths[ i ] >= d ) {\r\n\r\n\t\t\t\tvar diff = curveLengths[ i ] - d;\r\n\t\t\t\tvar curve = this.curves[ i ];\r\n\r\n\t\t\t\tvar segmentLength = curve.getLength();\r\n\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\r\n\r\n\t\t\t\treturn curve.getPointAt( u );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ti ++;\r\n\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\r\n\t\t// loop where sum != 0, sum > d , sum+1 <d\r\n\r\n\t},\r\n\r\n\t// We cannot use the default COOL.Curve getPoint() with getLength() because in\r\n\t// COOL.Curve, getLength() depends on getPoint() but in COOL.CurvePath\r\n\t// getPoint() depends on getLength\r\n\r\n\tgetLength: function () {\r\n\r\n\t\tvar lens = this.getCurveLengths();\r\n\t\treturn lens[ lens.length - 1 ];\r\n\r\n\t},\r\n\r\n\t// cacheLengths must be recalculated.\r\n\tupdateArcLengths: function () {\r\n\r\n\t\tthis.needsUpdate = true;\r\n\t\tthis.cacheLengths = null;\r\n\t\tthis.getCurveLengths();\r\n\r\n\t},\r\n\r\n\t// Compute lengths and cache them\r\n\t// We cannot overwrite getLengths() because UtoT mapping uses it.\r\n\r\n\tgetCurveLengths: function () {\r\n\r\n\t\t// We use cache values if curves and cache array are same length\r\n\r\n\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\r\n\r\n\t\t\treturn this.cacheLengths;\r\n\r\n\t\t}\r\n\r\n\t\t// Get length of sub-curve\r\n\t\t// Push sums into cached array\r\n\r\n\t\tvar lengths = [], sums = 0;\r\n\r\n\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\r\n\r\n\t\t\tsums += this.curves[ i ].getLength();\r\n\t\t\tlengths.push( sums );\r\n\r\n\t\t}\r\n\r\n\t\tthis.cacheLengths = lengths;\r\n\r\n\t\treturn lengths;\r\n\r\n\t},\r\n\r\n\tgetSpacedPoints: function ( divisions ) {\r\n\r\n\t\tif ( divisions === undefined ) divisions = 40;\r\n\r\n\t\tvar points = [];\r\n\r\n\t\tfor ( var i = 0; i <= divisions; i ++ ) {\r\n\r\n\t\t\tpoints.push( this.getPoint( i / divisions ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.autoClose ) {\r\n\r\n\t\t\tpoints.push( points[ 0 ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn points;\r\n\r\n\t},\r\n\r\n\tgetPoints: function ( divisions ) {\r\n\r\n\t\tdivisions = divisions || 12;\r\n\r\n\t\tvar points = [], last;\r\n\r\n\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\r\n\r\n\t\t\tvar curve = curves[ i ];\r\n\t\t\tvar resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2\r\n\t\t\t\t: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1\r\n\t\t\t\t\t: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length\r\n\t\t\t\t\t\t: divisions;\r\n\r\n\t\t\tvar pts = curve.getPoints( resolution );\r\n\r\n\t\t\tfor ( var j = 0; j < pts.length; j ++ ) {\r\n\r\n\t\t\t\tvar point = pts[ j ];\r\n\r\n\t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\r\n\r\n\t\t\t\tpoints.push( point );\r\n\t\t\t\tlast = point;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\r\n\r\n\t\t\tpoints.push( points[ 0 ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn points;\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.curves = [];\r\n\r\n\t\tfor ( var i = 0, l = source.curves.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar curve = source.curves[ i ];\r\n\r\n\t\t\tthis.curves.push( curve.clone() );\r\n\r\n\t\t}\r\n\r\n\t\tthis.autoClose = source.autoClose;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoJSON: function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.autoClose = this.autoClose;\r\n\t\tdata.curves = [];\r\n\r\n\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar curve = this.curves[ i ];\r\n\t\t\tdata.curves.push( curve.toJSON() );\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t},\r\n\r\n\tfromJSON: function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.autoClose = json.autoClose;\r\n\t\tthis.curves = [];\r\n\r\n\t\tfor ( var i = 0, l = json.curves.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar curve = json.curves[ i ];\r\n\t\t\tthis.curves.push( new Curves_namespaceObject[ curve.type ]().fromJSON( curve ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/extras/core/Path.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * Creates free form 2d path using series of points, lines or curves.\r\n **/\r\n\r\nfunction Path( points ) {\r\n\r\n\tCurvePath.call( this );\r\n\r\n\tthis.type = 'Path';\r\n\r\n\tthis.currentPoint = new Vector2();\r\n\r\n\tif ( points ) {\r\n\r\n\t\tthis.setFromPoints( points );\r\n\r\n\t}\r\n\r\n}\r\n\r\nPath.prototype = Object.assign( Object.create( CurvePath.prototype ), {\r\n\r\n\tconstructor: Path,\r\n\r\n\tsetFromPoints: function ( points ) {\r\n\r\n\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\r\n\r\n\t\tfor ( var i = 1, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tmoveTo: function ( x, y ) {\r\n\r\n\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\r\n\r\n\t},\r\n\r\n\tlineTo: function ( x, y ) {\r\n\r\n\t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\r\n\t\tthis.curves.push( curve );\r\n\r\n\t\tthis.currentPoint.set( x, y );\r\n\r\n\t},\r\n\r\n\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\r\n\r\n\t\tvar curve = new QuadraticBezierCurve(\r\n\t\t\tthis.currentPoint.clone(),\r\n\t\t\tnew Vector2( aCPx, aCPy ),\r\n\t\t\tnew Vector2( aX, aY )\r\n\t\t);\r\n\r\n\t\tthis.curves.push( curve );\r\n\r\n\t\tthis.currentPoint.set( aX, aY );\r\n\r\n\t},\r\n\r\n\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\r\n\r\n\t\tvar curve = new CubicBezierCurve(\r\n\t\t\tthis.currentPoint.clone(),\r\n\t\t\tnew Vector2( aCP1x, aCP1y ),\r\n\t\t\tnew Vector2( aCP2x, aCP2y ),\r\n\t\t\tnew Vector2( aX, aY )\r\n\t\t);\r\n\r\n\t\tthis.curves.push( curve );\r\n\r\n\t\tthis.currentPoint.set( aX, aY );\r\n\r\n\t},\r\n\r\n\tsplineThru: function ( pts /*Array of Vector*/ ) {\r\n\r\n\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\r\n\r\n\t\tvar curve = new SplineCurve( npts );\r\n\t\tthis.curves.push( curve );\r\n\r\n\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\r\n\r\n\t},\r\n\r\n\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\t\tvar x0 = this.currentPoint.x;\r\n\t\tvar y0 = this.currentPoint.y;\r\n\r\n\t\tthis.absarc( aX + x0, aY + y0, aRadius,\r\n\t\t\taStartAngle, aEndAngle, aClockwise );\r\n\r\n\t},\r\n\r\n\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\r\n\r\n\t},\r\n\r\n\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\t\tvar x0 = this.currentPoint.x;\r\n\t\tvar y0 = this.currentPoint.y;\r\n\r\n\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\r\n\r\n\t},\r\n\r\n\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\r\n\r\n\t\tif ( this.curves.length > 0 ) {\r\n\r\n\t\t\t// if a previous curve is present, attempt to join\r\n\t\t\tvar firstPoint = curve.getPoint( 0 );\r\n\r\n\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\r\n\r\n\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.curves.push( curve );\r\n\r\n\t\tvar lastPoint = curve.getPoint( 1 );\r\n\t\tthis.currentPoint.copy( lastPoint );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tCurvePath.prototype.copy.call( this, source );\r\n\r\n\t\tthis.currentPoint.copy( source.currentPoint );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoJSON: function () {\r\n\r\n\t\tvar data = CurvePath.prototype.toJSON.call( this );\r\n\r\n\t\tdata.currentPoint = this.currentPoint.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t},\r\n\r\n\tfromJSON: function ( json ) {\r\n\r\n\t\tCurvePath.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.currentPoint.fromArray( json.currentPoint );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/extras/core/Shape.js\n\r\n\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * Defines a 2d shape plane using paths.\r\n **/\r\n\r\n// STEP 1 Create a path.\r\n// STEP 2 Turn path into shape.\r\n// STEP 3 ExtrudeGeometry takes in Shape/Shapes\r\n// STEP 3a - Extract points from each shape, turn to vertices\r\n// STEP 3b - Triangulate each shape, add faces.\r\n\r\nfunction Shape( points ) {\r\n\r\n\tPath.call( this, points );\r\n\r\n\tthis.uuid = _Math.generateUUID();\r\n\r\n\tthis.type = 'Shape';\r\n\r\n\tthis.holes = [];\r\n\r\n}\r\n\r\nShape.prototype = Object.assign( Object.create( Path.prototype ), {\r\n\r\n\tconstructor: Shape,\r\n\r\n\tgetPointsHoles: function ( divisions ) {\r\n\r\n\t\tvar holesPts = [];\r\n\r\n\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\r\n\r\n\t\t}\r\n\r\n\t\treturn holesPts;\r\n\r\n\t},\r\n\r\n\t// get points of shape and holes (keypoints based on segments parameter)\r\n\r\n\textractPoints: function ( divisions ) {\r\n\r\n\t\treturn {\r\n\r\n\t\t\tshape: this.getPoints( divisions ),\r\n\t\t\tholes: this.getPointsHoles( divisions )\r\n\r\n\t\t};\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tPath.prototype.copy.call( this, source );\r\n\r\n\t\tthis.holes = [];\r\n\r\n\t\tfor ( var i = 0, l = source.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar hole = source.holes[ i ];\r\n\r\n\t\t\tthis.holes.push( hole.clone() );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoJSON: function () {\r\n\r\n\t\tvar data = Path.prototype.toJSON.call( this );\r\n\r\n\t\tdata.uuid = this.uuid;\r\n\t\tdata.holes = [];\r\n\r\n\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar hole = this.holes[ i ];\r\n\t\t\tdata.holes.push( hole.toJSON() );\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t},\r\n\r\n\tfromJSON: function ( json ) {\r\n\r\n\t\tPath.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.uuid = json.uuid;\r\n\t\tthis.holes = [];\r\n\r\n\t\tfor ( var i = 0, l = json.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar hole = json.holes[ i ];\r\n\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/core/TextGeometry.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass TextGeometry_TextGeometry {\r\n    constructor(param) {\r\n        param = param || {};\r\n\r\n        this.text = param.text == undefined ? '0' : param.text;\r\n\r\n        if(this.text == '2'){\r\n\r\n            var pts = [];\r\n\r\n            pts.push( new Vector2( 0, 10 ) );\r\n            pts.push( new Vector2( 5, 10 ) );\r\n            pts.push( new Vector2( 5, 4.5 ) );\r\n            pts.push( new Vector2( 1, 4.5 ) );\r\n            pts.push( new Vector2( 1, 1 ) );\r\n            pts.push( new Vector2( 5, 1 ) );\r\n            pts.push( new Vector2( 5, 0 ) );\r\n            pts.push( new Vector2( 0, 0 ) );\r\n            pts.push( new Vector2( 0, 5.5 ) );\r\n            pts.push( new Vector2( 4, 5.5 ) );\r\n            pts.push( new Vector2( 4, 9 ) );\r\n            pts.push( new Vector2( 0, 9 ) );\r\n\r\n            var shape = new Shape( pts );\r\n            var extrudeSettings = {\r\n                depth: 3,\r\n                steps: 1,\r\n                bevelEnabled: false,\r\n                bevelThickness: 2,\r\n                bevelSize: 4,\r\n                bevelSegments: 1\r\n            };\r\n            var extrudeGeometry = new ExtrudeBufferGeometry( shape, extrudeSettings );\r\n\r\n            var indices = [];\r\n            for(var i=0; i<extrudeGeometry.attributes.position.array.length/3; i++){\r\n                indices.push(i);\r\n            }\r\n\r\n            param.vertices = extrudeGeometry.attributes.position.array;\r\n            param.normal = extrudeGeometry.attributes.normal.array;\r\n            param.uv = extrudeGeometry.attributes.uv.array;\r\n            param.indices = indices;\r\n\r\n\r\n        }else if(this.text == '1'){\r\n\r\n            var pts = [];\r\n\r\n            pts.push( new Vector2( 4.5, 0 ) );\r\n            pts.push( new Vector2( 4.5, 10 ) );\r\n            pts.push( new Vector2( 5.5, 10 ) );\r\n            pts.push( new Vector2( 5.5, 0 ) );\r\n\r\n\r\n            var shape = new Shape( pts );\r\n            var extrudeSettings = {\r\n                depth: 3,\r\n                steps: 1,\r\n                bevelEnabled: false,\r\n                bevelThickness: 2,\r\n                bevelSize: 4,\r\n                bevelSegments: 1\r\n            };\r\n            var extrudeGeometry = new ExtrudeBufferGeometry( shape, extrudeSettings );\r\n\r\n            var indices = [];\r\n            for(var i=0; i<extrudeGeometry.attributes.position.array.length/3; i++){\r\n                indices.push(i);\r\n            }\r\n\r\n            param.vertices = extrudeGeometry.attributes.position.array;\r\n            param.normal = extrudeGeometry.attributes.normal.array;\r\n            param.uv = extrudeGeometry.attributes.uv.array;\r\n            param.indices = indices;\r\n\r\n\r\n        }else if(this.text == '3'){\r\n\r\n            var pts = [];\r\n\r\n            pts.push( new Vector2( 0, 0 ) );\r\n            pts.push( new Vector2( 0, 1 ) );\r\n            pts.push( new Vector2( 4, 1 ) );\r\n            pts.push( new Vector2( 4, 4.5 ) );\r\n            pts.push( new Vector2( 0, 4.5 ) );\r\n            pts.push( new Vector2( 0, 5.5 ) );\r\n            pts.push( new Vector2( 4, 5.5 ) );\r\n            pts.push( new Vector2( 4, 9 ) );\r\n            pts.push( new Vector2( 0, 9 ) );\r\n            pts.push( new Vector2( 0, 10 ) );\r\n            pts.push( new Vector2( 5, 10 ) );\r\n            pts.push( new Vector2( 5, 0 ) );\r\n            pts.push( new Vector2( 5, 0 ) );\r\n\r\n\r\n\r\n            var shape = new Shape( pts );\r\n            var extrudeSettings = {\r\n                depth: 3,\r\n                steps: 1,\r\n                bevelEnabled: false,\r\n                bevelThickness: 2,\r\n                bevelSize: 4,\r\n                bevelSegments: 1\r\n            };\r\n            var extrudeGeometry = new ExtrudeBufferGeometry( shape, extrudeSettings );\r\n\r\n            var indices = [];\r\n            for(var i=0; i<extrudeGeometry.attributes.position.array.length/3; i++){\r\n                indices.push(i);\r\n            }\r\n\r\n            param.vertices = extrudeGeometry.attributes.position.array;\r\n            param.normal = extrudeGeometry.attributes.normal.array;\r\n            param.uv = extrudeGeometry.attributes.uv.array;\r\n            param.indices = indices;\r\n\r\n\r\n        }else if(this.text == '4'){\r\n\r\n            var pts = [];\r\n\r\n            pts.push( new Vector2( 0, 10 ) );\r\n            pts.push( new Vector2( 1, 10 ) );\r\n            pts.push( new Vector2( 1, 5.5 ) );\r\n            pts.push( new Vector2( 4, 5.5 ) );\r\n            pts.push( new Vector2( 4, 10 ) );\r\n            pts.push( new Vector2( 5, 10 ) );\r\n            pts.push( new Vector2( 5, 0 ) );\r\n            pts.push( new Vector2( 4, 0 ) );\r\n            pts.push( new Vector2( 4, 4.5 ) );\r\n            pts.push( new Vector2( 0, 4.5 ) );\r\n\r\n\r\n            var shape = new Shape( pts );\r\n            var extrudeSettings = {\r\n                depth: 3,\r\n                steps: 1,\r\n                bevelEnabled: false,\r\n                bevelThickness: 2,\r\n                bevelSize: 4,\r\n                bevelSegments: 1\r\n            };\r\n            var extrudeGeometry = new ExtrudeBufferGeometry( shape, extrudeSettings );\r\n\r\n            var indices = [];\r\n            for(var i=0; i<extrudeGeometry.attributes.position.array.length/3; i++){\r\n                indices.push(i);\r\n            }\r\n\r\n            param.vertices = extrudeGeometry.attributes.position.array;\r\n            param.normal = extrudeGeometry.attributes.normal.array;\r\n            param.uv = extrudeGeometry.attributes.uv.array;\r\n            param.indices = indices;\r\n\r\n\r\n        }else if(this.text == '5'){\r\n\r\n            var pts = [];\r\n\r\n            pts.push( new Vector2( 0, 0 ) );\r\n            pts.push( new Vector2( 0, 1 ) );\r\n            pts.push( new Vector2( 4, 1 ) );\r\n            pts.push( new Vector2( 4, 4.5 ) );\r\n            pts.push( new Vector2( 0, 4.5 ) );\r\n            pts.push( new Vector2( 0, 10 ) );\r\n            pts.push( new Vector2( 5, 10 ) );\r\n            pts.push( new Vector2( 5, 9 ) );\r\n            pts.push( new Vector2( 1, 9 ) );\r\n            pts.push( new Vector2( 1, 5.5 ) );\r\n            pts.push( new Vector2( 5, 5.5 ) );\r\n            pts.push( new Vector2( 5, 0 ) );\r\n\r\n\r\n            var shape = new Shape( pts );\r\n            var extrudeSettings = {\r\n                depth: 3,\r\n                steps: 1,\r\n                bevelEnabled: false,\r\n                bevelThickness: 2,\r\n                bevelSize: 4,\r\n                bevelSegments: 1\r\n            };\r\n            var extrudeGeometry = new ExtrudeBufferGeometry( shape, extrudeSettings );\r\n\r\n            var indices = [];\r\n            for(var i=0; i<extrudeGeometry.attributes.position.array.length/3; i++){\r\n                indices.push(i);\r\n            }\r\n\r\n            param.vertices = extrudeGeometry.attributes.position.array;\r\n            param.normal = extrudeGeometry.attributes.normal.array;\r\n            param.uv = extrudeGeometry.attributes.uv.array;\r\n            param.indices = indices;\r\n        }else if(this.text == '6'){\r\n\r\n            var pts = [];\r\n\r\n            pts.push( new Vector2( 5, 10 ) );\r\n            pts.push( new Vector2( 0, 10 ) );\r\n            pts.push( new Vector2( 0, 0 ) );\r\n            pts.push( new Vector2( 5, 0 ) );\r\n            pts.push( new Vector2( 5, 5.5 ) );\r\n            pts.push( new Vector2( 1, 5.5 ) );\r\n            pts.push( new Vector2( 1, 4.5 ) );\r\n            pts.push( new Vector2( 4, 4.5 ) );\r\n            pts.push( new Vector2( 4, 1 ) );\r\n            pts.push( new Vector2( 1, 1 ) );\r\n            pts.push( new Vector2( 1, 9 ) );\r\n            pts.push( new Vector2( 5, 9 ) );\r\n\r\n\r\n\r\n            var shape = new Shape( pts );\r\n            var extrudeSettings = {\r\n                depth: 3,\r\n                steps: 1,\r\n                bevelEnabled: false,\r\n                bevelThickness: 2,\r\n                bevelSize: 4,\r\n                bevelSegments: 1\r\n            };\r\n            var extrudeGeometry = new ExtrudeBufferGeometry( shape, extrudeSettings );\r\n\r\n            var indices = [];\r\n            for(var i=0; i<extrudeGeometry.attributes.position.array.length/3; i++){\r\n                indices.push(i);\r\n            }\r\n\r\n            param.vertices = extrudeGeometry.attributes.position.array;\r\n            param.normal = extrudeGeometry.attributes.normal.array;\r\n            param.uv = extrudeGeometry.attributes.uv.array;\r\n            param.indices = indices;\r\n        }else if(this.text == '7'){\r\n\r\n            var pts = [];\r\n\r\n            pts.push( new Vector2( 0, 10 ) );\r\n            pts.push( new Vector2( 5, 10 ) );\r\n            pts.push( new Vector2( 5, 0 ) );\r\n            pts.push( new Vector2( 4, 0 ) );\r\n            pts.push( new Vector2( 4, 9 ) );\r\n            pts.push( new Vector2( 0, 9 ) );\r\n\r\n\r\n            var shape = new Shape( pts );\r\n            var extrudeSettings = {\r\n                depth: 3,\r\n                steps: 1,\r\n                bevelEnabled: false,\r\n                bevelThickness: 2,\r\n                bevelSize: 4,\r\n                bevelSegments: 1\r\n            };\r\n            var extrudeGeometry = new ExtrudeBufferGeometry( shape, extrudeSettings );\r\n\r\n            var indices = [];\r\n            for(var i=0; i<extrudeGeometry.attributes.position.array.length/3; i++){\r\n                indices.push(i);\r\n            }\r\n\r\n            param.vertices = extrudeGeometry.attributes.position.array;\r\n            param.normal = extrudeGeometry.attributes.normal.array;\r\n            param.uv = extrudeGeometry.attributes.uv.array;\r\n            param.indices = indices;\r\n        }else if(this.text == '8'){\r\n\r\n            var pts = [];\r\n\r\n            pts.push( new Vector2( 5, 10 ) );\r\n            pts.push( new Vector2( 0, 10 ) );\r\n            pts.push( new Vector2( 0, 0 ) );\r\n            pts.push( new Vector2( 5, 0 ) );\r\n\r\n            pts.push( new Vector2( 5, 9 ) );\r\n            pts.push( new Vector2( 4, 9 ) );\r\n            pts.push( new Vector2( 4, 5.5 ) );\r\n            pts.push( new Vector2( 1, 5.5 ) );\r\n\r\n            pts.push( new Vector2( 1, 4.5 ) );\r\n            pts.push( new Vector2( 4, 4.5 ) );\r\n            pts.push( new Vector2( 4, 1 ) );\r\n            pts.push( new Vector2( 1, 1 ) );\r\n            pts.push( new Vector2( 1, 9 ) );\r\n            pts.push( new Vector2( 5, 9 ) );\r\n\r\n\r\n            var shape = new Shape( pts );\r\n            var extrudeSettings = {\r\n                depth: 3,\r\n                steps: 1,\r\n                bevelEnabled: false,\r\n                bevelThickness: 2,\r\n                bevelSize: 4,\r\n                bevelSegments: 1\r\n            };\r\n            var extrudeGeometry = new ExtrudeBufferGeometry( shape, extrudeSettings );\r\n\r\n            var indices = [];\r\n            for(var i=0; i<extrudeGeometry.attributes.position.array.length/3; i++){\r\n                indices.push(i);\r\n            }\r\n\r\n            param.vertices = extrudeGeometry.attributes.position.array;\r\n            param.normal = extrudeGeometry.attributes.normal.array;\r\n            param.uv = extrudeGeometry.attributes.uv.array;\r\n            param.indices = indices;\r\n        }else if(this.text == '9'){\r\n\r\n            var pts = [];\r\n\r\n            pts.push( new Vector2( 0, 10 ) );\r\n            pts.push( new Vector2( 1, 10 ) );\r\n            pts.push( new Vector2( 1, 5.5 ) );\r\n            pts.push( new Vector2( 4, 5.5 ) );\r\n\r\n            pts.push( new Vector2( 4, 9 ) );\r\n            pts.push( new Vector2( 1, 9 ) );\r\n            pts.push( new Vector2( 1, 10 ) );\r\n            pts.push( new Vector2( 5, 10 ) );\r\n\r\n            pts.push( new Vector2( 5, 0 ) );\r\n            pts.push( new Vector2( 4, 0 ) );\r\n            pts.push( new Vector2( 4, 4.5 ) );\r\n            pts.push( new Vector2( 0, 4.5 ) );\r\n\r\n\r\n            var shape = new Shape( pts );\r\n            var extrudeSettings = {\r\n                depth: 3,\r\n                steps: 1,\r\n                bevelEnabled: false,\r\n                bevelThickness: 2,\r\n                bevelSize: 4,\r\n                bevelSegments: 1\r\n            };\r\n            var extrudeGeometry = new ExtrudeBufferGeometry( shape, extrudeSettings );\r\n\r\n            var indices = [];\r\n            for(var i=0; i<extrudeGeometry.attributes.position.array.length/3; i++){\r\n                indices.push(i);\r\n            }\r\n\r\n            param.vertices = extrudeGeometry.attributes.position.array;\r\n            param.normal = extrudeGeometry.attributes.normal.array;\r\n            param.uv = extrudeGeometry.attributes.uv.array;\r\n            param.indices = indices;\r\n        }else if(this.text == '0'){\r\n\r\n            var pts = [];\r\n\r\n            pts.push( new Vector2( 5, 10 ) );\r\n            pts.push( new Vector2( 0, 10 ) );\r\n            pts.push( new Vector2( 0, 0 ) );\r\n            pts.push( new Vector2( 5, 0 ) );\r\n\r\n            pts.push( new Vector2( 5, 9 ) );\r\n            pts.push( new Vector2( 4, 9 ) );\r\n            pts.push( new Vector2( 4, 1 ) );\r\n            pts.push( new Vector2( 1, 1 ) );\r\n\r\n            pts.push( new Vector2( 1, 9 ) );\r\n            pts.push( new Vector2( 5, 9 ) );\r\n\r\n\r\n            var shape = new Shape( pts );\r\n            var extrudeSettings = {\r\n                depth: 3,\r\n                steps: 1,\r\n                bevelEnabled: false,\r\n                bevelThickness: 2,\r\n                bevelSize: 4,\r\n                bevelSegments: 1\r\n            };\r\n            var extrudeGeometry = new ExtrudeBufferGeometry( shape, extrudeSettings );\r\n\r\n            var indices = [];\r\n            for(var i=0; i<extrudeGeometry.attributes.position.array.length/3; i++){\r\n                indices.push(i);\r\n            }\r\n\r\n            param.vertices = extrudeGeometry.attributes.position.array;\r\n            param.normal = extrudeGeometry.attributes.normal.array;\r\n            param.uv = extrudeGeometry.attributes.uv.array;\r\n            param.indices = indices;\r\n        }\r\n\r\n        this.uv = param.uv || new Float32Array([   // Vertex coordinates\r\n\r\n            1,1, 0,1, 0,0, 1,0,  // v0-v1-v2-v3 front\r\n            0,1, 0,0, 1,0, 1,1,  // v0-v3-v4-v5 right\r\n            1,0, 1,1, 0,1, 0,0,  // v0-v5-v6-v1 up\r\n            1,1, 0,1, 0,0, 1,0,  // v1-v6-v7-v2 left\r\n            0,1, 1,1, 1,0, 0,0,  // v7-v4-v3-v2 down\r\n            1,0, 0,0, 0,1, 1,1   // v4-v7-v6-v5 back\r\n\r\n        ]);\r\n\r\n        this.vertices = param.vertices || new Float32Array([   // Vertex coordinates\r\n            0.5, 0.5, 0.5,  -0.5, 0.5, 0.5,  -0.5,-0.5, 0.5,   0.5,-0.5, 0.5,  // v0-v1-v2-v3 front\r\n            0.5, 0.5, 0.5,   0.5,-0.5, 0.5,   0.5,-0.5,-0.5,   0.5, 0.5,-0.5,  // v0-v3-v4-v5 right\r\n            0.5, 0.5, 0.5,   0.5, 0.5,-0.5,  -0.5, 0.5,-0.5,  -0.5, 0.5, 0.5,  // v0-v5-v6-v1 up\r\n            -0.5, 0.5, 0.5,  -0.5, 0.5,-0.5,  -0.5,-0.5,-0.5,  -0.5,-0.5, 0.5,  // v1-v6-v7-v2 left\r\n            -0.5,-0.5,-0.5,   0.5,-0.5,-0.5,   0.5,-0.5, 0.5,  -0.5,-0.5, 0.5,  // v7-v4-v3-v2 down\r\n            0.5,-0.5,-0.5,  -0.5,-0.5,-0.5,  -0.5, 0.5,-0.5,   0.5, 0.5,-0.5   // v4-v7-v6-v5 back\r\n        ]);\r\n\r\n        this.normal = param.normal || this.vertices;\r\n\r\n        this.indices = new Uint16Array(param.indices);\r\n\r\n        this.morphAttributes = param.morphAttributes;\r\n\r\n        this.boundingSphere = new Sphere();\r\n        this.boundingBox = new Box3();\r\n        this.computeBoundingBox();\r\n\r\n        // this.updateNormal();\r\n\r\n        this.updataBuffer();\r\n\r\n    }\r\n\r\n    updataBuffer(){\r\n        var buffer = [];\r\n        var uv = this.uv;\r\n        var vertices = this.vertices;\r\n        var normal = this.normal;\r\n        for(var i=0; i<vertices.length; i+=3){\r\n            buffer.push(vertices[i+0]);\r\n            buffer.push(vertices[i+1]);\r\n            buffer.push(vertices[i+2]);\r\n\r\n            buffer.push(normal[i+0]);\r\n            buffer.push(normal[i+1]);\r\n            buffer.push(normal[i+2]);\r\n\r\n            buffer.push(uv[i/3*2+0]);\r\n            buffer.push(uv[i/3*2+1]);\r\n        }\r\n\r\n        this.buffer = new Float32Array(buffer);\r\n    }\r\n\r\n    updateNormal(){\r\n        var normal = [];\r\n        var vertices = this.vertices;\r\n        for(var i=0; i<vertices.length; i+=3*4){\r\n            var line1 = new Vector3().subVectors(\r\n                new Vector3(vertices[i+0], vertices[i+1], vertices[i+2]),\r\n                new Vector3(vertices[i+3], vertices[i+4], vertices[i+5])\r\n            );\r\n            var line2 = new Vector3().subVectors(\r\n                new Vector3(vertices[i+3], vertices[i+4], vertices[i+5]),\r\n                new Vector3(vertices[i+6], vertices[i+7], vertices[i+8]),\r\n            );\r\n            var cur_normal = new Vector3().crossVectors(\r\n                line1,\r\n                line2\r\n            ).toArray();\r\n            for(var j=0 ;j<4; j++){\r\n                normal.push(cur_normal[0], cur_normal[1], cur_normal[2]);\r\n            }\r\n        }\r\n        this.normal = new Float32Array(normal);\r\n\r\n    }\r\n\r\n    computeBoundingBox () {\r\n        var verticesV3 = [];\r\n        for(var i=0; i<this.vertices.length; i+=3){\r\n            verticesV3.push(new Vector3(this.vertices[i], this.vertices[i+1], this.vertices[i+2]))\r\n        }\r\n        this.boundingBox.setFromPoints(verticesV3);\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var core_TextGeometry = (TextGeometry_TextGeometry);\r\n\n// CONCATENATED MODULE: ./src/material/CubeTexture.js\n\r\n\r\nclass CubeTexture_CubeTexture extends material_Texture{\r\n    constructor(param) {\r\n        super(param);\r\n\r\n        param = param || {};\r\n        this.urls = param.urls;\r\n\r\n        this.images = [];\r\n        this.imgLoadCount = 0;\r\n        this.imgReady = false;\r\n\r\n        var that = this;\r\n        var urls = this.urls;\r\n        for(var i in urls){\r\n            var image = new Image();\r\n            that.images.push(image);\r\n            image.addEventListener('load', function() {\r\n                that.imgLoadCount ++;\r\n                if(that.imgLoadCount == 6){\r\n                    that.imgReady = true;\r\n                }\r\n            });\r\n            image.src = urls[i];\r\n        }\r\n\r\n    }\r\n\r\n    clone(){\r\n\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var material_CubeTexture = (CubeTexture_CubeTexture);\r\n\n// CONCATENATED MODULE: ./src/main.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import _GLTFLoader from \"./core/GLTFLoader\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar main_COOL = window.COOL = {};\r\n\r\nmain_COOL.LINEAR = 9729;\r\nmain_COOL.NEAREST = 9728;\r\n\r\nmain_COOL.CLAMP_TO_EDGE = 33071;\r\nmain_COOL.REPEAT = 10497;\r\nmain_COOL.MIRRORED_REPEAT = 33648;\r\n\r\nmain_COOL.Renderer = core_Renderer;\r\nmain_COOL.Mesh = core_Mesh;\r\nmain_COOL.Camera = camera_Camera;\r\nmain_COOL.OrthoCamera = camera_OrthoCamera;\r\nmain_COOL.CameraController = camera_CameraController;\r\nmain_COOL.Scene = core_Scene;\r\nmain_COOL.Material = material_Material;\r\nmain_COOL.MeshBasicMaterial = material_MeshBasicMaterial;\r\nmain_COOL.MeshLambertMaterial = material_MeshLambertMaterial;\r\nmain_COOL.MeshStandardMaterial = material_MeshStandardMaterial;\r\n\r\nmain_COOL.Texture = material_Texture;\r\nmain_COOL.CubeTexture = material_CubeTexture;\r\n\r\nmain_COOL.AmbientLight = light_AmbientLight;\r\nmain_COOL.DirectionalLight = light_DirectionalLight;\r\n\r\nmain_COOL.Geometry = core_Geometry;\r\nmain_COOL.BoxGeometry = core_BoxGeometry;\r\nmain_COOL.SphereGeometry = core_SphereGeometry;\r\n\r\n// COOL.GLTFLoader = _GLTFLoader;\r\nmain_COOL.GLTFLoader2 = GLTFLoader2;\r\n\r\nmain_COOL.Animation = animation_Animation;\r\n\r\nmain_COOL.Raycaster = Raycaster;\r\n\r\nmain_COOL.Vector2 = Vector2;\r\nmain_COOL.Vector3 = Vector3;\r\n\r\nmain_COOL.ExtrudeGeometry = ExtrudeGeometry;\r\nmain_COOL.ExtrudeBufferGeometry = ExtrudeBufferGeometry;\r\nmain_COOL.TextGeometry = core_TextGeometry;\r\nmain_COOL.Shape = Shape;\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")}]);